<?xml version="1.0" encoding="ISO-8859-1"?>

<bugrepository name="SWT">
  <bug id="75739" opendate="2004-10-06 17:02:00" fixdate="2004-10-18 17:40:00">
    <buginformation>
      <summary>Variant has no toString()</summary>
      <description>The Variant class has no toString() and one cannot call getString() in all cases since it throws an Exception if the type is VT_EMPTY. So I suggest: /** * Always returns a String. * &amp;#64;param variant * &amp;#64;return a String */ public static String toString() { if (this.getType() == COM.VT_EMPTY) { return &amp;quot;&amp;quot;; } return this.getString(); } Version 3.1.M2.</description>
      <comments>
		<comment id="1" date="2004-10-06 17:03:16 EDT" author="Gary Gregory">Oops, no "static" of course, I just mod'd the code from one of my util classes.</comment>
		<comment id="2" date="2004-10-13 09:27:01 EDT" author="Veronika Irvine">This implementation causes the allocation of memory for any Variant that is 
not of type VT_BSTR because the type must be coerced into a string. Also, it 
will fail if the data is not of a type that can be expressed as a String (e.g. 
VT_DISPATCH).

The proper implementation would give the type and the value in the toString 
without coersion.</comment>
		<comment id="3" date="2004-10-14 20:14:59 EDT" author="Gary Gregory">Created attachment 15178 [details]
A wrapper to OleAutomation.</comment>
		<comment id="4" date="2004-10-14 20:40:15 EDT" author="Gary Gregory">Hm, you're right, this toString() method should not cause any side effects. How
about:

    public static String toString(Variant variant) {
        int type = variant.getType();
        String str = "";
        switch (type) {
            case COM.VT_EMPTY :
                str += "VT_EMPTY";
                break;
            case COM.VT_BOOL :
                str += variant.getBoolean() + " (VT_BOOL";
                break;
            case COM.VT_R4 :
                str += variant.getFloat() + " (VT_R4";
                break;
            case COM.VT_I4 :
                str += variant.getInt() + " (VT_I4";
                break;
            case COM.VT_DISPATCH :
                str += variant.getDispatch() + " (VT_DISPATCH";
                break;
            case COM.VT_UNKNOWN :
                str += variant.getUnknown() + " (VT_UNKNOWN";
                break;
            case COM.VT_I2 :
                str += variant.getShort() + " (VT_I2";
                break;
            case COM.VT_BSTR :
                str += variant.getString() + " (VT_BSTR";
                break;
            default : {
                OLE.error(SWT.ERROR_NOT_IMPLEMENTED);
            }
        }
        if ((type &amp; COM.VT_BYREF) == COM.VT_BYREF) {
            str += " | VT_BYREF)";
        } else {
            str += ")";
        }
        return str;
    }

?</comment>
		<comment id="5" date="2004-10-18 16:10:41 EDT" author="Veronika Irvine">Implemented toString for 3.1 in HEAD &gt; Oct 18, 2004.

Not that calling the "getters" still results in undesirable work.  The 
implementation uses the internal fields with no coercion of types.</comment>
		<comment id="6" date="2004-10-18 17:40:10 EDT" author="Gary Gregory">Makes sense (using internal fields); my impl's POV was from the "outside".</comment>
      </comments>
    </buginformation>
    <fixedCommits>
      <commit Id="90ec89fa4cf090b09860b44b1ea372f41ab1cdef" author="Veronika Irvine" date="2004-10-19 04:55:26"/>
          <file name="bundles/org.eclipse.swt/Eclipse SWT OLE Win32/win32/org/eclipse/swt/ole/win32/Variant.java">
              <method name="setData" returnType="void" parameters="int"/>
          </file>
      </commit>
    </fixedCommits>
  </bug>
  <bug id="77948" opendate="2004-11-05 09:53:00" fixdate="2004-11-12 08:40:00">
    <buginformation>
      <summary>NullPointerException in CLabel.findMnemonic</summary>
      <description>I200411041200, GTK+ 2.4.9, KDE 3.3.0, Linux 2.6.9 I was creating new simple files in existing projects, and then deleting them. I was using the keyboard heavily for navigation. I found the exception below in the log. There was no major effect from this null pointer, but it might have been responsible for some buttons not disabling when they should. I'll investiage more. !ENTRY org.eclipse.ui 4 4 2004-11-05 08:51:21.199 !MESSAGE Unhandled event loop exception !ENTRY org.eclipse.ui 4 0 2004-11-05 08:51:21.235 !MESSAGE java.lang.NullPointerException !STACK 0 java.lang.NullPointerException at org.eclipse.swt.custom.CLabel.findMnemonic(CLabel.java:194) at org.eclipse.swt.custom.CLabel.onMnemonic(CLabel.java:334) at org.eclipse.swt.custom.CLabel$3.keyTraversed(CLabel.java:126) at org.eclipse.swt.widgets.TypedListener.handleEvent(TypedListener.java:221) at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:82) at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:989) at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1013) at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:998) at org.eclipse.swt.widgets.Control.traverse(Control.java:3088) at org.eclipse.swt.widgets.Control.translateMnemonic(Control.java:2992) at org.eclipse.swt.widgets.Composite.translateMnemonic(Composite.java:811) at org.eclipse.swt.widgets.Composite.translateMnemonic(Composite.java:816) at org.eclipse.swt.widgets.Composite.translateMnemonic(Composite.java:816) at org.eclipse.swt.widgets.Composite.translateMnemonic(Composite.java:816) at org.eclipse.swt.widgets.Composite.translateMnemonic(Composite.java:816) at org.eclipse.swt.widgets.Composite.translateMnemonic(Composite.java:816) at org.eclipse.swt.widgets.Composite.translateMnemonic(Composite.java:816) at org.eclipse.swt.widgets.Control.translateMnemonic(Control.java:3011) at org.eclipse.swt.widgets.Control.gtk_key_press_event(Control.java:1855) at org.eclipse.swt.widgets.Composite.gtk_key_press_event(Composite.java:451) at org.eclipse.swt.widgets.Tree.gtk_key_press_event(Tree.java:637) at org.eclipse.swt.widgets.Widget.windowProc(Widget.java:1325) at org.eclipse.swt.widgets.Display.windowProc(Display.java:3214) at org.eclipse.swt.internal.gtk.OS.gtk_widget_event(Native Method) at org.eclipse.swt.widgets.Control.gtk_mnemonic_activate(Control.java:1899) at org.eclipse.swt.widgets.Widget.windowProc(Widget.java:1330) at org.eclipse.swt.widgets.Display.windowProc(Display.java:3214) at org.eclipse.swt.internal.gtk.OS.gtk_main_do_event(Native Method) at org.eclipse.swt.widgets.Display.eventProc(Display.java:901) at org.eclipse.swt.internal.gtk.OS.g_main_context_iteration(Native Method) at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:2363) at org.eclipse.jface.window.Window.runEventLoop(Window.java:718) at org.eclipse.jface.window.Window.open(Window.java:696) at org.eclipse.ui.actions.NewWizardAction.run(NewWizardAction.java:172) at org.eclipse.jface.action.Action.runWithEvent(Action.java:988) at org.eclipse.ui.commands.ActionHandler.execute(ActionHandler.java:188) at org.eclipse.ui.internal.commands.Command.execute(Command.java:130) at org.eclipse.ui.internal.keys.WorkbenchKeyboard.executeCommand(WorkbenchKeyboard.java:445) at org.eclipse.ui.internal.keys.WorkbenchKeyboard.press(WorkbenchKeyboard.java:724) at org.eclipse.ui.internal.keys.WorkbenchKeyboard.processKeyEvent(WorkbenchKeyboard.java:767) at org.eclipse.ui.internal.keys.WorkbenchKeyboard.filterKeySequenceBindings(WorkbenchKeyboard.java:536) at org.eclipse.ui.internal.keys.WorkbenchKeyboard.access$2 (WorkbenchKeyboard.java:479) at org.eclipse.ui.internal.keys.WorkbenchKeyboard$1.handleEvent(WorkbenchKeyboard.java:221) at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:82) at org.eclipse.swt.widgets.Display.filterEvent(Display.java:1058) at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:988) at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1013) at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:998) at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1025) at org.eclipse.swt.widgets.Widget.gtk_key_press_event(Widget.java:593) at org.eclipse.swt.widgets.Control.gtk_key_press_event(Control.java:1866) at org.eclipse.swt.widgets.Composite.gtk_key_press_event(Composite.java:451) at org.eclipse.swt.widgets.Tree.gtk_key_press_event(Tree.java:637) at org.eclipse.swt.widgets.Widget.windowProc(Widget.java:1325) at org.eclipse.swt.widgets.Display.windowProc(Display.java:3214) at org.eclipse.swt.internal.gtk.OS.gtk_main_do_event(Native Method) at org.eclipse.swt.widgets.Display.eventProc(Display.java:901) at org.eclipse.swt.internal.gtk.OS.g_main_context_iteration(Native Method) at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:2363) at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:1527) at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:1498) at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:276) at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:144) at org.eclipse.ui.internal.ide.IDEApplication.run(IDEApplication.java:102) at org.eclipse.core.internal.runtime.PlatformActivator$1.run(PlatformActivator.java:335) at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:273) at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:129) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:85) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:58) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:60) at java.lang.reflect.Method.invoke(Method.java:391) at org.eclipse.core.launcher.Main.basicRun(Main.java:185) at org.eclipse.core.launcher.Main.run(Main.java:684) at org.eclipse.core.launcher.Main.main(Main.java:668)</description>
      <comments>
		<comment id="1" date="2004-11-08 14:48:00 EST" author="Veronika Irvine">Fixed in HEAD</comment>
		<comment id="2" date="2004-11-12 08:40:59 EST" author="Veronika Irvine">*** Bug 78211 has been marked as a duplicate of this bug. ***</comment>
      </comments>
    </buginformation>
    <fixedCommits>
      <commit Id="1b94542e397a999898bd881450caadc848cde4e3" author="Veronika Irvine" date="2004-11-09 04:27:47"/>
          <file name="bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/CLabel.java">
              <method name="onDispose" returnType="void" parameters="DisposeEvent"/>
          </file>
      </commit>
    </fixedCommits>
  </bug>
  <bug id="78548" opendate="2004-11-12 16:15:00" fixdate="2004-11-24 14:30:00">
    <buginformation>
      <summary>[consistency] Button Selection fires before MouseUp</summary>
      <description>- run the ControlExample, Button tab - turn on listeners MouseUp and Selection - click on an example Button -&amp;gt; on OSX you'll get Selection - MouseUp -&amp;gt; everywhere else you'll get MouseUp - Selection</description>
      <comments>
		<comment id="1" date="2004-11-15 15:32:09 EST" author="Steve Northover">SSQ and SN to investigate.  NOTE that it is undefined whether selection comes 
on mouse up or mouse down but it's easy to see that in this case, on every 
platform, selection is not issued unless the mouse is released inside the 
bounds of the button.</comment>
		<comment id="2" date="2004-11-24 13:59:47 EST" author="Veronika Irvine">SWT.Selection is posted from kEventControlHit.
SWT.MouseUp is posted from kEventMouseDown.
Selection is posted before MouseUp and therefore appears first.</comment>
		<comment id="3" date="2004-11-24 14:12:18 EST" author="Veronika Irvine">Changed Button to send the mouseUp rather than post.

Looking at Tree and ToolItem which have the same pattern.</comment>
		<comment id="4" date="2004-11-24 14:28:43 EST" author="Veronika Irvine">Changed ToolItem to send the MouseUp.  Leaving Tree as a post because selection happens on 
MouseDown.

Fixed in 3.1 HEAD &gt; Nov 24.</comment>
		<comment id="5" date="2004-11-24 14:29:40 EST" author="Veronika Irvine">reopening to assign to myself before closing.</comment>
		<comment id="6" date="2004-11-24 14:30:42 EST" author="Veronika Irvine">fixed as described in comments 3 and 4.</comment>
      </comments>
    </buginformation>
    <fixedCommits>
      <commit Id="3b0705af4949799a7bdad553d998188a5ae0bb41" author="Veronika Irvine" date="2004-11-25 04:10:24"/>
          <file name="bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Button.java">
              <method name="kEventMouseDown" returnType="int" parameters="int int int"/>
          </file>
      </commit>
    </fixedCommits>
  </bug>
  <bug id="78559" opendate="2004-11-12 17:08:00" fixdate="2004-11-24 15:31:00">
    <buginformation>
      <summary>[consistency] Slider fires two Selection events before MouseDown</summary>
      <description>- run the ControlExample, Slider/Scale tab - turn on the MouseDown and Selection listeners - click on the example Slider's thumb -&amp;gt; on OSX the following is fired: Selection, Selection, MouseDown -&amp;gt; on win32 the following is fired: MouseDown, Selection, Selection (&lt;span class="bz_closed"&gt;&lt;a href="show_bug.cgi?id=78558" title="RESOLVED WONTFIX - [consistency] Slider fires two selection events on single click"&gt;bug 78558&lt;/a&gt;&lt;/span&gt;) -&amp;gt; everywhere else: MouseDown, Selection</description>
      <comments>
		<comment id="1" date="2004-11-15 15:48:36 EST" author="Steve Northover">Looks like a bug.  Should be MouseDown, Selection everywhere to be consistent 
with controls such as List.</comment>
		<comment id="2" date="2004-11-15 15:49:58 EST" author="Steve Northover">To be exact, Selection should follow MouseDown for native controls.  It is 
unspecified whether Selection comes before MouseUp.</comment>
		<comment id="3" date="2004-11-24 15:31:19 EST" author="Veronika Irvine">Fixed so that we now get MouseDown, Selection detail = 1, ... Selection detail 
= 1, Selection detail = 0, Mouse Up.

Needed to add the tracking code to Slider.  In addition to fixing the bug 
reported here, this fixed the fact that there was no mouse up.

Fixed for 3.1 in HEAD &gt; Nov 24.</comment>
      </comments>
    </buginformation>
    <fixedCommits>
      <commit Id="c3babe73736dabc765cb0e6ff100cd524ced3529" author="Veronika Irvine" date="2004-11-25 05:21:37"/>
          <file name="bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Slider.java">
          </file>
      </commit>
    </fixedCommits>
  </bug>
  <bug id="79107" opendate="2004-11-19 14:54:00" fixdate="2004-11-24 19:23:00">
    <buginformation>
      <summary>[consistency] setItems(String[]) with null elements</summary>
      <description>Check if all platforms stop at null or ignore null elements.</description>
      <comments>
		<comment id="1" date="2004-11-24 15:40:32 EST" author="Carolyn MacLeod">Combo:
- Windows: null pointer exception creating the TCHAR buffer for the null item.
- GTK: adds all items before null, silently exits loop.
- Motif: adds all items before null, exits loop, throws ERROR_ITEM_NOT_ADDED.

List:
- Windows: adds all items before null, exits loop, throws ERROR_ITEM_NOT_ADDED.
    NOTE: spec does not discuss SWT.ERROR_ITEM_NOT_ADDED.
- GTK: adds all items before null, exits loop, throws ERROR_ITEM_NOT_ADDED.
- Motif: adds all items before null, exits loop, throws ERROR_ITEM_NOT_ADDED.

CCombo and PopupList: uses List, so same as List on all platforms.</comment>
		<comment id="2" date="2004-11-24 16:35:01 EST" author="Veronika Irvine">Combo:
- Mac: adds all items except null, silently ignores null.

List:
- Mac: actually inserts the null item, exception occurs randomly later.</comment>
		<comment id="3" date="2004-11-24 17:08:48 EST" author="Carolyn MacLeod">Talked with SN, SSQ, and VI, and we all agreed that we will loop over the 
items immediately, and throw ILLEGAL_ARGUMENT if there is a null in the array.

This is consistent with other SWT APIs that don't accept null as a valid value.

From the results posted in comments 1 and 2, it is clear that nobody is 
relying on the present behavior. &lt;g&gt;</comment>
		<comment id="4" date="2004-11-24 17:41:54 EST" author="Carolyn MacLeod">The new spec wording will be:

 * @exception IllegalArgumentException &lt;ul&gt;
 *    &lt;li&gt;ERROR_NULL_ARGUMENT - if the items array is null&lt;/li&gt;
 *    &lt;li&gt;ERROR_INVALID_ARGUMENT - if an item in the items array is null&lt;/li&gt;
 * &lt;/ul&gt;</comment>
		<comment id="5" date="2004-11-24 19:23:56 EST" author="Carolyn MacLeod">Fixed &gt; 20041124.</comment>
      </comments>
    </buginformation>
    <fixedCommits>
      <commit Id="7460f398f4aff7bc31e8034651e2181376b83e54" author="Carolyn MacLeod" date="2004-11-25 07:23:46"/>
          <file name="bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Combo.java">
              <method name="setItems" returnType="void" parameters="String[]"/>
          </file>
          <file name="bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/List.java">
              <method name="setItems" returnType="void" parameters="String[]"/>
          </file>
      </commit>
    </fixedCommits>
  </bug>
  <bug id="79481" opendate="2004-11-25 06:19:00" fixdate="2004-11-26 12:50:00">
    <buginformation>
      <summary>Sash no longer draggable when too small</summary>
      <description>Hi, see this snippet: public class Main { public static void main(String[] args) { final Display display = new Display(); Shell shell = new Shell(display); shell.setLayout(new FillLayout()); SashForm form = new SashForm(shell, SWT.HORIZONTAL | SWT.SMOOTH); form.setLayout(new FillLayout()); Composite child1 = new Composite(form, SWT.NONE); child1.setLayout(new FillLayout()); new Label(child1, SWT.NONE).setText(&amp;quot;Label in pane 1&amp;quot;); Composite child2 = new Composite(form, SWT.NONE); child2.setLayout(new FillLayout()); new Button(child2, SWT.PUSH).setText(&amp;quot;Button in pane2&amp;quot;); Composite child3 = new Composite(form, SWT.NONE); child3.setLayout(new FillLayout()); new Label(child3, SWT.PUSH).setText(&amp;quot;Label in pane3&amp;quot;); form.setWeights(new int[] { 30, 40, 30 }); shell.open(); while (!shell.isDisposed()) { if (!display.readAndDispatch()) display.sleep(); } display.dispose(); } } Grab the second Sash (right to the button), move it as far as possible to the left (the button becomes very thin). Try to grab the same Sash again. Notice that its not possible. Note: Bug does not occur when not using SWT.SMOOTH Suggestion: Its possible to size the button thiner, as without SWT.SMOOTH. I guess when using SWT.SMOOTh the button becomes that thin, that the Sash itself becomes invisible. The SashForm should not allow to resize the Sash to a smaller value than possible when not using SWT.SMOOTH. Ben</description>
      <comments>
		<comment id="1" date="2004-11-25 11:02:36 EST" author="Steve Northover">When a sash has the SWT.SMOOTH style, the sash is repositioned while it is 
being dragged.  I'm guessing that SashForm doesn't expect this and doesn't 
work in this case.  Vikki to fix and/or discuss the behavior of Sash with SN.</comment>
		<comment id="2" date="2004-11-26 12:50:46 EST" author="Veronika Irvine">Fixed for 3.1 in HEAD &gt; Nov. 26, 2004.</comment>
      </comments>
    </buginformation>
    <fixedCommits>
      <commit Id="53589931c57a2758ce0fb761e62dab57822faf93" author="Veronika Irvine" date="2004-11-27 02:37:15"/>
          <file name="bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/SashForm.java">
              <method name="getControls" returnType="Control[]" parameters="boolean"/>
          </file>
      </commit>
    </fixedCommits>
  </bug>
  <bug id="80120" opendate="2004-12-03 11:43:00" fixdate="2004-12-06 12:11:00">
    <buginformation>
      <summary>CTabFolder layout puts top right item one pixel to far to the right</summary>
      <description>see the attachment, I have a toolbar on top right and it cuts a pixel out of the top corner, the layout should take into account the border of the CTabFolder.</description>
      <comments>
		<comment id="1" date="2004-12-03 11:44:49 EST" author="Michael Van Meekeren">Created attachment 16334 [details]
border pixel cut off</comment>
		<comment id="2" date="2004-12-06 12:11:39 EST" author="Veronika Irvine">FIxed for 3.1 in HEAD &gt; Dec 6, 2004.</comment>
      </comments>
    </buginformation>
    <fixedCommits>
      <commit Id="b36771e33c8b3ae61bfb302294dbe921cbb1ae98" author="Veronika Irvine" date="2004-12-07 01:46:42"/>
          <file name="bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/CTabFolder.java">
              <method name="setButtonBounds" returnType="void" parameters=""/>
          </file>
      </commit>
    </fixedCommits>
  </bug>
  <bug id="80276" opendate="2004-12-06 11:52:00" fixdate="2004-12-16 14:52:00">
    <buginformation>
      <summary>CBannerLayout calls Control.update too often</summary>
      <description>CBannerLayout.layout() calls Control.update() all the time. Using update() is good for interactive resizing, but otherwise it is slow and should not be used. This code should be fixed to only call update() during resize, if at all.</description>
      <comments>
		<comment id="1" date="2004-12-16 14:52:38 EST" author="Veronika Irvine">We were calling update in layout because it was taking Eclipse so long to 
respond to the resize of the children that there was a visible delay in 
painting the swoosh when the user dragged the swoosh back and forth.  The 
performance of the resize seems to have improved so taking the update out 
seems reasonable.</comment>
      </comments>
    </buginformation>
    <fixedCommits>
      <commit Id="99846edeaaf42dd613c1099c7c92ab8fe645379a" author="Veronika Irvine" date="2004-12-17 04:48:43"/>
          <file name="bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/CBannerLayout.java">
              <method name="layout" returnType="void" parameters="Composite boolean"/>
          </file>
      </commit>
    </fixedCommits>
  </bug>
  <bug id="78854" opendate="2004-11-17 12:17:00" fixdate="2004-12-21 13:21:00">
    <buginformation>
      <summary>Memory leak in ClipboardProxy.getFunc()</summary>
      <description>At the end of ClipboardProxy.getFunc() OS.gtk_selection_data_set() function is used. However this function copies data so tdata.pValue should be freed using OS.g_free().</description>
      <comments>
		<comment id="1" date="2004-11-18 11:35:23 EST" author="Steve Northover">VI to make sure this is a leak rather than the correct "clipboard" way to do 
things.  For example, on Windows, memory is shared between processes so it is 
correct not to free the pointer.</comment>
		<comment id="2" date="2004-11-18 11:51:33 EST" author="Artyom Kuanbekov">The problem here is that gtk_selection_data_set() copies data. See 
http://developer.gnome.org/doc/API/2.0/gtk/gtk-Selections.html#gtk-selection-
data-set for more info</comment>
		<comment id="3" date="2004-11-18 17:33:01 EST" author="Veronika Irvine">Good catch Atyom.  Did you use a tool to find this leak or where you just 
looking at the code?  Same problem occurs in DragSource - fixed that case too.

Fixed in HEAD for 3.1 &gt; Nov 18, 2004.</comment>
		<comment id="4" date="2004-11-19 03:26:22 EST" author="Artyom Kuanbekov">During intensive usage of Eclipse Java editor (Cut and Paste) under Linux-GTK I 
noticed that size of the process is growing. After that I looked into the code 
and found the problem.

I thing this PR is major and should be ported back to Eclipse 2.1.x.</comment>
		<comment id="5" date="2004-11-19 06:47:45 EST" author="Veronika Irvine">There are no more 2.1.X builds.  However, it should be back ported to 3.0.X.</comment>
		<comment id="6" date="2004-11-19 14:21:29 EST" author="Veronika Irvine">This fix should be patched back to 3.0.2.</comment>
		<comment id="7" date="2004-12-08 08:43:48 EST" author="Kevin Haaland">Agreed. This defect needs to be fixed in 3.0.2</comment>
		<comment id="8" date="2004-12-21 13:21:36 EST" author="Veronika Irvine">Patched into 3.0.2 stream.</comment>
      </comments>
    </buginformation>
    <fixedCommits>
      <commit Id="ea2088161ff11ba4c1bcfcca3d37b7e836f9e64f" author="Veronika Irvine" date="2004-11-19 07:23:55"/>
          <file name="bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/gtk/org/eclipse/swt/dnd/DragSource.java">
              <method name="dragGetData" returnType="void" parameters="int int int int int"/>
          </file>
      </commit>
    </fixedCommits>
  </bug>
  <bug id="81265" opendate="2004-12-15 13:33:00" fixdate="2005-01-19 15:05:00">
    <buginformation>
      <summary>background of tree is incorrect when disabled</summary>
      <description>In Control Example, go to tree tab 1. change the background colour. 2. uncheck the enabled checbox The background of the node names changes to the default background, while the rest of the background remains the new background. In tabletree, the entire background of the table tree goes back to the default colour.</description>
      <comments>
		<comment id="1" date="2004-12-15 14:21:29 EST" author="Fai Sigalov">correction: the background of the tree changes to the background colour of the 
shell. 

table behaves the same as tabletree.

If any of these widgets are using the CHECK style:
- If the background is default, and the widget is disabled, an outline around 
the checkbox remains white.
- If the background was changed, and the widget is disabled, an outline around 
the checkbox remains in a colour somehow related to the background colour chosen
(yellow if background was orange; light purple if background was purple; blue 
stays the same; lighter colours have the shell colour outline even when table 
is enabled)


Version: 3.1.0
Build id: 200412142000</comment>
		<comment id="2" date="2004-12-22 11:01:50 EST" author="Steve Northover">*** Bug 81643 has been marked as a duplicate of this bug. ***</comment>
		<comment id="3" date="2004-12-22 11:37:56 EST" author="Steve Northover">Fixed &gt; 20041222</comment>
      </comments>
    </buginformation>
    <fixedCommits>
      <commit Id="e3a284077475cfed7262b71636e1ab3448ca2fd8" author="Veronika Irvine" date="2004-12-23 01:22:40"/>
          <file name="bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Tree.java">
              <method name="checkStyle" returnType="int" parameters="int"/>
          </file>
      </commit>
    </fixedCommits>
  </bug>
  <bug id="80506" opendate="2004-12-08 14:55:00" fixdate="2005-01-19 15:05:00">
    <buginformation>
      <summary>[consistency] forceActive and setActive are inconsistent across platforms</summary>
      <description>If a shell that hasn't been opened is forced active: on windows and mac, the current app loses focus, the shell becomes active, but can't be seen. on gtk and motif, if the shell isn't visible, nothing is done. import org.eclipse.swt.widgets.Display; import org.eclipse.swt.widgets.Shell; public class pr79504 { public static void main(String[] args) { final Display display = new Display(); Shell shell = new Shell(display); // shell.setActive(); shell.forceActive(); while (!shell.isDisposed()) { if (!display.readAndDispatch()) display.sleep(); } display.dispose(); } }</description>
      <comments>
		<comment id="1" date="2004-12-10 09:38:29 EST" author="Fai Sigalov">&gt; 20041209
win &amp; mac do nothing if shell isn't visible.</comment>
      </comments>
    </buginformation>
    <fixedCommits>
      <commit Id="bbe9d18eb1e0aac9a66e40cca33357f5fff9adf2" author="Carolyn MacLeod" date="2004-12-10 05:41:55"/>
          <file name="bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Shell.java">
          </file>
          <file name="bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Shell.java">
          </file>
      </commit>
    </fixedCommits>
  </bug>
  <bug id="58185" opendate="2004-04-12 15:16:00" fixdate="2005-01-22 10:59:00">
    <buginformation>
      <summary>Eclipse fails to load oldstyle BMP files</summary>
      <description>I have several old style BMP files. When I attempt to load them into an image eclipse runs out of memory. The problem appears to be that the WinBMPFileFormat class does not check the header of the file correctly before reading the image. In my case, I have a BMP file with the following header: 0x42 0x4d 0xca 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x4a 0x00 0x00 0x00 0xC0 0x00 0x00 0x00 0x10 0x00 0x10 0x00 0x01 0x00 0x04 0x00 Notice the 0x0c at offset 14. This indicates that the Bitmap info header is only 12 bytes long and not the 42 that is being assumed. This conforms to the BITMAPCOREHEADER. According to microsoft the information starting at offset 14 is either a BITMAPINFO or a BITMAPCOREINFO. The only way to tell the difference is to check the size. see: &lt;a href="http://msdn.microsoft.com/library/default.asp?url=/library/en"&gt;http://msdn.microsoft.com/library/default.asp?url=/library/en&lt;/a&gt;- us/gdi/bitmaps_7jaq.asp</description>
      <comments>
		<comment id="1" date="2004-04-12 15:17:27 EDT" author="Jim Adams">Created attachment 9396 [details]
old stype window BMP file</comment>
		<comment id="2" date="2004-09-24 03:53:05 EDT" author="Heinz">I've the same problem - I'm wondering that there is NO response from the SWT 
team on bug reports, which shows major limitations and generating random 
runtime errors upto out of memory exceptions on basic funcions like loading 
bitmap images. 
 
Funny enough - most graphic programs are calling these bitmap formats OS/2 - I 
always thought that this is IBM's stuff  :-). 
I've tested about 20 (twenty) graphics programs - &gt; 80% have read support for 
OS/2 bitmaps, and even the newest still have support to write theme. 
 
My sad conclusion: Microsoft can preview (explorer) OS/2 bitmaps, but IBM's SWT 
can't even read them without crashing. 
 </comment>
		<comment id="3" date="2004-10-04 11:36:39 EDT" author="Carolyn MacLeod">Fixed &gt; 20041004.
This was originally low priority because we thought it was a really uncommon 
case. But you got me curious when you said that it was actually OS/2 bitmaps 
that we weren't reading. We used to read these a long time ago, back when SWT 
was written in Smalltalk. I discovered that the OS/2 support was never 
translated into Java. I have fixed this, and we now read and write OS/2 
bitmaps. The ImageAnalyzer example has been updated accordingly.</comment>
		<comment id="4" date="2005-01-21 16:37:46 EST" author="Jim Adams">I just tried the BrowserExample and found that the BMP files that are part of 
that example don't pass through the isFileFormat code in WinBMPFileFormat nor 
OS2BMPFileFormat. I am using 3.1M4. I thought that this had been fixed already 
so I was surprised.</comment>
		<comment id="5" date="2005-01-22 10:59:46 EST" author="Jim Adams">nevermind</comment>
      </comments>
    </buginformation>
    <fixedCommits>
      <commit Id="c0a3d8afca03ba4a7fab48f55d3147b11c11b8d6" author="Carolyn MacLeod" date="2004-10-04 11:52:29"/>
          <file name="bundles/org.eclipse.swt/Eclipse SWT/common/org/eclipse/swt/SWT.java">
          </file>
          <file name="bundles/org.eclipse.swt/Eclipse SWT/common/org/eclipse/swt/internal/image/FileFormat.java">
          </file>
          <file name="bundles/org.eclipse.swt/Eclipse SWT/common/org/eclipse/swt/internal/image/OS2BMPFileFormat.java">
          </file>
          <file name="bundles/org.eclipse.swt/Eclipse SWT/common/org/eclipse/swt/internal/image/WinBMPFileFormat.java">
          </file>
      </commit>
    </fixedCommits>
  </bug>
  <bug id="83251" opendate="2005-01-19 15:58:00" fixdate="2005-01-26 13:19:00">
    <buginformation>
      <summary>Javadoc warnings in latest builds</summary>
      <description>I will attach a patch to get rid of them.</description>
      <comments>
		<comment id="1" date="2005-01-19 15:59:48 EST" author="Olivier Thomann">Created attachment 17308 [details]
Apply on HEAD of org.eclipse.swt</comment>
		<comment id="2" date="2005-01-26 13:19:37 EST" author="Veronika Irvine">Fixed for 3.1</comment>
      </comments>
    </buginformation>
    <fixedCommits>
      <commit Id="a10dbcc9ee33a985d2920cf431ec185a353fd9fd" author="Veronika Irvine" date="2005-01-27 03:09:48"/>
          <file name="bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyleRange.java">
              <method name="similarTo" returnType="boolean" parameters="StyleRange"/>
          </file>
          <file name="bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText.java">
              <method name="addExtendedModifyListener" returnType="void" parameters="ExtendedModifyListener"/>
          </file>
          <file name="bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledTextContent.java">
              <method name="replaceTextRange" returnType="void" parameters="int int String"/>
          </file>
          <file name="bundles/org.eclipse.swt/Eclipse SWT OLE Win32/win32/org/eclipse/swt/ole/win32/OleClientSite.java">
              <method name="OleClientSite" returnType="null" parameters="Composite int String"/>
          </file>
          <file name="bundles/org.eclipse.swt/Eclipse SWT OLE Win32/win32/org/eclipse/swt/ole/win32/OleControlSite.java">
              <method name="OleControlSite" returnType="null" parameters="Composite int String"/>
          </file>
          <file name="bundles/org.eclipse.swt/Eclipse SWT/common/org/eclipse/swt/layout/FormAttachment.java">
              <method name="FormAttachment" returnType="null" parameters="int"/>
          </file>
          <file name="bundles/org.eclipse.swt/Eclipse SWT/common/org/eclipse/swt/widgets/Dialog.java">
              <method name="setText" returnType="void" parameters="String"/>
          </file>
          <file name="bundles/org.eclipse.swt/Eclipse SWT/common/org/eclipse/swt/widgets/Event.java">
              <method name="setBounds" returnType="void" parameters="Rectangle"/>
          </file>
          <file name="bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/graphics/Region.java">
              <method name="translate" returnType="void" parameters="Point"/>
          </file>
          <file name="bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/graphics/TextLayout.java">
              <method name="setAscent" returnType="void" parameters="int"/>
          </file>
          <file name="bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Spinner.java">
              <method name="setIncrement" returnType="void" parameters="int"/>
          </file>
          <file name="bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Table.java">
              <method name="clear" returnType="void" parameters="int int"/>
          </file>
      </commit>
    </fixedCommits>
  </bug>
  <bug id="82346" opendate="2005-01-06 14:27:00" fixdate="2005-01-26 15:45:00">
    <buginformation>
      <summary>CLabel disappears when given SWT.CENTER flag in constructor</summary>
      <description>Not working (CLabel disappears): ... CLabel label = new CLabel(composite, SWT.SHADOW_IN | SWT.CENTER); label.setLayoutData(new GridData(GridData.FILL_HORIZONTAL)); ... Workaround: ... CLabel label = new CLabel(composite, SWT.SHADOW_IN); label.setAlignment(SWT.CENTER); label.setLayoutData(new GridData(GridData.FILL_HORIZONTAL)); ... Noticed this on Linux (gtk) , Eclipse 3.1M4</description>
      <comments>
		<comment id="1" date="2005-01-26 15:45:27 EST" author="Veronika Irvine">Cool.

Turns out this is a conflict between the style SWT.CENTER and SWT.EMBEDDED 
(same value).  Error does not happen on Windows because EMBEDDED is handled 
differently there.

Fixed for 3.1 M5 (&gt; Jan 26, 2005).</comment>
      </comments>
    </buginformation>
    <fixedCommits>
      <commit Id="617caa16607996fc0c177bb61875b51fc5b46c90" author="Veronika Irvine" date="2005-01-27 05:41:27"/>
          <file name="bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/CLabel.java">
              <method name="CLabel" returnType="null" parameters="Composite int"/>
          </file>
      </commit>
    </fixedCommits>
  </bug>
  <bug id="83699" opendate="2005-01-26 06:03:00" fixdate="2005-02-05 10:38:00">
    <buginformation>
      <summary>Font reset to default after screen saver</summary>
      <description>I20050125-0800 All editors and views using a StyledText widget have the font reset to default after coming back from my screen saver. Makes build I20050125-0800 unusable for me. Works if I replace org.eclipse.swt.win32_3.1.0 with the one from last I-build. This breakpoint gets hit when I return from the screen saver Thread [main] (Suspended (breakpoint at line 6820 in StyledText)) StyledText.setFont(Font) line: 6820 StyledText(Control).updateFont(Font, Font) line: 2913 StyledText(Composite).updateFont(Font, Font) line: 810 Canvas(Composite).updateFont(Font, Font) line: 807 Composite.updateFont(Font, Font) line: 807 Composite.updateFont(Font, Font) line: 807 Composite.updateFont(Font, Font) line: 807 Composite.updateFont(Font, Font) line: 807 Composite.updateFont(Font, Font) line: 807 Composite.updateFont(Font, Font) line: 807 Composite.updateFont(Font, Font) line: 807 Shell(Composite).updateFont(Font, Font) line: 807 Display.updateFont() line: 3379 Display.messageProc(int, int, int, int) line: 2276 OS.PeekMessageW(MSG, int, int, int, int) line: not available [native method] OS.PeekMessage(MSG, int, int, int, int) line: 2016 Display.readAndDispatch() line: 2510 Workbench.runEventLoop(Window$IExceptionHandler, Display) line: 1584 Workbench.runUI() line: 1550 Workbench.createAndRunWorkbench(Display, WorkbenchAdvisor) line: 288 PlatformUI.createAndRunWorkbench(Display, WorkbenchAdvisor) line: 144 IDEApplication.run(Object) line: 102 1.run(Object) line: 225 EclipseStarter.run(Object) line: 274 EclipseStarter.run(String[], Runnable) line: 129 NativeMethodAccessorImpl.invoke0(Method, Object, Object[]) line: not available [native method] NativeMethodAccessorImpl.invoke(Object, Object[]) line: 39 DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: 25 Method.invoke(Object, Object[]) line: 324 Main.basicRun(String[]) line: 255 Main.run(String[]) line: 811 Main.main(String[]) line: 795</description>
      <comments>
		<comment id="1" date="2005-01-26 14:15:39 EST" author="Steve Northover">Oops ... let me just fix that.</comment>
		<comment id="2" date="2005-01-26 18:04:50 EST" author="Billy Biggs">Fixed &gt; 20050126

Please verify that this fixes the problem for you.</comment>
		<comment id="3" date="2005-01-27 03:05:21 EST" author="Dani Megert">*** Bug 83753 has been marked as a duplicate of this bug. ***</comment>
		<comment id="4" date="2005-01-27 04:48:40 EST" author="Dani Megert">Verified in N20050127-0010.</comment>
		<comment id="5" date="2005-01-27 05:47:38 EST" author="Dani Megert">*** Bug 83810 has been marked as a duplicate of this bug. ***</comment>
		<comment id="6" date="2005-01-31 05:50:38 EST" author="Dani Megert">*** Bug 84025 has been marked as a duplicate of this bug. ***</comment>
		<comment id="7" date="2005-01-31 13:35:19 EST" author="Kim Horne">*** Bug 84071 has been marked as a duplicate of this bug. ***</comment>
		<comment id="8" date="2005-02-05 10:38:07 EST" author="Billy Biggs">*** Bug 84518 has been marked as a duplicate of this bug. ***</comment>
      </comments>
    </buginformation>
    <fixedCommits>
      <commit Id="cc9a02356d4e4178ac56d9d7d182b6f31981c638" author="Billy Biggs" date="2005-01-27 08:02:49"/>
          <file name="bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Control.java">
          </file>
      </commit>
    </fixedCommits>
  </bug>
  <bug id="79419" opendate="2004-11-24 12:48:00" fixdate="2005-02-11 14:16:00">
    <buginformation>
      <summary>[Preferences] Need a link component</summary>
      <description>We need to create a some sort of component for preference pages to use for linking. We should look into pushing down the org.eclipse.ui.views.framelist mechanism possibly.</description>
      <comments>
		<comment id="1" date="2004-11-24 16:47:18 EST" author="Michael Van Meekeren">adding Steve, we discussed options for this coming from SWT.</comment>
		<comment id="2" date="2004-11-24 16:47:42 EST" author="Michael Van Meekeren">want me to give you this bug Steve?</comment>
		<comment id="3" date="2004-11-24 17:18:06 EST" author="Steve Northover">Felipe to investigate adding a Link widget to SWT.</comment>
		<comment id="4" date="2004-11-25 18:23:52 EST" author="Felipe Heidrich">On Windows XP we can use SysLink Control, everywhere else (gtk, motif, carbon, 
photon, older versions of win32) we will have to emulated.</comment>
		<comment id="5" date="2004-11-26 10:28:00 EST" author="Steve Northover">On Windows it's possible to make the native RichText control display URLs.  
This is a long shot but we might investigate it.  If not, then we need to 
ensure that our link looks the same as the browser for the platform.</comment>
		<comment id="6" date="2004-12-02 09:47:20 EST" author="Michael Van Meekeren">Adding Dejan as we'd like him to use this as well once it is ready.</comment>
		<comment id="7" date="2004-12-02 10:06:27 EST" author="Dejan Glozic">There is currently a Hyperlink and ImageHyperlink custom widget in 
org.eclipse.ui.forms plug-in. It is used throughout Eclipse. 

I have no objections to SWT assuming ownership of the hyperlink widget for all 
the platforms (particularly because it involves using the native widget where 
possible and emulating it elsewhere). 

The current solution in Eclipse Forms performs low level rendering on all the 
platforms (but is full focus/keyboard/accessibility support). You should be 
aware of it in case SWT does not commit to the widget in 3.1.</comment>
		<comment id="8" date="2004-12-02 10:13:00 EST" author="Dejan Glozic">One thing we can investigate is splitting the current Eclipse Forms plug-in 
into the widget layer (that only requires SWT - org.eclipse.forms) and the UI 
layer that requires org.eclipse.ui (org.eclipse.ui.forms). This would allow 
platform UI team to make use of the form widgets (hyperlink, expandable 
composite, form, section, form text) without closing a dependency loop.</comment>
		<comment id="9" date="2004-12-02 10:31:48 EST" author="Steve Northover">How is that possible?  You have shipped and can't break binary compatibility.  
I'm hoping to get to this for M5.  FH will be doing the work.  Stay tuned.</comment>
		<comment id="10" date="2004-12-02 10:40:35 EST" author="Michael Van Meekeren">I suspect Dejan means API will remain where it is now and just forward to the
lower level one.  

I'd like the SWT solution ideally.  Dejan lets  take the other discussion off
this bug.</comment>
		<comment id="11" date="2005-01-06 15:40:14 EST" author="Michael Van Meekeren">Felipe, could you give an estimate on when this might be done?</comment>
		<comment id="12" date="2005-01-06 15:53:32 EST" author="Felipe Heidrich">I'll start next week and I hope to have something working in a couple weeks. 
The deadline (final API freeze etc.) for this widget is Eclipse 3.1 M5, sounds 
good ?</comment>
		<comment id="13" date="2005-01-11 04:07:51 EST" author="Tom Hofmann">sounds great!</comment>
		<comment id="14" date="2005-01-21 14:03:12 EST" author="Felipe Heidrich">Some limitation with the SysLink widget:
- can't change the foreground color
- does not change color when the widget is visited
- can't enable/disable the underline

The foreground color of the syslink is defined by the current windows xp theme.

If anyone knows how to workaround this limitation please let me know.</comment>
		<comment id="15" date="2005-02-09 07:57:13 EST" author="Dani Megert">Steve, Felipe - will we get this for M5 (see comment 9)?</comment>
		<comment id="16" date="2005-02-09 08:54:59 EST" author="Steve Northover">Yes.</comment>
		<comment id="17" date="2005-02-10 15:49:31 EST" author="Felipe Heidrich">I released today implementations of a Link widget for Windows, GTK, Mac, 
Motif, and Photon.

I still need to add some javadoc, junit tests, and add the widget to the 
ControlExample.</comment>
		<comment id="18" date="2005-02-10 16:15:27 EST" author="Darin Swanson">I think you mean 3.1M5 :-)</comment>
		<comment id="19" date="2005-02-10 16:17:36 EST" author="Felipe Heidrich">Yes, thanks</comment>
		<comment id="20" date="2005-02-11 07:04:53 EST" author="Dani Megert">We looked at it (N20050211-0010) and here's some feedback:

- it does look like a link: see attached picture of Java &gt; Editor preference
page (taken under WindowsXP). Under Linux-GTK it is also not looking like a link.
- I was not able to trigger the selection listener.
- the text should not be selectable

For the desired look and behavior see Java &gt; Editor preference page.</comment>
		<comment id="21" date="2005-02-11 07:05:54 EST" author="Dani Megert">Created attachment 17850 [details]
Java &gt; Editor preference page with new Link widget (WinXP)</comment>
		<comment id="22" date="2005-02-11 08:30:56 EST" author="Dejan Glozic">Daniel, are you sure the attachment is correct? The picture is very small and 
nothing can really be seen on it.</comment>
		<comment id="23" date="2005-02-11 08:38:12 EST" author="Dani Megert">Created attachment 17854 [details]
Java &gt; Editor preference page with new Link widget (WinXP)

That happens if you call your snaphosts image1,2,3... ;-)
Thanks for the hint.</comment>
		<comment id="24" date="2005-02-11 10:48:46 EST" author="Felipe Heidrich">Daniel, I need to add some API, for now, that is how to use it:
link.setText ("This is normal text &lt;a&gt;this is a link&lt;/a&gt; normal text again &lt;a 
href=\"http://eclipse.org\"&gt;link with href&lt;/a&gt;"));

The link above has two links, it is wrappable and selectable. Click in the 
first link and you get a selection with event.text="this is a link", click in 
the second link and you get a selection event.text="http://eclipse.org".

On Windows XP run with the manifest to enable the native SysLink control.</comment>
		<comment id="25" date="2005-02-11 10:54:11 EST" author="Dejan Glozic">I haven't tried the code, just looked at the class. Here is my feedback from 
that excersise :-):

1) Tooltip support is missing. Another attribute should be supported on each 
link called 'alt' that would allow clients to associate a different tooltip 
text for each &lt;a&gt; segment.

2) Link color is fixed. There should be API on the class called 'setLinkColor
(Color) or something that allows clients to override the default. 

3) There is no support for underline modes. A universal feature used often in 
browsers is to be able to choose between always underlined, underlined on 
hover only, or never. Perhaps this could not work on all the platforms and 
would be only a hint?

4) There is no support for active link color. This color (if set) would be 
used on link hover.</comment>
		<comment id="26" date="2005-02-11 10:59:06 EST" author="Felipe Heidrich">daniel:I'm turning text selection off for now.</comment>
		<comment id="27" date="2005-02-11 10:59:26 EST" author="Dejan Glozic">More feedback: the reason Eclipse Forms link and FormText widgets have a new 
event type (HyperlinkEvent) is to capture 'enter' and 'exit' states in 
addition to link activation. This is very handy when links are used in the 
main window because listeners can show the href value on the status line 
on 'enter' events. I am not advocating adding the new event type; having the 
events delivered in an alternative way would also be acceptable as long as the 
job is done.</comment>
		<comment id="28" date="2005-02-11 11:07:50 EST" author="Tom Hofmann">I know this is still in the flux, but: On GTK, the link uses a Roman font
instead of the default control font.</comment>
		<comment id="29" date="2005-02-11 11:11:22 EST" author="Steve Northover">Dejan, the current implementation on the Link widget in SWT is based on the 
native XP SysLink control.  You can see this widget running on XP in the 
Control Panel under System-&gt;Automatic Updates.  There are very good reasons to 
use the native control.  You shouldn't expect the native widget to have the 
same behavior, programability and/or API as FormText.</comment>
		<comment id="30" date="2005-02-11 11:20:29 EST" author="Dejan Glozic">Steve, I am using FormText as an example, not as an ultimate reference. The 
ultimate reference for FormText is the native browser. The decision to use 
native controls is the core phylosophy of SWT and I support it all the way, 
BTW. I was simply listing features available for link when rendered by modern 
Web browsers. If native Link controls offer only a subset of these features, 
that's another story.</comment>
		<comment id="31" date="2005-02-11 12:14:31 EST" author="Steve Northover">Agree.</comment>
		<comment id="32" date="2005-02-11 12:23:00 EST" author="Felipe Heidrich">(In reply to comment #28)
&gt; I know this is still in the flux, but: On GTK, the link uses a Roman font
&gt; instead of the default control font.

Thanks. Fixed in  GTK and Carbon.</comment>
		<comment id="33" date="2005-02-11 14:16:16 EST" author="Felipe Heidrich">Okay, I added java doc to setText and class, I also added the link widget to 
the control example. I'm closing this bug as fixed.

Bugs and feature requests should be capture in different problem reports.

Dejan: thanks for the feedback. I'll look into it.</comment>
      </comments>
    </buginformation>
    <fixedCommits>
      <commit Id="c3083eee66c31f711df96bc9fa5a037049276c51" author="Felipe Heidrich" date="2005-02-10 05:21:47"/>
          <file name="bundles/org.eclipse.swt/Eclipse SWT PI/win32/org/eclipse/swt/internal/win32/LITEM.java">
          </file>
          <file name="bundles/org.eclipse.swt/Eclipse SWT PI/win32/org/eclipse/swt/internal/win32/NMLINK.java">
          </file>
          <file name="bundles/org.eclipse.swt/Eclipse SWT PI/win32/org/eclipse/swt/internal/win32/OS.java">
          </file>
      </commit>
    </fixedCommits>
  </bug>
  <bug id="83262" opendate="2005-01-19 17:41:00" fixdate="2005-02-16 20:17:00">
    <buginformation>
      <summary>rxvt pastes null terminator</summary>
      <description>When pasting using the middle mouse button from StyledText into an rxvt window, it contains a null terminator at the end. Pasting from other applications like gedit or mozilla into rxvt does not show this behaviour, and this is not reproducable when pasting into an xterm. This problem exists on both Motif and GTK+. Since the X clipboard protocol has a string length field, we do not need to be null terminating these strings.</description>
      <comments>
		<comment id="1" date="2005-01-19 17:47:15 EST" author="Billy Biggs">Fixed &gt; 20050119</comment>
		<comment id="2" date="2005-01-19 17:58:38 EST" author="Veronika Irvine">Notes:  The string is still being null terminated - we are just setting the 
length field to exclude the null terminator.  The change was made to 
TextTranfer and RTFTransfer on both Motif and GTK.</comment>
		<comment id="3" date="2005-02-16 20:17:05 EST" author="Billy Biggs">Verified on I20050215-2300.</comment>
      </comments>
    </buginformation>
    <fixedCommits>
      <commit Id="1f0c909756e74c5720c48382acfb63c8f38bf00f" author="Billy Biggs" date="2005-01-20 07:43:24"/>
          <file name="bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/gtk/org/eclipse/swt/dnd/RTFTransfer.java">
              <method name="javaToNative" returnType="void" parameters="Object TransferData"/>
          </file>
          <file name="bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/gtk/org/eclipse/swt/dnd/TextTransfer.java">
              <method name="javaToNative" returnType="void" parameters="Object TransferData"/>
          </file>
          <file name="bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/motif/org/eclipse/swt/dnd/RTFTransfer.java">
              <method name="javaToNative" returnType="void" parameters="Object TransferData"/>
          </file>
          <file name="bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/motif/org/eclipse/swt/dnd/TextTransfer.java">
              <method name="javaToNative" returnType="void" parameters="Object TransferData"/>
          </file>
      </commit>
    </fixedCommits>
  </bug>
  <bug id="80830" opendate="2004-12-13 11:50:00" fixdate="2005-02-16 20:21:00">
    <buginformation>
      <summary>implement GC.drawFocus</summary>
      <description>I20041208-gtk GC.drawFocus simply draws a solid line. This is correctly following the javadoc, that says that this may happend if drawing the focus is not supported. However: this seems like a serious limitation to anyone implementing custom widgets. Is there any chance that this will be implemented on GTK? This is really a dup of point 2 of &lt;span class="bz_closed"&gt;&lt;a href="show_bug.cgi?id=62424" title="RESOLVED WONTFIX - gc.drawFocus on linux does not use XOR drawing"&gt;bug 62424&lt;/a&gt;&lt;/span&gt;, however, it also mentions other things, so I filed this one separately.</description>
      <comments>
		<comment id="1" date="2005-01-04 14:26:33 EST" author="Billy Biggs">Created attachment 16920 [details]
Patch

Implement gc.drawFocus using gtk_paint_focus ().</comment>
		<comment id="2" date="2005-01-04 15:40:15 EST" author="Billy Biggs">Fixed in HEAD.</comment>
		<comment id="3" date="2005-02-16 20:21:40 EST" author="Billy Biggs">Verified on I20050215-2300.</comment>
      </comments>
    </buginformation>
    <fixedCommits>
      <commit Id="a9e5fac4cbb80454333d1d54a7a46fe45f5193a6" author="Felipe Heidrich" date="2005-01-05 05:32:37"/>
          <file name="bundles/org.eclipse.swt/Eclipse SWT PI/gtk/org/eclipse/swt/internal/gtk/OS.java">
              <method name="gtk_paint_handle" returnType="void" parameters="int int int int GdkRectangle int byte[] int int int int int"/>
          </file>
          <file name="bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/graphics/Device.java">
          </file>
          <file name="bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/graphics/GC.java">
              <method name="drawFocus" returnType="void" parameters="int int int int"/>
          </file>
      </commit>
    </fixedCommits>
  </bug>
  <bug id="82905" opendate="2005-01-15 07:29:00" fixdate="2005-02-16 20:51:00">
    <buginformation>
      <summary>drawImage doesn't honor clip rect</summary>
      <description>I tried both I20050104-1600 and 3.1M4 on different linux versions with gtk 2.2 and gtk 2.4. It seems that GC#drawImage(Image,int,int,int,int,int,int.int,int) will not honor the GC's clipping but draw over the whole client area if and only if SWT.NO_BACKGROUND is set and the image has an alpha channel. This should not happen! Steps to reproduce: I've attached a demo application which displays two custom tab stripe created by a custom canvas subclass. The first stripe uses NO_BACKGROUND. I think, that's valid (and works on Windows) because the canvas draws its own background (the real application does more than just filling it with a simple color) and otherwise, it would flicker (unfortunately, blitting alpha-images is quite slow with SWT). You will notice that in the first stripe, the tab text will vanish if you move the mouse over the tabs. This seems happen because everything is redrawn is parts of the stripe are updated and the images are drawn always and the texts only inside the clipping region. So the images overwrite the text outside of the clipping region.</description>
      <comments>
		<comment id="1" date="2005-01-15 07:30:29 EST" author="Stefan Matthias Aust">Created attachment 17187 [details]
Demo application as mentioned above</comment>
		<comment id="2" date="2005-01-19 20:24:52 EST" author="Steve Northover">Billy to investigate and invoke SSQ or Chrix.</comment>
		<comment id="3" date="2005-01-19 22:11:23 EST" author="Billy Biggs">Thanks for the excellent test case and analysis.  You are correct, the problem
is due to the clipping rectangle being ignored.

For images with alpha, SWT is using gdk_pixbuf_render_to_drawable_alpha().  This
function does not take a GC parameter, and ignores the current clip rectangle. 
This function has been deprecated in favour of gdk_draw_pixbuf(), which does
take a GC.  Changing drawImage to use this function fixes this bug. 
gdk_draw_pixbuf() is documented as being available since GTK+ 2.2.

When using SWT.NO_BACKGROUND, SWT disables GTK+'s double buffering.  With double
buffering enabled, only the clipping rectangle is copied from the off-screen
buffer.  This is why you only see the bug when using SWT.NO_BACKGROUND.

SSQ: I'll get a patch ready...</comment>
		<comment id="4" date="2005-01-20 11:13:10 EST" author="Billy Biggs">Fixed &gt; 20050120

We now use gdk_draw_pixbuf on GTK+ 2.2.0 and higher which supports clipping.</comment>
		<comment id="5" date="2005-02-07 21:00:59 EST" author="Billy Biggs">*** Bug 84599 has been marked as a duplicate of this bug. ***</comment>
		<comment id="6" date="2005-02-16 20:51:50 EST" author="Billy Biggs">Verified on I20050215-2300.</comment>
      </comments>
    </buginformation>
    <fixedCommits>
      <commit Id="77d1382828681694379384efa416ab4e553645b0" author="Billy Biggs" date="2005-01-21 01:09:48"/>
          <file name="bundles/org.eclipse.swt/Eclipse SWT PI/gtk/org/eclipse/swt/internal/gtk/OS.java">
              <method name="gdk_draw_lines" returnType="void" parameters="int int int[] int"/>
          </file>
          <file name="bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/graphics/GC.java">
              <method name="drawImageAlpha" returnType="void" parameters="Image int int int int int int int int boolean int int"/>
          </file>
      </commit>
    </fixedCommits>
  </bug>
  <bug id="84557" opendate="2005-02-07 07:06:00" fixdate="2005-02-18 07:42:00">
    <buginformation>
      <summary>Table item does not appear in table</summary>
      <description>I am running I20050202-0800 linux gtk ctrl esc E brings up the handy switch to editor window, but unfortuantley the list is empty :(</description>
      <comments>
		<comment id="1" date="2005-02-07 08:55:20 EST" author="Kim Horne">This seems to work on windows...</comment>
		<comment id="2" date="2005-02-08 05:18:09 EST" author="Douglas Pollock">Could you attach a screenshot? </comment>
		<comment id="3" date="2005-02-08 05:30:11 EST" author="Edoardo Comar">Created attachment 17745 [details]
screenshot on my linux system

here is my screenshot.
FYI, I am running MEPIS linux on a 2.6.10 kernel, 
with latest Debian packages :
kdelibs 3.3.2-1 and libgtk2.0-0 version2.6.2-2</comment>
		<comment id="4" date="2005-02-16 11:50:38 EST" author="Edoardo Comar">still broken on I20050215-2300</comment>
		<comment id="5" date="2005-02-16 12:47:18 EST" author="Douglas Pollock">The text is actually being set on the table item, so I'm not sure why this it is
not appearing.  I'm going to try to test other platforms.  If it is GTK+
specific, then I'll talk to SWT.</comment>
		<comment id="6" date="2005-02-16 13:07:35 EST" author="Douglas Pollock">The problem is specific to GTK+, and is likely a problem in SWT.  I am running
GTK+ 2.4.14, for the record.

SWT: This table is constructed in WorkbenchEditorsDialog.  The table is kept in
a member variable called "editorsTable".

This points to a major flaw in the Table code....</comment>
		<comment id="7" date="2005-02-17 11:09:18 EST" author="Billy Biggs">*** Bug 85420 has been marked as a duplicate of this bug. ***</comment>
		<comment id="8" date="2005-02-17 11:23:12 EST" author="Douglas Pollock">I've talked to Silenio about this, and he says he'll look at it.</comment>
		<comment id="9" date="2005-02-17 11:54:39 EST" author="Michael Valenta">*** Bug 85722 has been marked as a duplicate of this bug. ***</comment>
		<comment id="10" date="2005-02-17 13:11:37 EST" author="Veronika Irvine">Problem is due to setting column to not be visible when width is 0.  This 
occurs when a TableColumn is first created.

Investigating a fix.</comment>
		<comment id="11" date="2005-02-17 15:44:22 EST" author="Veronika Irvine">Fixed for 4PM build Feb 17.</comment>
		<comment id="12" date="2005-02-18 07:42:01 EST" author="Edoardo Comar">thanks I working fine now on eclipse.buildId=I20050217-2000</comment>
      </comments>
    </buginformation>
    <fixedCommits>
      <commit Id="aae468902359c222878246ca5690fe9c8baf6c55" author="Veronika Irvine" date="2005-02-18 04:27:19"/>
          <file name="bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/TableColumn.java">
              <method name="setWidth" returnType="void" parameters="int"/>
          </file>
          <file name="bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/TreeColumn.java">
              <method name="setWidth" returnType="void" parameters="int"/>
          </file>
      </commit>
    </fixedCommits>
  </bug>
  <bug id="86000" opendate="2005-02-21 14:47:00" fixdate="2005-02-23 18:02:00">
    <buginformation>
      <summary>ImageLoader Save - produces invalid JPEG images</summary>
      <description>The ImageLoader Save function appears to be producing bad JPG images. I have only verified this with JPEG output. Simple test case below loads PNG Files and Saves them as JPEG. Many files were tested and the majority did produced the proper JPG images as expected. The attached Zip file contains only those files that did not save correctly to JPEG. package com.ibm.test.image; import org.eclipse.swt.*; import org.eclipse.swt.graphics.*; public class ImageLoaderTest { public static void main(String[] args) { ImageLoader loader; String dir=&amp;quot;c:\\image-problems\\&amp;quot;; String files[]={ &amp;quot;s34i3p04&amp;quot;, &amp;quot;s34n3p04&amp;quot;, &amp;quot;s35i3p04&amp;quot;, &amp;quot;s35n3p04&amp;quot;, &amp;quot;s36i3p04&amp;quot;, &amp;quot;s36n3p04&amp;quot;, &amp;quot;s37i3p04&amp;quot;, &amp;quot;s37n3p04&amp;quot;, &amp;quot;s38i3p04&amp;quot;, &amp;quot;s38n3p04&amp;quot;, &amp;quot;s39i3p04&amp;quot;, &amp;quot;s39n3p04&amp;quot; }; try { for (int i=0; i&amp;lt;files.length; i++) { String filein = dir+files[i]+&amp;quot;.png&amp;quot;; String fileout = dir+files[i]+&amp;quot;.jpg&amp;quot;; loader = new ImageLoader(); loader.load(filein); loader.save(fileout,SWT.IMAGE_JPEG); } } catch (SWTException e) { e.printStackTrace(); } } }</description>
      <comments>
		<comment id="1" date="2005-02-21 14:51:47 EST" author="Tim Wolf">Created attachment 18148 [details]
PNG images and erroneous JPG images created by ImageLoader-&gt;save

  
 Zip file of PNG images that are not correctly being saved as JPEG.</comment>
		<comment id="2" date="2005-02-23 16:58:35 EST" author="Carolyn MacLeod">Looks like the problem is with writing depth 4 jpg's.
Also happens when I load a depth 4 bitmap and try to write that as jpg.

Oddly, it doesn't happen if I load a depth 4 gif... hmmm... that's because for 
some reason it is written as a 24 bit depth jpg.

Still looking...</comment>
		<comment id="3" date="2005-02-23 17:21:36 EST" author="Tim Wolf"> Yep.  Appeared to maybe have something to do ith the scanline pad or 
 bytesperline not being computed correctly in these cases ?? 
 
 What I think I was seeing is that we have this problem anytime the
 bytesperline was not a multiple of 4 (Windows word alignment ??) 

 e.g.  when it was 20 - it worked,  when it was 21 it didn't ??</comment>
		<comment id="4" date="2005-02-23 17:25:31 EST" author="Tim Wolf"> 
 One other thing I meant to go back and check - but I suspect it has nothing 
 to do with the fact that JPG is the format being written.  GIF or anything 
 else would have the  same issue, I suspect.  I think the problem exists 
 inside one or more data elements of the ImageData.</comment>
		<comment id="5" date="2005-02-23 18:02:35 EST" author="Carolyn MacLeod">Fixed &gt; 20050223

JPEGFileFormat just needed to index into the image data byte array correctly 
when getting the data to write out for depth 4 images.

You are correct - basically, the scanline pad was not being taken into account 
when indexing. It was only a problem in JPEG output, though - not in ImageData.</comment>
      </comments>
    </buginformation>
    <fixedCommits>
      <commit Id="ecb485697a0e118e07d73184e7bece4f4b3e57b0" author="Carolyn MacLeod" date="2005-02-24 07:56:43"/>
          <file name="bundles/org.eclipse.swt/Eclipse SWT/common/org/eclipse/swt/internal/image/JPEGFileFormat.java">
              <method name="convert4BitRGBToYCbCr" returnType="void" parameters="ImageData"/>
          </file>
      </commit>
    </fixedCommits>
  </bug>
  <bug id="84012" opendate="2005-01-30 18:59:00" fixdate="2005-03-01 13:09:00">
    <buginformation>
      <summary>StyledText with SWT.WRAP style does not adjust selection correctly</summary>
      <description>When selecting text in the native Windows text widget, it is possible to extend the selection to the beginning (end) of a line by moving the mouse cursor beyond the left (right) edge of the widget's client area. In a StyledText widget with SWT.WRAP style, this does not work. When handling mouse move events, the StyledText discards all cases in which the horizontal mouse position lies outside its client area while the vertical coordinate translates to the same line the caret is currently on. This means that if the mouse movement is too quick (resulting in not receiving enough mouse move events to cover all the caret positions up to the left(right)most one), the selection will remain incomplete. See the attached screenshot for some visual clarification. Ignoring events outside the client area is apparently done in order not to confuse the (horizontal) auto-scroll mechanism that may also kick in on mouse movements. However, when the SWT.WRAP style is set, there is no horizontal auto-scrolling. Therefore, the fix is to introduce a check to see if the word-wrap option is turned on and allow extending the selection if it is. --- import org.eclipse.swt.*; import org.eclipse.swt.custom.*; import org.eclipse.swt.graphics.*; import org.eclipse.swt.layout.*; import org.eclipse.swt.widgets.*; public class StyledTextSelectionTest { public static void main(String[] args) { Display display = new Display(); Shell shell = new Shell(display); FillLayout layout = new FillLayout(SWT.VERTICAL); layout.marginWidth = 20; layout.marginHeight = 20; layout.spacing = 20; shell.setLayout(layout); Font font = new Font(display, &amp;quot;Arial&amp;quot;, 12, SWT.NORMAL); StyledText text1 = new StyledText(shell, SWT.BORDER | SWT.MULTI | SWT.WRAP | SWT.V_SCROLL); text1.setFont(font); text1.setText(&amp;quot;StyledText widget with SWT.WRAP style.&amp;quot;); Text text2 = new Text(shell, SWT.BORDER | SWT.MULTI | SWT.WRAP | SWT.V_SCROLL); text2.setFont(font); text2.setText(&amp;quot;Native text widget with SWT.WRAP style.&amp;quot;); shell.setSize(400, 300); shell.open(); while (!shell.isDisposed()) { if (!display.readAndDispatch()) { display.sleep(); } } font.dispose(); display.dispose(); } }</description>
      <comments>
		<comment id="1" date="2005-01-30 19:00:23 EST" author="Florian Priester">Created attachment 17577 [details]
Screenshot</comment>
		<comment id="2" date="2005-01-30 19:02:12 EST" author="Florian Priester">Created attachment 17578 [details]
Patch</comment>
		<comment id="3" date="2005-02-28 14:19:14 EST" author="Florian Priester">Felipe, could you perhaps take a quick look at my one-line fix for this bug?
It's affecting the usability of the StyledTexts in my application. Thanks!</comment>
		<comment id="4" date="2005-03-01 13:09:18 EST" author="Felipe Heidrich">patch released, Thanks.
Fixed in HEAD &gt; 20050301

Florian Priester added to SWT contributors list.</comment>
      </comments>
    </buginformation>
    <fixedCommits>
      <commit Id="5327c2c23bd9914b12852e726b79f4cac331c92a" author="Felipe Heidrich" date="2005-03-02 02:53:56"/>
          <file name="bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText.java">
              <method name="doMouseLocationChange" returnType="void" parameters="int int boolean"/>
          </file>
      </commit>
    </fixedCommits>
  </bug>
  <bug id="87363" opendate="2005-03-08 08:00:00" fixdate="2005-03-08 08:50:00">
    <buginformation>
      <summary>Regression: MenuDetect no longer opens new menus</summary>
      <description>Bug introduced Nov 5, 2004. Prior to change Control.showMenu did this: boolean showMenu (int x, int y) { Event event = new Event (); event.x = x; event.y = y; sendEvent (SWT.MenuDetect, event); if (!event.doit) return true; if (menu != null &amp;amp;&amp;amp; !menu.isDisposed ()) { if (x != event.x || y != event.y) { menu.setLocation (event.x, event.y); } menu.setVisible (true); return true; } return false; } If a menu was created during the MenuDetect listener notification, the menu field was updated and the menu was set visible. After Nov 5, 2004 the method was moved to Widget and now looks like this: boolean showMenu (Menu menu, int x, int y) { Event event = new Event (); event.x = x; event.y = y; sendEvent (SWT.MenuDetect, event); if (!event.doit) return true; if (menu != null &amp;amp;&amp;amp; !menu.isDisposed ()) { if (x != event.x || y != event.y) { menu.setLocation (event.x, event.y); } menu.setVisible (true); return true; } return false; } Since menu is just a local variable, it is not updated when a menu is created in the MenuDetect event. The following example demonstrates the problem: public static void main(String[] args) { Display display = new Display(); final Shell shell = new Shell(display); shell.addListener(SWT.MenuDetect, new Listener() { int count = 0; public void handleEvent(Event event) { Menu menu = shell.getMenu(); if (menu != null) menu.dispose(); menu = new Menu(shell, SWT.POP_UP); MenuItem item = new MenuItem(menu, SWT.PUSH); item.setText(&amp;quot;Menu &amp;quot; + count++); shell.setMenu(menu); } }); shell.pack(); shell.open(); while (!shell.isDisposed()) { if (!display.readAndDispatch()) display.sleep(); } display.dispose(); }</description>
      <comments>
		<comment id="1" date="2005-03-08 08:30:04 EST" author="Veronika Irvine">I have changed Widget.showMenu() so that it no longer takes Menu as an 
argument but instead calls getMenu() after sending the MenuDetect event in 
order to determine which menu to show.

This affects Table, Tree, Text and Widget.  Adding Silenio to verify for 
Windows and Christophe to verify for Pocket PC (most calls to showMenu are for 
PPC only).  In particular, this change means that a menu created during the 
MenuDetect event will be set visible.</comment>
      </comments>
    </buginformation>
    <fixedCommits>
      <commit Id="c3aa5c7e0128a8f707614484bb210d2959707428" author="Veronika Irvine" date="2005-03-08 10:27:03"/>
          <file name="bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Table.java">
              <method name="wmNotifyChild" returnType="LRESULT" parameters="int int"/>
          </file>
          <file name="bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Text.java">
          </file>
          <file name="bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Tree.java">
              <method name="wmNotifyChild" returnType="LRESULT" parameters="int int"/>
          </file>
          <file name="bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Widget.java">
              <method name="SetWindowPos" returnType="boolean" parameters="int int int int int int int"/>
          </file>
      </commit>
    </fixedCommits>
  </bug>
  <bug id="87676" opendate="2005-03-10 12:28:00" fixdate="2005-03-10 14:19:00">
    <buginformation>
      <summary>Double-click only works on a tree's column0</summary>
      <description>Build I-20050308 Using the log view as an example, double-clicking on column0 brings up the event dialog as it should. double-clicking on column1, column2 results in no notification to our double- click listener.</description>
      <comments>
		<comment id="1" date="2005-03-10 14:19:56 EST" author="Veronika Irvine">NM_DBLCLK is not sent for columns in Tree. Added code to Tree.WM_LBUTTONDBLCLK 
to detect the case when we double click outside of the first column and am 
posting a DefaultSelection event.

Steve and Silenio, please verify that this is correct.</comment>
      </comments>
    </buginformation>
    <fixedCommits>
      <commit Id="dbcf617c3014caea0ed6c0653866bb16c67441cc" author="Veronika Irvine" date="2005-03-11 04:15:20"/>
          <file name="bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Tree.java">
              <method name="WM_LBUTTONDBLCLK" returnType="LRESULT" parameters="int int"/>
          </file>
      </commit>
    </fixedCommits>
  </bug>
  <bug id="86294" opendate="2005-02-23 12:03:00" fixdate="2005-03-14 17:08:00">
    <buginformation>
      <summary>Find/Replace not working "Illegal/Unsupported escape on the Mac</summary>
      <description>I can't do a search on a java file with the M5a build on the Mac. Find: mask4 &amp;quot;Illegal/unsupported escape&amp;quot; comes up in the Find / Replace dialog.</description>
      <comments>
		<comment id="1" date="2005-02-23 12:12:38 EST" author="Christophe Cornu">Restarting Eclipse 'fixes' it for a little while.
Then after copying/pasting a few times words into the Find/Replace dialog, it 
appears again. Very hard to use Eclipse as a result.

Maybe a clipboard problem?</comment>
		<comment id="2" date="2005-03-09 17:53:56 EST" author="Andre Weinand">Yes, IIRC this is a clipboard problem. I think there is a '\0' character in the clipboard (especially after 
copying text from Safari).</comment>
		<comment id="3" date="2005-03-11 07:02:56 EST" author="Andre Weinand">*** Bug 87638 has been marked as a duplicate of this bug. ***</comment>
		<comment id="4" date="2005-03-11 20:09:37 EST" author="Andre Weinand">The problem is Combo.getClipboardText():

GetScrapFlavorSize returns the size of the clipboard contents in bytes,
and then a char array with the same number of chars is allocated.
However, since every char has two bytes, the array is twice as long as needed,
and the second half of the string contains zeroes.</comment>
		<comment id="5" date="2005-03-11 20:13:10 EST" author="Andre Weinand">Created attachment 18728 [details]
Patch for Combo.java</comment>
		<comment id="6" date="2005-03-11 20:30:07 EST" author="Andre Weinand">Veronika, the Spinner seems to have the same problem.

BTW, is there a reason why Text.getClipboardText() and Combo.getClipboardText() differ?</comment>
		<comment id="7" date="2005-03-14 07:54:31 EST" author="Veronika Irvine">Andre, I will investigate.  Silenio and Steve wrote this code so I will ask 
them.</comment>
		<comment id="8" date="2005-03-14 17:08:14 EST" author="Veronika Irvine">Fixed for Spinner and Combo.  Made Text use the same code as Combo.

Thanks Andre.</comment>
      </comments>
    </buginformation>
    <fixedCommits>
      <commit Id="116292d1bed8e86a80cf388e9d681c8e8491ddde" author="Veronika Irvine" date="2005-03-15 06:53:19"/>
          <file name="bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Combo.java">
          </file>
          <file name="bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Spinner.java">
              <method name="paste" returnType="void" parameters=""/>
          </file>
          <file name="bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Text.java">
              <method name="getClipboardText" returnType="String" parameters=""/>
          </file>
      </commit>
    </fixedCommits>
  </bug>
  <bug id="87855" opendate="2005-03-12 07:29:00" fixdate="2005-03-28 18:28:00">
    <buginformation>
      <summary>NullPointerException in Table.callWindowProc</summary>
      <description>Here is a stack trace I found when trying to kill a running process by pressing the &amp;quot;kill&amp;quot; button in the console view. I use 3.1M5a. !ENTRY org.eclipse.ui 4 0 2005-03-12 14:26:25.58 !MESSAGE java.lang.NullPointerException !STACK 0 java.lang.NullPointerException at org.eclipse.swt.widgets.Table.callWindowProc(Table.java:156) at org.eclipse.swt.widgets.Table.sendMouseDownEvent(Table.java:2084) at org.eclipse.swt.widgets.Table.WM_LBUTTONDOWN(Table.java:3174) at org.eclipse.swt.widgets.Control.windowProc(Control.java:3057) at org.eclipse.swt.widgets.Display.windowProc(Display.java:3480) at org.eclipse.swt.internal.win32.OS.DispatchMessageW(Native Method) at org.eclipse.swt.internal.win32.OS.DispatchMessage(OS.java:1619) at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:2539) at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:1612) at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:1578) at org.eclipse.ui.internal.Workbench.createAndRunWorkbench (Workbench.java:293) at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:144) at org.eclipse.ui.internal.ide.IDEApplication.run (IDEApplication.java:102) at org.eclipse.core.internal.runtime.PlatformActivator$1.run (PlatformActivator.java:228) at org.eclipse.core.runtime.adaptor.EclipseStarter.run (EclipseStarter.java:333) at org.eclipse.core.runtime.adaptor.EclipseStarter.run (EclipseStarter.java:150) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke (NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke (DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:585) at org.eclipse.core.launcher.Main.invokeFramework(Main.java:268) at org.eclipse.core.launcher.Main.basicRun(Main.java:260) at org.eclipse.core.launcher.Main.run(Main.java:887) at org.eclipse.core.launcher.Main.main(Main.java:871)</description>
      <comments>
		<comment id="1" date="2005-03-14 12:05:11 EST" author="Veronika Irvine">This code changed due to a bug fix for:

https://bugs.eclipse.org/bugs/show_bug.cgi?id=79064

Steve, Silenio, The NPE happens in Table.callWindowProc() after the call to 
OS.CallWindowProc().  Should we guard against the possiblity that display is 
being set to null during the OS.CallWindowProc processing?

case OS.WM_LBUTTONDOWN:
case OS.WM_MBUTTONDOWN:
case OS.WM_RBUTTONDOWN:
case OS.WM_XBUTTONDOWN: {
 display.ignoreMsgFilter = true;
 int code = OS.CallWindowProc (TableProc, hwnd, msg, wParam, lParam);
 display.ignoreMsgFilter = false;
 return code;
}

I have been unable to create a simple example where the display gets nulled 
out in this way but it appears to be possible.</comment>
		<comment id="2" date="2005-03-14 16:11:08 EST" author="Veronika Irvine">Changed the code so that display is stored locally in the case the widget is 
disposed during OS.CallWindowProc:

case OS.WM_LBUTTONDOWN:
case OS.WM_MBUTTONDOWN:
case OS.WM_RBUTTONDOWN:
case OS.WM_XBUTTONDOWN:
 // Keep a local reference to display because the widget could be
 // disposed during the call to CallWindowProc().
 Display display = this.display;
 display.ignoreMsgFilter = true;
 int code = OS.CallWindowProc (TreeProc, hwnd, msg, wParam, lParam);
 display.ignoreMsgFilter = false;
 return code;


Leaving the bug report open and assigning to Steve because I think the 
original bug 79064 is not completely solved and this is exposing yet another 
case of the same problem.</comment>
		<comment id="3" date="2005-03-28 18:28:47 EST" author="Steve Northover">It's not a case of bug 79064.  Depending what WM_LBUTTONDOWN does in the 
Windows code for Table, other callbacks might run.  For example, if the C code 
in Windows does UpdateWindow(), then WM_PAINT might come in.  If it does a 
PeekMessage(), then cross process message sends might be happening too.  If 
that is the case, then the original fix didn't fix this problem.</comment>
      </comments>
    </buginformation>
    <fixedCommits>
      <commit Id="d8ec5bd674c9f38b94baa468b59c96ddbe13d4b5" author="Veronika Irvine" date="2005-03-15 06:05:43"/>
          <file name="bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Table.java">
              <method name="callWindowProc" returnType="int" parameters="int int int int"/>
          </file>
          <file name="bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Tree.java">
              <method name="callWindowProc" returnType="int" parameters="int int int int"/>
          </file>
      </commit>
    </fixedCommits>
  </bug>
  <bug id="89533" opendate="2005-03-30 08:55:00" fixdate="2005-03-31 07:11:00">
    <buginformation>
      <summary>[Themes] Colors and Fonts preferences page has funny icons for color entries</summary>
      <description></description>
      <comments>
		<comment id="1" date="2005-03-30 08:59:23 EST" author="Markus Keller">Created attachment 19320 [details]
Screenshot

I20050330-0500

Steps:
- new workspace
- close intro screen
- switch to Debug view
- open Window &gt; Preferences, go to Colors and Fonts page and expand 'View and
Editor Folders'</comment>
		<comment id="2" date="2005-03-30 10:31:17 EST" author="Kim Horne">Woah.  Weird... this is only happening on Windows too...</comment>
		<comment id="3" date="2005-03-30 10:35:34 EST" author="Kim Horne">Incidentally, I'm getting this weirdness in all Color/Font folders, not just
Views and Editors.</comment>
		<comment id="4" date="2005-03-30 10:46:53 EST" author="Markus Keller">You're right, and the patterns are not always the same. I guess the one playing
April Fools Day here should adjust his/her/its clock ;-)</comment>
		<comment id="5" date="2005-03-30 10:54:24 EST" author="Kim Horne">:)

Steve, any idea what might be going on here?  The code that draws the colour
blocks hasn't changed in ages.  I've confirmed that the icons look good on OS X
and Motif.</comment>
		<comment id="6" date="2005-03-30 13:50:39 EST" author="Veronika Irvine">This is caused by the changes to ImageList between 1.16 and 1.17 which were 
added to fix 35040.</comment>
		<comment id="7" date="2005-03-30 14:29:39 EST" author="Veronika Irvine">Fixed &gt; 20050330 (HEAD, version 1.22 of ImageList)</comment>
		<comment id="8" date="2005-03-30 17:16:18 EST" author="Christophe Cornu">fixed by silenio for M6</comment>
      </comments>
    </buginformation>
    <fixedCommits>
      <commit Id="222e4e9c76eea13b2a463a568f1d42c7108bda16" author="Veronika Irvine" date="2005-03-31 04:27:28"/>
          <file name="bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/ImageList.java">
              <method name="set" returnType="void" parameters="int Image int"/>
          </file>
      </commit>
    </fixedCommits>
  </bug>
  <bug id="90018" opendate="2005-04-01 14:40:00" fixdate="2005-04-05 08:14:00">
    <buginformation>
      <summary>Native tooltips left around on CTabFolder</summary>
      <description>Hover over the PartStack CTabFolder inside eclipse until some native tooltip is displayed. For example, the maximize button. When the tooltip appears, change perspectives using the keybinding. the CTabFolder gets hidden, but its tooltip is permanently displayed and never goes away. Even if that CTabFolder is disposed (I'm assuming) when the perspective is closed.</description>
      <comments>
		<comment id="1" date="2005-04-01 14:47:17 EST" author="Randy Hudson">So, why does CTabFolder use the SWT.TOOL style constant for its tooltip? 
According to the javadoc, this affects the titlebar height. But the CVS comment
says this was done for the soft shadow effect on windows.

I'm using NO_TRIM for my custom tooltips, and NO_FOCUS. Should I be?</comment>
		<comment id="2" date="2005-04-04 16:39:08 EDT" author="Veronika Irvine">Fixed in Head on April 4, 2005.

Since 3.1 M5, the SWT.TOOL style causes the shell to have a shadow just like a 
native tooltip on Windows XP.  If the SWT.TOOL style is combined with title or 
min/max/close, it has the effect of making the title bar shorter.

The style NO_TRIM removes the black border around the shell.  Tooltips 
generally have a border so I would not do this.</comment>
		<comment id="3" date="2005-04-05 08:14:43 EDT" author="Veronika Irvine">*** Bug 83983 has been marked as a duplicate of this bug. ***</comment>
      </comments>
    </buginformation>
    <fixedCommits>
      <commit Id="0d6dac42bf7b3b8e207b62e73a7f8c6506355bb0" author="Veronika Irvine" date="2005-04-05 05:28:14"/>
          <file name="bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/CTabFolder.java">
              <method name="onDispose" returnType="void" parameters=""/>
          </file>
      </commit>
    </fixedCommits>
  </bug>
  <bug id="87997" opendate="2005-03-14 19:21:00" fixdate="2005-04-06 12:50:00">
    <buginformation>
      <summary>TableEditor.dispose( ) causes NPE if linked Table is being disposed</summary>
      <description>Found in 3.1 I20050308-0835. TableEdtior.dispose( ) calls methods on it's owning Table to remove some listeners from the table's columns. If the table is in the process of being disposed, the columns will have already been disposed and this will result in a NPE. Specifically this prevents one from adding a dispose listener on the Table or a TableItem and trying to dispose of the associated editor, as in the code below. Further if the dispose listener is set on the parent of the Table, a &amp;quot;Widget is disposed&amp;quot; exception will be thrown instead of the NPE. This leaves no place to hook to trigger the disposal of the TableEditor. import org.eclipse.swt.custom.TableEditor; import org.eclipse.swt.events.*; import org.eclipse.swt.widgets.*; public class Test { public static void main( String[ ] args ) { Shell shell = new Shell( ); Table table = new Table( shell, 0 ); new TableColumn( table, 0 ); TableItem item = new TableItem( table, 0 ); final TableEditor editor = new TableEditor( table ); final Text text = new Text( table, 0 ); editor.setEditor( text, item, 0 ); item.addDisposeListener( new DisposeListener( ) { public void widgetDisposed( DisposeEvent e ) { text.dispose( ); editor.dispose( ); // Triggers a NPE } } ); shell.dispose( ); } }</description>
      <comments>
		<comment id="1" date="2005-03-15 13:05:57 EST" author="Veronika Irvine">This is another argument for disposing the items first and then the columns.</comment>
		<comment id="2" date="2005-04-06 12:50:05 EDT" author="Veronika Irvine">The TableEditor will be disposed automatically when the Table is disposed.

However, it is quite reasonable to want to dispose the editor when the item is 
disposed and you will not know if this is because the table itself is disposed 
or just the item.

I have changed the order so that items are released before columns and the 
example code you attached now works without an exception.

Fixed in 3.1 M6.</comment>
      </comments>
    </buginformation>
    <fixedCommits>
      <commit Id="085b889af5650eb15e24717fe078a26cb6d8533a" author="Veronika Irvine" date="2005-03-29 05:06:27"/>
          <file name="bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Table.java">
          </file>
          <file name="bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Tree.java">
          </file>
      </commit>
    </fixedCommits>
  </bug>
  <bug id="88829" opendate="2005-03-22 20:41:00" fixdate="2005-04-06 17:05:00">
    <buginformation>
      <summary>Table.setColumnOrder() may not fire enough Move events</summary>
      <description>- start with five columns, all different widths - do Table.setColumnOrder(new int[] {4,1,2,3,0}); - SWT.Move events are fired for columns 0 and 4 because they swapped positions -&amp;gt; but Move should have been fired for all of the columns since the width of the first displayed column changed, and therefore all of the other columns are auto-shifted accordingly</description>
      <comments>
		<comment id="1" date="2005-03-29 08:59:24 EST" author="Veronika Irvine">Same problem exists on Carbon.</comment>
		<comment id="2" date="2005-04-06 15:59:18 EDT" author="Veronika Irvine">Simple Test:

public static void main (String [] args) {
 Display display = new Display ();
 Shell shell = new Shell (display);
 shell.setLayout(new FillLayout());
 final Table table = new Table(shell, SWT.BORDER);
 table.setHeaderVisible(true);
 TableColumn column1 = new TableColumn(table, SWT.NONE);
 column1.setText("column 1");
 TableColumn column2 = new TableColumn(table, SWT.NONE);
 column2.setText("column 2");
 TableColumn column3 = new TableColumn(table, SWT.NONE);
 column3.setText("column 3");
 for (int i = 0; i &lt; 20; i++) {
  TableItem item = new TableItem(table, SWT.NONE);
  item.setText(new String[] {"item "+i, "ssdf", "sdfsd sdf 
sdf"});
 }
 Listener listener = new Listener() {
  public void handleEvent(Event e) {
   System.out.println("Move "+e.widget);
  }
 };
 column1.setWidth(100);
 column1.setMoveable(true);
 column1.addListener(SWT.Move, listener);
 column2.setWidth(300);
 column2.setMoveable(true);
 column2.addListener(SWT.Move, listener);
 column3.setWidth(200);
 column3.setMoveable(true);
 column3.addListener(SWT.Move, listener);
 
 Button b = new Button(shell, SWT.PUSH);
 b.setText("setOrder");
 b.addListener(SWT.Selection, new Listener() {
  public void handleEvent(Event e) {
   table.setColumnOrder(new int[] {2,1,0});
  }
 });
 shell.open ();
 while (!shell.isDisposed ()) {
  if (!display.readAndDispatch ()) display.sleep ();
 }
 display.dispose ();
}</comment>
		<comment id="3" date="2005-04-06 16:00:08 EDT" author="Veronika Irvine">Fixed on Windows.  Look at Mac now.</comment>
		<comment id="4" date="2005-04-06 17:05:04 EDT" author="Veronika Irvine">Fixed on Mac.

Fixed in HEAD for 3.1 M7 on April 6, 2005.</comment>
      </comments>
    </buginformation>
    <fixedCommits>
      <commit Id="d8412f497b9eda314dcd434f6c4eca9fa48d514e" author="Veronika Irvine" date="2005-04-07 04:51:15"/>
          <file name="bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Table.java">
              <method name="setColumnOrder" returnType="void" parameters="int[]"/>
          </file>
      </commit>
    </fixedCommits>
  </bug>
  <bug id="86631" opendate="2005-02-25 09:55:00" fixdate="2005-04-14 16:53:00">
    <buginformation>
      <summary>Javadoc wrong for Image(stream)</summary>
      <description>The example code in the Javadoc indicates the stream doesn't have to be closed but it does. This needs to be fixed here and in other places in SWT where we accept streams. We need to determine the correct pattern of try {} catch () and apply it everywhere in the doc.</description>
      <comments>
		<comment id="1" date="2005-04-12 00:15:05 EDT" author="Steve Northover">CAR to fix it.</comment>
		<comment id="2" date="2005-04-12 18:12:38 EDT" author="Carolyn MacLeod">We could suggest that people create a nice method, something like the 
following: (taken from book &lt;g&gt;)

static Image loadImage (Display display, Class clazz, String string) {
 InputStream stream = clazz.getResourceAsStream (string);
 if (stream == null) return null;
 Image image = null;
 try {
  image = new Image (display, stream);
 } catch (SWTException ex) {
 } finally {
  try {
   stream.close ();
  } catch (IOException ex) {}
 }
 return image;
}



However, I suspect strongly that the reason folks don't bother to close 
InputStreams is because the javadoc on the Sun website says:

"The close method of InputStream does nothing."

http://java.sun.com/j2se/1.4.2/docs/api/java/io/InputStream.html#close()
http://java.sun.com/j2se/1.5.0/docs/api/java/io/InputStream.html#close()

If you browse senders of getResourceAsStream, you will find very few folks 
bother to close the stream.

So should we suggest the little method? Or just leave the javadoc as-is?</comment>
		<comment id="3" date="2005-04-12 18:30:21 EDT" author="Steve Northover">Just fix the example code and close it.  That pattern looks fine.  Also, 
please text search for getResourceAsStream to get all the places.  Thanks CAR!</comment>
		<comment id="4" date="2005-04-14 16:53:29 EDT" author="Carolyn MacLeod">Changed the example in the Image(Device, InputStream) javadoc to be the 
example method in comment 2.

Also changed the javadoc for ImageData(InputStream) to include a similar 
example.

All instances of the 'lazy pattern' have now been fixed.</comment>
      </comments>
    </buginformation>
    <fixedCommits>
      <commit Id="48abe9274e7da06bdfb776d6c7585bcceb09c560" author="Carolyn MacLeod" date="2005-04-14 06:33:15"/>
          <file name="bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/graphics/Image.java">
          </file>
      </commit>
    </fixedCommits>
  </bug>
  <bug id="81242" opendate="2004-12-15 12:07:00" fixdate="2005-04-15 10:32:00">
    <buginformation>
      <summary>[JUnit] GP in Clipboard.getContents</summary>
      <description>PLUGIN_PATH &amp;lt;null&amp;gt; Resolved file name for empty.txt = bluebird/teamswt/torres/linux/motif/eclipse/workspace/org.eclipse.swt.tests/bin/empty.txt An unexpected exception has been detected in native code outside the VM. Unexpected Signal : 11 occurred at PC=0x0 Function=[Unknown.] Library=(N/A) NOTE: We are unable to locate the function name symbol for the error just occurred. Please refer to release documentation for possible reason and solutions. Current Java thread: at org.eclipse.swt.internal.motif.OS._XtGetSelectionValue(Native Method) at org.eclipse.swt.internal.motif.OS.XtGetSelectionValue(OS.java:3688) at org.eclipse.swt.dnd.ClipboardProxy.getAvailableTypes(ClipboardProxy.java:150) at org.eclipse.swt.dnd.ClipboardProxy.getContents(ClipboardProxy.java:118) at org.eclipse.swt.dnd.Clipboard.getContents(Clipboard.java:275) at org.eclipse.swt.dnd.Clipboard.getContents(Clipboard.java:223) at org.eclipse.swt.tests.junit.Test_org_eclipse_swt_custom_StyledText.test_copy(Test_org_eclipse_swt_custom_StyledText.java:555) at org.eclipse.swt.tests.junit.Test_org_eclipse_swt_custom_StyledText.runTest(Test_org_eclipse_swt_custom_StyledText.java:4198) at junit.framework.TestCase.runBare(TestCase.java:127) at junit.framework.TestResult$1.protect(TestResult.java:106) at junit.framework.TestResult.runProtected(TestResult.java:124) at junit.framework.TestResult.run(TestResult.java:109) at junit.framework.TestCase.run(TestCase.java:118) at junit.framework.TestSuite.runTest(TestSuite.java:208) at junit.framework.TestSuite.run(TestSuite.java:203) at junit.framework.TestSuite.runTest(TestSuite.java:208) at junit.framework.TestSuite.run(TestSuite.java:203) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:468) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:343) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:195) Dynamic libraries: 08048000-08056000 r-xp 00000000 00:0a 538294580 /bluebird/teamswt/torres/linux/vm/jdk1.4.2_06/bin/java 08056000-08059000 rw-p 0000d000 00:0a 538294580 /bluebird/teamswt/torres/linux/vm/jdk1.4.2_06/bin/java 40000000-40014000 r-xp 00000000 03:03 505027 /lib/ld-2.3.2.so 40014000-40015000 rw-p 00014000 03:03 505027 /lib/ld-2.3.2.so 40015000-4001d000 r-xp 00000000 00:0a 337128161 /bluebird/teamswt/torres/linux/vm/jdk1.4.2_06/jre/lib/i386/native_threads/libhpi.so 4001d000-4001e000 rw-p 00007000 00:0a 337128161 /bluebird/teamswt/torres/linux/vm/jdk1.4.2_06/jre/lib/i386/native_threads/libhpi.so 4001e000-40022000 rw-s 00000000 03:03 1988430 /tmp/hsperfdata_torres/20700 40022000-40030000 r--s 00000000 00:0a 386697846 /bluebird/teamswt/torres/linux/vm/jdk1.4.2_06/jre/lib/ext/ldapsec.jar 40030000-40031000 r--s 00000000 00:0a 539462609 /bluebird/teamswt/torres/linux/motif/eclipse/plugins/org.eclipse.swt.motif_3.1.0/ws/motif/swt-gtk.jar 40032000-4003f000 r-xp 00000000 03:03 505047 /lib/libpthread.so.0 4003f000-40040000 rw-p 0000d000 03:03 505047 /lib/libpthread.so.0 40083000-40085000 r-xp 00000000 03:03 505036 /lib/libdl.so.2 40085000-40086000 rw-p 00001000 03:03 505036 /lib/libdl.so.2 40086000-401b5000 r-xp 00000000 03:03 505033 /lib/libc.so.6 401b5000-401b9000 rw-p 0012f000 03:03 505033 /lib/libc.so.6 401bc000-405b8000 r-xp 00000000 00:0a 369997783 /bluebird/teamswt/torres/linux/vm/jdk1.4.2_06/jre/lib/i386/client/libjvm.so 405b8000-405d4000 rw-p 003fb000 00:0a 369997783 /bluebird/teamswt/torres/linux/vm/jdk1.4.2_06/jre/lib/i386/client/libjvm.so 405e6000-405f8000 r-xp 00000000 03:03 505039 /lib/libnsl.so.1 405f8000-405f9000 rw-p 00011000 03:03 505039 /lib/libnsl.so.1 405fb000-4061c000 r-xp 00000000 03:03 505037 /lib/libm.so.6 4061c000-4061d000 rw-p 00020000 03:03 505037 /lib/libm.so.6 4061d000-4062d000 r-xp 00000000 00:0a 318930479 /bluebird/teamswt/torres/linux/vm/jdk1.4.2_06/jre/lib/i386/libverify.so 4062d000-4062f000 rw-p 0000f000 00:0a 318930479 /bluebird/teamswt/torres/linux/vm/jdk1.4.2_06/jre/lib/i386/libverify.so 4062f000-4064f000 r-xp 00000000 00:0a 318930480 /bluebird/teamswt/torres/linux/vm/jdk1.4.2_06/jre/lib/i386/libjava.so 4064f000-40651000 rw-p 0001f000 00:0a 318930480 /bluebird/teamswt/torres/linux/vm/jdk1.4.2_06/jre/lib/i386/libjava.so 40651000-40665000 r-xp 00000000 00:0a 318930482 /bluebird/teamswt/torres/linux/vm/jdk1.4.2_06/jre/lib/i386/libzip.so 40665000-40668000 rw-p 00013000 00:0a 318930482 /bluebird/teamswt/torres/linux/vm/jdk1.4.2_06/jre/lib/i386/libzip.so 40668000-413c9000 r--s 00000000 00:0a 285807727 /bluebird/teamswt/torres/linux/vm/jdk1.4.2_06/jre/lib/rt.jar 41416000-4142d000 r--s 00000000 00:0a 285807737 /bluebird/teamswt/torres/linux/vm/jdk1.4.2_06/jre/lib/sunrsasign.jar 4142d000-4149e000 r--s 00000000 00:0a 285800486 /bluebird/teamswt/torres/linux/vm/jdk1.4.2_06/jre/lib/jsse.jar 4149e000-414b0000 r--s 00000000 00:0a 285807731 /bluebird/teamswt/torres/linux/vm/jdk1.4.2_06/jre/lib/jce.jar 414b0000-41791000 r--s 00000000 00:0a 285807720 /bluebird/teamswt/torres/linux/vm/jdk1.4.2_06/jre/lib/charsets.jar 43839000-4383c000 r--s 00000000 00:0a 386722929 /bluebird/teamswt/torres/linux/vm/jdk1.4.2_06/jre/lib/ext/dnsns.jar 4383c000-4383e000 r-xp 00000000 03:03 684353 /usr/X11R6/lib/X11/locale/lib/common/xlcDef.so.2 4383e000-4383f000 rw-p 00001000 03:03 684353 /usr/X11R6/lib/X11/locale/lib/common/xlcDef.so.2 4b8c0000-4bac0000 r--p 00000000 03:03 2117686 /usr/lib/locale/locale-archive 4bac0000-4bb28000 r--s 00000000 00:0a 386697841 /bluebird/teamswt/torres/linux/vm/jdk1.4.2_06/jre/lib/ext/localedata.jar 4bb28000-4bb44000 r--s 00000000 00:0a 386725087 /bluebird/teamswt/torres/linux/vm/jdk1.4.2_06/jre/lib/ext/sunjce_provider.jar 4bb44000-4bb90000 r--s 00000000 00:0a 269221741 /bluebird/teamswt/torres/linux/motif/eclipse/plugins/org.eclipse.jdt.junit_3.1.0/junitsupport.jar 4bb90000-4bb95000 r--s 00000000 00:0a 253875361 /bluebird/teamswt/torres/linux/motif/eclipse/plugins/org.eclipse.jdt.junit.runtime_3.1.0/junitruntime.jar 4bb95000-4bbb3000 r--s 00000000 00:0a 386176619 /bluebird/teamswt/torres/linux/motif/eclipse/plugins/org.junit_3.8.1/junit.jar 4bbb3000-4bbc3000 r-xp 00000000 00:0a 319238016 /bluebird/teamswt/torres/linux/vm/jdk1.4.2_06/jre/lib/i386/libnet.so 4bbc3000-4bbc4000 rw-p 0000f000 00:0a 319238016 /bluebird/teamswt/torres/linux/vm/jdk1.4.2_06/jre/lib/i386/libnet.so 4bbc4000-4bcc6000 r--s 00000000 00:0a 539462612 /bluebird/teamswt/torres/linux/motif/eclipse/plugins/org.eclipse.swt.motif_3.1.0/ws/motif/swt.jar 4bcc6000-4bcd3000 r--s 00000000 00:0a 539462610 /bluebird/teamswt/torres/linux/motif/eclipse/plugins/org.eclipse.swt.motif_3.1.0/ws/motif/swt-mozilla.jar 4bcd3000-4bce5000 r--s 00000000 00:0a 539462611 /bluebird/teamswt/torres/linux/motif/eclipse/plugins/org.eclipse.swt.motif_3.1.0/ws/motif/swt-pi.jar 4bce5000-4bd2c000 r-xp 00000000 00:0a 589158311 /bluebird/teamswt/torres/linux/motif/eclipse/plugins/org.eclipse.swt.motif_3.1.0/os/linux/x86/libswt-motif-3116.so 4bd2c000-4bd2f000 rw-p 00046000 00:0a 589158311 /bluebird/teamswt/torres/linux/motif/eclipse/plugins/org.eclipse.swt.motif_3.1.0/os/linux/x86/libswt-motif-3116.so 4bd30000-4beb4000 r-xp 00000000 00:0a 138076468 /bluebird/teamswt/torres/linux/motif/eclipse/libXm.so.2.1 4beb4000-4bec7000 rw-p 00183000 00:0a 138076468 /bluebird/teamswt/torres/linux/motif/eclipse/libXm.so.2.1 4bec8000-4bece000 r--s 00000000 03:03 602997 /usr/lib/gconv/gconv-modules.cache 4bece000-4bed0000 r-xp 00000000 03:03 602948 /usr/lib/gconv/ISO8859-1.so 4bed0000-4bed1000 rw-p 00001000 03:03 602948 /usr/lib/gconv/ISO8859-1.so 4bed1000-4beda000 r-xp 00000000 03:03 684357 /usr/X11R6/lib/X11/locale/lib/common/xomGeneric.so.2 4beda000-4bedb000 rw-p 00008000 03:03 684357 /usr/X11R6/lib/X11/locale/lib/common/xomGeneric.so.2 4bee5000-4bfaf000 r-xp 00000000 03:03 2150128 /usr/X11R6/lib/libX11.so.6.2 4bfaf000-4bfb3000 rw-p 000c9000 03:03 2150128 /usr/X11R6/lib/libX11.so.6.2 4bfb3000-4bfc1000 r-xp 00000000 03:03 2150138 /usr/X11R6/lib/libXext.so.6.4 4bfc1000-4bfc2000 rw-p 0000d000 03:03 2150138 /usr/X11R6/lib/libXext.so.6.4 4bfc2000-4c012000 r-xp 00000000 03:03 2150160 /usr/X11R6/lib/libXt.so.6.0 4c012000-4c015000 rw-p 00050000 03:03 2150160 /usr/X11R6/lib/libXt.so.6.0 4c016000-4c01d000 r-xp 00000000 03:03 2150152 /usr/X11R6/lib/libXp.so.6.2 4c01d000-4c01e000 rw-p 00006000 03:03 2150152 /usr/X11R6/lib/libXp.so.6.2 4c01e000-4c023000 r-xp 00000000 03:03 2150162 /usr/X11R6/lib/libXtst.so.6.1 4c023000-4c024000 rw-p 00004000 03:03 2150162 /usr/X11R6/lib/libXtst.so.6.1 4c024000-4c02c000 r-xp 00000000 03:03 2150126 /usr/X11R6/lib/libSM.so.6.0 4c02c000-4c02d000 rw-p 00007000 03:03 2150126 /usr/X11R6/lib/libSM.so.6.0 4c02d000-4c041000 r-xp 00000000 03:03 2150124 /usr/X11R6/lib/libICE.so.6.3 4c041000-4c043000 rw-p 00013000 03:03 2150124 /usr/X11R6/lib/libICE.so.6.3 4c044000-4c04c000 r-xp 00000000 03:03 2150136 /usr/X11R6/lib/libXcursor.so.1.0 4c04c000-4c04d000 rw-p 00007000 03:03 2150136 /usr/X11R6/lib/libXcursor.so.1.0 4c04d000-4c054000 r-xp 00000000 03:03 2150158 /usr/X11R6/lib/libXrender.so.1.2 4c054000-4c055000 rw-p 00006000 03:03 2150158 /usr/X11R6/lib/libXrender.so.1.2 4c055000-4c072000 r-xp 00000000 03:03 684352 /usr/X11R6/lib/X11/locale/lib/common/ximcp.so.2 4c072000-4c074000 rw-p 0001c000 03:03 684352 /usr/X11R6/lib/X11/locale/lib/common/ximcp.so.2 Heap at VM Abort: Heap def new generation total 2240K, used 108K [0x43840000, 0x43aa0000, 0x43d20000) eden space 2048K, 2% used [0x43840000, 0x4384b998, 0x43a40000) from space 192K, 32% used [0x43a70000, 0x43a7f870, 0x43aa0000) to space 192K, 0% used [0x43a40000, 0x43a40000, 0x43a70000) tenured generation total 28844K, used 28004K [0x43d20000, 0x4594b000, 0x47840000) the space 28844K, 97% used [0x43d20000, 0x458793e0, 0x45879400, 0x4594b000) compacting perm gen total 5120K, used 5054K [0x47840000, 0x47d40000, 0x4b840000) the space 5120K, 98% used [0x47840000, 0x47d2f920, 0x47d2fa00, 0x47d40000) Local Time = Wed Dec 15 11:11:45 2004 Elapsed Time = 107 # # The exception above was detected in native code outside the VM # # Java VM: Java HotSpot(TM) Client VM (1.4.2_06-b02 mixed mode) # # An error report file has been saved as hs_err_pid20700.log. # Please refer to the file for further information. #</description>
      <comments>
		<comment id="1" date="2004-12-16 15:24:54 EST" author="Veronika Irvine">GP is due to the fact that we have run out of Callback objects.  The Callback
constructor can return with an address of 0, so we must check in all places and
throw the "No more callbacks" exceptions.

Also, JUnit tests on motif must be checked to find out why we are running out of
callbacks.</comment>
		<comment id="2" date="2004-12-16 15:55:11 EST" author="Veronika Irvine">Fixed DragSource, DropTarget and Clipboard on motif.

However, need to check Mac, Windows and GTK.

Also, there are callbacks in Browser, FileDialog, Directory Dialog and
MessageBox that I have not fixed.</comment>
		<comment id="3" date="2005-04-15 09:02:19 EDT" author="Veronika Irvine">Currently, all Callback creations check for address == 0.</comment>
		<comment id="4" date="2005-04-15 09:45:43 EDT" author="Douglas Pollock">I believe the fix for this bug causes:

java.lang.NoSuchMethodError: atkAction_get_keybinding
 at org.eclipse.swt.internal.Callback.bind(Native Method)
 at org.eclipse.swt.internal.Callback.&lt;init&gt;(Callback.java:123)
 at org.eclipse.swt.internal.Callback.&lt;init&gt;(Callback.java:78)
 at org.eclipse.swt.internal.Callback.&lt;init&gt;(Callback.java:60)
 at
org.eclipse.swt.accessibility.AccessibleFactory.newCallback(AccessibleFactory.java:155)
 at
org.eclipse.swt.accessibility.AccessibleFactory.&lt;clinit&gt;(AccessibleFactory.java:92)
 at org.eclipse.swt.accessibility.Accessible.&lt;init&gt;(Accessible.java:50)
 at
org.eclipse.swt.accessibility.Accessible.internal_new_Accessible(Accessible.java:193)
 at org.eclipse.swt.widgets.Control.getAccessible(Control.java:431)
 at org.eclipse.jface.action.ToolBarManager.createControl(ToolBarManager.java:103)
 at
org.eclipse.jface.action.ToolBarContributionItem.fill(ToolBarContributionItem.java:190)
 at org.eclipse.jface.action.CoolBarManager.update(CoolBarManager.java:907)
 at org.eclipse.jface.action.CoolBarManager.createControl(CoolBarManager.java:244)
 at
org.eclipse.jface.window.ApplicationWindow.createCoolBarControl(ApplicationWindow.java:446)
 at
org.eclipse.ui.internal.WorkbenchWindow.createDefaultContents(WorkbenchWindow.java:959)
 at
org.eclipse.ui.internal.WorkbenchWindowConfigurer.createDefaultContents(WorkbenchWindowConfigurer.java:575)
 at
org.eclipse.ui.application.WorkbenchWindowAdvisor.createWindowContents(WorkbenchWindowAdvisor.java:261)
 at org.eclipse.ui.internal.WorkbenchWindow.createContents(WorkbenchWindow.java:910)
 at org.eclipse.jface.window.Window.create(Window.java:418)
 at org.eclipse.ui.internal.Workbench.busyOpenWorkbenchWindow(Workbench.java:595)
 at org.eclipse.ui.internal.Workbench.openFirstTimeWindow(Workbench.java:1149)
 at
org.eclipse.ui.internal.WorkbenchConfigurer.openFirstTimeWindow(WorkbenchConfigurer.java:180)
 at
org.eclipse.ui.application.WorkbenchAdvisor.openWindows(WorkbenchAdvisor.java:718)
 at org.eclipse.ui.internal.Workbench.init(Workbench.java:962)
 at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:1510)
 at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:306)
 at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:143)
 at org.eclipse.ui.internal.ide.IDEApplication.run(IDEApplication.java:103)
 at
org.eclipse.core.internal.runtime.PlatformActivator$1.run(PlatformActivator.java:228)
 at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:344)
 at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:156)
 at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
 at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
 at
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
 at java.lang.reflect.Method.invoke(Method.java:582)
 at org.eclipse.core.launcher.Main.invokeFramework(Main.java:316)
 at org.eclipse.core.launcher.Main.basicRun(Main.java:269)
 at org.eclipse.core.launcher.Main.run(Main.java:948)
 at org.eclipse.core.launcher.Main.main(Main.java:932)</comment>
		<comment id="5" date="2005-04-15 10:32:00 EDT" author="Veronika Irvine">Oops.  Fixed.</comment>
      </comments>
    </buginformation>
    <fixedCommits>
      <commit Id="a48611ba3c6c064a09741b2ed2b65951d180940a" author="Veronika Irvine" date="2004-12-17 05:48:34"/>
          <file name="bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/motif/org/eclipse/swt/dnd/ClipboardProxy.java">
              <method name="ClipboardProxy" returnType="null" parameters="Display"/>
          </file>
          <file name="bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/motif/org/eclipse/swt/dnd/DragSource.java">
          </file>
          <file name="bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/motif/org/eclipse/swt/dnd/DropTarget.java">
          </file>
      </commit>
    </fixedCommits>
  </bug>
  <bug id="92017" opendate="2005-04-19 20:33:00" fixdate="2005-04-20 17:30:00">
    <buginformation>
      <summary>Support very large Image on Windows platform</summary>
      <description>Currently an Image on Windows is size-limited - on my system to 16MB. However, a posting in eclipse.platform.swt in response to &amp;quot;Larger image problems&amp;quot; suggested that there is a way to get OS.CreateCompatibleBitmap to transparently return a DIB that is stored in main memory and can be any size. If there is a way to easily support this, it'd be really helpful.</description>
      <comments>
		<comment id="1" date="2005-04-20 14:50:25 EDT" author="Christophe Cornu">CreateCompatibleBitmap apparently still fails when a DIB is selected in the 
HDC, for a size 3000x4000 on my machine here (Windows XP).

Image.java

void init(Device device, int width, int height) {
 if (width &lt;= 0 || height &lt;= 0) {
  SWT.error (SWT.ERROR_INVALID_ARGUMENT);
 }
 this.device = device;
 type = SWT.BITMAP;
 int hDC = device.internal_new_GC(null);
 
 // use DibSection
 BITMAPINFOHEADER bmiHeader = new BITMAPINFOHEADER ();
 bmiHeader.biSize = BITMAPINFOHEADER.sizeof;
 bmiHeader.biWidth = width;
 bmiHeader.biHeight = height;
 bmiHeader.biPlanes = 1;
 bmiHeader.biBitCount = 32;
 bmiHeader.biCompression = OS.BI_RGB;
 byte [] bmi = new byte[BITMAPINFOHEADER.sizeof];
 OS.MoveMemory (bmi, bmiHeader, BITMAPINFOHEADER.sizeof);
 int [] pBits = new int [1];
 int memDib = OS.CreateDIBSection (0, bmi, OS.DIB_RGB_COLORS, pBits, 0, 
0);
 if (memDib == 0) SWT.error (SWT.ERROR_NO_HANDLES);
 int oldMemBitmap = OS.SelectObject (hDC, memDib);
 
 // still fail for 3000x4000 on my machine even though a dibsection is 
selected
 handle = OS.CreateCompatibleBitmap(hDC, width, height);
 if (handle != 0) {
  int memDC = OS.CreateCompatibleDC(hDC);
  int hOldBitmap = OS.SelectObject(memDC, handle);
  OS.PatBlt(memDC, 0, 0, width, height, OS.PATCOPY);
  OS.SelectObject(memDC, hOldBitmap);
  OS.DeleteDC(memDC);
 }
 device.internal_dispose_GC(hDC, null);
 if (handle == 0) {
  SWT.error(SWT.ERROR_NO_HANDLES, null, device.getLastError());
 }
}

Snippet:
import org.eclipse.swt.*;
import org.eclipse.swt.widgets.*;
import org.eclipse.swt.graphics.*;
import org.eclipse.swt.events.*;
import org.eclipse.swt.layout.*;

public class PR90217 {

 public static void main(String[] args) {
  Display display = new Display();

  Image image = new Image(display, 3000, 4000);
  //Image image = new Image(display, 2000, 2000);
  Shell shell = new Shell(display);
  shell.setText("Test");
  shell.open();
  
  while (!shell.isDisposed()) {
   if (!display.readAndDispatch())
    display.sleep();
  }  
 }
}</comment>
		<comment id="2" date="2005-04-20 17:06:58 EDT" author="Ian Graham">I can confirm that that code made no difference to the size limit on my Windows 
2000 system either.  I'm not sure whether or how the 32MB video card might 
constrain DIB size.

However, I see the comment at the link below, which seems to indicate others are 
successfully creating as large as 10000x8000x24

  http://www.tech-archive.net/Archive/Development/microsoft.public.win32.
programmer.gdi/2004-05/0149.html</comment>
		<comment id="3" date="2005-04-20 17:11:25 EDT" author="Christophe Cornu">fixed with Silenio v&gt;20050420

Using a DIBSection when DDB fails allows larger images to be supported.

Note that since the internal dib buffer needs to address contiguous memory, 
extremely large images &gt;= 1Gb will still fail. With the fix, images 
10000x10000x32 were working on machines here.</comment>
		<comment id="4" date="2005-04-20 17:30:05 EDT" author="Ian Graham">You guys are awesome!</comment>
      </comments>
    </buginformation>
    <fixedCommits>
      <commit Id="978a5068b13063ede30b740ed3c44a97b7570e39" author="Christophe Cornu" date="2005-04-21 06:07:58"/>
          <file name="bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/graphics/GC.java">
              <method name="copyArea" returnType="void" parameters="int int int int int int boolean"/>
          </file>
          <file name="bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/graphics/Image.java">
              <method name="init" returnType="void" parameters="Device int int"/>
          </file>
      </commit>
    </fixedCommits>
  </bug>
  <bug id="88717" opendate="2005-03-22 04:34:00" fixdate="2005-04-23 18:19:00">
    <buginformation>
      <summary>[DND] Tree is scrolling very slow when dragging an Item to the Bottom</summary>
      <description>Create a Tree with some items and implement DND support as explained in this Snippet: &lt;a href="http://dev.eclipse.org/viewcvs/index.cgi/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet91.java?rev=HEAD&amp;amp;content-type=text/vnd.viewcvs-markup"&gt;http://dev.eclipse.org/viewcvs/index.cgi/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet91.java?rev=HEAD&amp;amp;content-type=text/vnd.viewcvs-markup&lt;/a&gt; Now expand some items so that vertical scrollbars are appearing. When draggin an item to the bottom, the Tree is not scrolling. It is currently not possible to Drag an Item to a position that is out of view. I would have thought that DND.FEEDBACK_SCROLL enables automatic scrolling, in case the user drags an Item to the bottom but it does'nt. To see how its working, open Bookmark Manager in Firefox, expand items until the Scrollbars are showing and drag a Bookmark to the Bottom. The Tree is scrolling. Ben</description>
      <comments>
		<comment id="1" date="2005-03-22 04:37:35 EST" author="Benjamin Pasero">Just noticed that the Tree is scrolling, but not with a reasonable speed. In
Firefox the Tree scrolls as if the Scrollbars where used. In SWT only the next
Item is selected and brought into View.

Ben</comment>
		<comment id="2" date="2005-03-29 08:45:30 EST" author="Veronika Irvine">Try dragging a folder in the Windows File Explorer.  I think it behaves in the 
same way that SWT behaves.  The next item is scrolled into view - it is not 
the same as using the scrollbars.  What I can do is decrease the amount of 
time we wait before scrolling.  Ideally, I would like to get this value from 
the operating system because some users do not want their system to react too 
fast.  Right now it is hardcoded at 500 ms between items. See 
TreeDragUnderEffect.</comment>
		<comment id="3" date="2005-03-29 10:55:52 EST" author="Benjamin Pasero">I compared Eclipse with Windows Explorer.

Eclipse:
I am dragging a class from one package to another one that is not visible. When
dragging to the end of the Tree, 50% of the next TreeItem becomes selected and
then after a short amount of time, the selection moves forward, thereby
scrolling the Tree. I think the "short amount of time" is too long, if possible
maybe reduce that value (if that is those 500ms?).

Windows:
I am dragging a folder from one to another one, not visible. First difference is
that Windows is not selecting the next Folder on bottom, it just scrolls with a
greater speed than Eclipse. 

Maybe this difference is just because of the "slow" 500ms and the selection that
occurs in SWT, but not in Windows. Basically the selection is not that bad, but
the scrolling speed is kind of slow.

Ben</comment>
		<comment id="4" date="2005-03-29 10:57:21 EST" author="Benjamin Pasero">Another thought: Maybe leave the initial delay hardcoded to 500ms, but as soon
as the scrolling has began, decrease the delay, since it is now obvious that the
user wants to scroll.

Ben</comment>
		<comment id="5" date="2005-04-20 16:17:57 EDT" author="Veronika Irvine">I have changed the delay between scrolls to 150 milliseconds.  I will continue 
to investigate getting the delay time from the OS and/or using an accelerated 
scroll time only after scrolling has started.  However, closing this bug for 
now.  Please reopen if 150 ms is still too slow.</comment>
		<comment id="6" date="2005-04-23 18:19:53 EDT" author="Benjamin Pasero">Looks pretty good now, thanks!

Ben</comment>
      </comments>
    </buginformation>
    <fixedCommits>
      <commit Id="f38c6e259682997e3ae8e6c34beda9c0c421c9d4" author="Veronika Irvine" date="2005-04-21 05:15:46"/>
          <file name="bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/gtk/org/eclipse/swt/dnd/TableDragUnderEffect.java">
          </file>
          <file name="bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/gtk/org/eclipse/swt/dnd/TreeDragUnderEffect.java">
          </file>
          <file name="bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/motif/org/eclipse/swt/dnd/TableDragUnderEffect.java">
          </file>
          <file name="bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/motif/org/eclipse/swt/dnd/TreeDragUnderEffect.java">
          </file>
          <file name="bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/win32/org/eclipse/swt/dnd/TableDragUnderEffect.java">
          </file>
          <file name="bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/win32/org/eclipse/swt/dnd/TreeDragUnderEffect.java">
          </file>
      </commit>
    </fixedCommits>
  </bug>
  <bug id="92612" opendate="2005-04-25 13:47:00" fixdate="2005-05-03 13:03:00">
    <buginformation>
      <summary>CTabFolder hidden tabs count (in chevron) can become 0</summary>
      <description>0420 integration build (showed VI already) - drag several eclipse views into one view slot (eg.- on top of the Navigator) -&amp;gt; assuming that there isn't room to show all of the tabs, there will be a chevron shown with a number representing the number of hidden tabs - slowly make the top view more narrow, and as this makes the CTabFolder more narrow, the number of tabs that it can fit will shrink, and therefore the number below the chevron will grow - but you'll reach a point where this number becomes 0, when it should probably be equal to the number of tabs in the tabfolder</description>
      <comments>
		<comment id="1" date="2005-05-03 13:03:57 EDT" author="Veronika Irvine">Fixed.  Needed to account for zero width items now that we stop calculating 
widths for each tab.</comment>
      </comments>
    </buginformation>
    <fixedCommits>
      <commit Id="7d6d503ad1ede8b8859441bf5f1e15bb61e72635" author="Veronika Irvine" date="2005-05-04 01:58:25"/>
          <file name="bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/CTabFolder.java">
              <method name="setItemLocation" returnType="boolean" parameters=""/>
          </file>
      </commit>
    </fixedCommits>
  </bug>
  <bug id="92181" opendate="2005-04-21 01:33:00" fixdate="2005-05-03 13:06:00">
    <buginformation>
      <summary>Bogus CTabFolder tab sizes</summary>
      <description>Running the code in head, 20050421 In the default Java perspective, drag the problems view to the right of the JavaDoc view. The resulting CTabFolder tab sizes are wrong.</description>
      <comments>
		<comment id="1" date="2005-04-21 01:34:44 EDT" author="Stefan Xenos">Created attachment 20170 [details]
screenshot of the incorrect tab sizes</comment>
		<comment id="2" date="2005-04-21 09:06:33 EDT" author="Billy Biggs">Yeah, but I bet they were fast! :)    (bug 91672)</comment>
		<comment id="3" date="2005-05-03 13:06:00 EDT" author="Veronika Irvine">Fixed April 21 and forgot to close.</comment>
      </comments>
    </buginformation>
    <fixedCommits>
      <commit Id="c5bbcb381ff9f0e3f7cb89808cd76c806bee353b" author="Veronika Irvine" date="2005-04-22 02:23:01"/>
          <file name="bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/CTabFolder.java">
              <method name="setSelection" returnType="void" parameters="int"/>
          </file>
      </commit>
    </fixedCommits>
  </bug>
  <bug id="91159" opendate="2005-04-12 12:28:00" fixdate="2005-05-04 10:54:00">
    <buginformation>
      <summary>[Consistency] DropTarget event.dataType field not alwys set on DragEnter</summary>
      <description>On Windows in DragEnter the event.dataType field is set to the first value in the event.dataTypes array. On Carbon, GTK and Motif, the event.dataType field is null.</description>
      <comments>
		<comment id="1" date="2005-05-04 10:54:17 EDT" author="Veronika Irvine">I was wrong.  The event.dataType is always being set.  I found one case on 
Motif where the operation was not correctly set if no modifier keys were 
selecetd and the DEFAULT flag was not set - fixed for 3.1 M7.  Apart from 
that, all looks good.</comment>
      </comments>
    </buginformation>
    <fixedCommits>
      <commit Id="880f7c18bcbb2dab95d17fcb60690d8f3e671fa8" author="Veronika Irvine" date="2005-05-04 03:57:46"/>
          <file name="bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/motif/org/eclipse/swt/dnd/DropTarget.java">
              <method name="dragProcCallback" returnType="void" parameters="int int int"/>
          </file>
      </commit>
    </fixedCommits>
  </bug>
  <bug id="79268" opendate="2004-11-23 06:56:00" fixdate="2005-05-10 17:51:00">
    <buginformation>
      <summary>Program API does not work with GNOME 2.8 (libgnomevfs-WARNING)</summary>
      <description>I200411170800-gtk Not sure what triggers it, neither who is doing it. I get the following stderr output once in a while: (&amp;lt;unknown&amp;gt;:27693): libgnomevfs-WARNING **: Deprecated function. User modifications to the MIME database are no longer supported. In my development workbench, the output reads: (Gecko:11501): libgnomevfs-WARNING **: Deprecated function. User modifications to the MIME database are no longer supported. So I suspect the mozilla/gecko library is doing this, hence I punted it to SWT. Probably nothing we can do much about, but here's the bug anyway.</description>
      <comments>
		<comment id="1" date="2004-11-24 15:09:57 EST" author="Christophe Cornu">Tom: which Linux distribution are you using?</comment>
		<comment id="2" date="2004-11-25 03:39:49 EST" author="Tom Hofmann">fedora core 3 - and now you mention it: the warnings have just started to show
up after upgrading from core 2.

$ rpm -q libgnome gnome-vfs gnome-vfs2
libgnome-2.8.0-2
gnome-vfs-1.0.5-21
gnome-vfs2-2.8.2-8</comment>
		<comment id="3" date="2004-12-01 18:23:28 EST" author="Billy Biggs">GNOME has recently been revamping their MIME system.  There is likely some
change which is affecting how we use it.</comment>
		<comment id="4" date="2004-12-02 04:45:06 EST" author="Tom Hofmann">This results in not finding any platform mime handlers, including the system
browser, any more.

Program.findProgram(..., "html") won't find anything due to seeing an empty mime
database.</comment>
		<comment id="5" date="2005-01-24 23:14:03 EST" author="Billy Biggs">*** Bug 72110 has been marked as a duplicate of this bug. ***</comment>
		<comment id="6" date="2005-01-24 23:17:15 EST" author="Billy Biggs">*** Bug 83585 has been marked as a duplicate of this bug. ***</comment>
		<comment id="7" date="2005-01-24 23:33:41 EST" author="Billy Biggs">I recently discussed the state of the Program API implementation on GNOME with
Marco Pesenti Gritti, one of the libgnomevfs maintainers.  Here are some of my
thoughts:

 1. The warnings are not accurate.  We are not trying to modify the database.
    This seems to be a bug in libgnomevfs.
 2. The major change in gnomevfs is that they now use the xdgmime system as
    a back-end.
 3. This system makes it difficult to support the old libgnomevfs
    API which we use.  Therefore, most, if not all, of the GNOME code in
    Program.java will need to be rewritten.
 4. Much of the API we will need to use has only been around since GNOME 2.4.
 5. Some of the Program API may be unimplementable with the new API without
    changes upstream, specifically listing all known programs and listing all
    known file extensions.</comment>
		<comment id="8" date="2005-01-25 04:05:15 EST" author="Tom Hofmann">Billy, I guess I am just re-stating the obvious, but... while our supported
systems do not include FC3 or (AFAIK) any other system using 2.8, it is a
"major" issue that eclipse does not support launching external apps on any of these.

Do you think that this will make it on the 3.1 plan, given the facts you
outlined in comment 7?</comment>
		<comment id="9" date="2005-03-15 09:57:49 EST" author="Billy Biggs">*** Bug 88042 has been marked as a duplicate of this bug. ***</comment>
		<comment id="10" date="2005-03-31 15:40:17 EST" author="Nick Boldt">For what it's worth, I get this too using a Debian variant (SimplyMEPIS).

(&lt;unknown&gt;:30919): libgnomevfs-WARNING **: Deprecated function.  User
modifications to the MIME database are no longer supported.

KDE 3.3.2, Linux kernel 2.6.7

installed deb packages:
libgnomevfs2-0, version 2.8.3-11
libgnomevfs2-common, version 2.8.3-11
libgnome2-0, version 2.8.1-2
libgnome2-common, version 2.8.1-2</comment>
		<comment id="11" date="2005-04-28 23:45:07 EDT" author="Billy Biggs">Created attachment 20490 [details]
Patch

On platform-swt-dev, Ty C was interested in helping with this bug.  Here are my
current hacks that I hope to get in soon:

- I use gnome_url_open() to implement Program.launch().  This API has existed
since GNOME 2.2, and it's much simpler than the original code. This makes
"Open With &gt; System Editor" work properly in Eclipse.
- I use gnome_vfs_mime_type_from_name() to implement findProgram(), which
avoids actually querying the MIME database.  This API has existed since at
least GNOME 1.4, and so it is also safe.  This allows for getting icons and
program names.

Program.execute() can be implemented on newer GNOME versions using
gnome_vfs_mime_application_launch(), but this API is new in GNOME 2.4, and
currently gnome-vfs provides no clean way to do runtime version checks like
GTK+ does.  This makes it a little more complicated, so I haven't done that
yet.  Once Program.execute() works, only getPrograms() and getExtensions() will
be left unfinished, and I believe they may not be possible to implement with
the new gnome-vfs API.</comment>
		<comment id="12" date="2005-04-29 17:34:01 EDT" author="Billy Biggs">I did not have much success with gnome_url_open() on RHEL3 or RH9, so I guess
this code will need version checks as well.</comment>
		<comment id="13" date="2005-05-02 20:23:23 EDT" author="Ty C">Created attachment 20615 [details]
Adds static icon retrieval methods to Mac OS X Carbon variant

The patch primarily enhances Program.java. A caller may use the 2 new static
methods to retrieve an icon either by file name extension or by requesting the
system folder icon.</comment>
		<comment id="14" date="2005-05-02 20:28:17 EDT" author="Ty C">Created attachment 20616 [details]
Adds static icon retrieval methods to Linux GTK variant

The patch primarily enhances Program.java. A caller may use the 2 new static
methods to retrieve an icon either by file name extension or by requesting the
system folder icon.

The patch uses the same method to get the MIME type as the first patch attached
to this bug, but uses GTK functions instead of GNOME ones which are deprecated.</comment>
		<comment id="15" date="2005-05-02 20:29:20 EDT" author="Billy Biggs">Ty, can you open a new bug with your patch?  I'd rather keep this one just about
the GTK+ implementation.  Thanks.</comment>
		<comment id="16" date="2005-05-02 20:49:55 EDT" author="Billy Biggs">First about the GTK+ patch, thanks a lot for posting your code!  There are
really two parts to it: one is the update to use the new GNOME 2.8 API, and the
other part is the addition of the new API.  Please file a new bug about the API
additions.  In this bug I'm addressing the deprecated API use and what to do
about it.

The real difference between your solution from my patches is the use of
GtkIconTheme versus GnomeIconTheme.  I think I'm going to stick with using the
GnomeIconTheme code because it still works on newer systems, and is backwards
compatible to GNOME 2.2.  One change I did make (see bug 92505) was to only
create a GNOME icon theme once, rather than each time we do a lookup.  This is
much more efficient, especially on newer GNOME systems.  Having a separate
helper to lookup the MIME type per extension is a good idea as well.</comment>
		<comment id="17" date="2005-05-03 15:22:10 EDT" author="Billy Biggs">Fixed &gt; 20050503

The only parts of the Program API which are not implemented on GNOME 2.4 and
higher are getPrograms() and getExtensions(), both of which cannot be
implemented with the new libgnome-vfs API.  There will be no more warnings
printed to the console while running Eclipse.</comment>
		<comment id="18" date="2005-05-03 15:23:23 EDT" author="Billy Biggs">*** Bug 78910 has been marked as a duplicate of this bug. ***</comment>
		<comment id="19" date="2005-05-03 19:48:54 EDT" author="Ty C">We created a new bug entry as per comment #15. Please refer to bug #93606.</comment>
		<comment id="20" date="2005-05-10 17:51:25 EDT" author="Billy Biggs">Verified that we work on GNOME 2.8 using I20050510-0010</comment>
      </comments>
    </buginformation>
    <fixedCommits>
      <commit Id="b870c180c5264e4710b448096258dee6e2d5f6ea" author="Billy Biggs" date="2005-05-03 04:32:08"/>
          <file name="bundles/org.eclipse.swt/Eclipse SWT Program/gnome/org/eclipse/swt/internal/gnome/GNOME.java">
          </file>
      </commit>
    </fixedCommits>
  </bug>
  <bug id="94467" opendate="2005-05-10 14:35:00" fixdate="2005-05-13 08:30:00">
    <buginformation>
      <summary>Table layouts which only lay out once are giving bogus sizes</summary>
      <description>I20050510-0010 Use ctrl-shift-e to bring up the editor list. The list appears empty because all of the columns are set to zero size.</description>
      <comments>
		<comment id="1" date="2005-05-10 14:39:15 EDT" author="Kim Horne">This appears fine on OS X.</comment>
		<comment id="2" date="2005-05-11 09:30:48 EDT" author="Douglas Pollock">I see this on Motif as well.  I'll move this to "All", as MacOS X isn't a real OS.

The last time the layout in this dialog was touched was June 7, 2004.  It's not
likely that this is when the problem was introduced.</comment>
		<comment id="3" date="2005-05-11 11:29:01 EDT" author="Douglas Pollock">*** Bug 94354 has been marked as a duplicate of this bug. ***</comment>
		<comment id="4" date="2005-05-11 11:30:32 EDT" author="Douglas Pollock">The problem appears to be that the single layout is happening when the table is
still a pinhead.  This affects the inner class implementation of layout in
WorkbenchEditorsDialog, as well as JFace's TableLayout class.</comment>
		<comment id="5" date="2005-05-11 11:31:22 EDT" author="Douglas Pollock">Veronika said she would investigate.  As to whether the fix is applied to SWT or
UI code, this is still up for debate.</comment>
		<comment id="6" date="2005-05-11 12:03:08 EDT" author="Stefan Xenos">If the "only lay out once" pattern is causing this problem, then this is a dupe
of bug 93611.

Redundant layouts are a performance issue, but should not affect the correctness
of the layout.</comment>
		<comment id="7" date="2005-05-11 12:32:31 EDT" author="Douglas Pollock">*** Bug 93611 has been marked as a duplicate of this bug. ***</comment>
		<comment id="8" date="2005-05-11 12:33:57 EDT" author="Douglas Pollock">The "layout once" pattern used to work.  Changes in SWT appear to have caused a
regression.  Keeping this bug open, and closing the other as a dupe (just cause
this has more CC's, and is the bug I've been recently talking about with SWT).</comment>
		<comment id="9" date="2005-05-11 12:36:16 EDT" author="Veronika Irvine">On Motif:

A Composite with H_SCROLL and V_SCROLL has an initial size of (18, 18) with a
client area of (12,12).  When the vertical scrollbar is made visible the client
area changes to (1, 12) and a Resize event is sent (and a layout occurs).

The Table on motif is a Composite with style H_SCROLL and V_SCROLL.  When the
first item is created, the height of 12 pixels is not enough so a vertical
scollbar is made visible resulting in the Resize callback.  The layout is
occurring for a width of 1 pixel which in the case of a TableLayout (or any
other layout that basis the column widths on the client area of the first layout
invocation) is bad.

The following code demonstrates the problem on Motif:

public static void main(String[] args) {
 Display display = new Display();
 Shell shell = new Shell(display);
 shell.open();
 final Composite c = new Composite(shell, SWT.H_SCROLL | SWT.V_SCROLL | SWT.BORDER);
 ScrollBar bar = c.getHorizontalBar();
 bar.setVisible(false);
 bar = c.getVerticalBar();
 bar.setVisible(false);
 
 c.addListener(SWT.Resize, new Listener() {
  public void handleEvent(Event e) {
   System.out.println("bounds "+c.getBounds());
   System.out.println("resize "+c.getClientArea());
  }
 });
 bar = c.getHorizontalBar();
 bar.setVisible(true);
 bar = c.getVerticalBar();
 bar.setVisible(true);
 c.pack();
 while (!shell.isDisposed()) {
  if (!display.readAndDispatch())
   display.sleep();
 }
 display.dispose();
}</comment>
		<comment id="10" date="2005-05-11 12:54:37 EDT" author="Veronika Irvine">On motif, the resize event when a scrollbar appears/disappears was added after
3.0 on Oct 14, 2004.</comment>
		<comment id="11" date="2005-05-11 12:56:10 EDT" author="Stefan Xenos">There are two bugs here and both should be fixed. If one issue is fixed without
the other, the other PR should be reopened. The redundant layout needs to be
fixed, and so does the layout once pattern.

The size of a widget at the time of its first layout is not part of its
contract, and cannot be relied on. The fact that it worked at some time in the
past does not make it correct.</comment>
		<comment id="12" date="2005-05-11 16:45:27 EDT" author="Veronika Irvine">On Windows and Motif, fixed the case where resize event sent when client is a
pinhead and scrollbars are appearing disappearing.</comment>
		<comment id="13" date="2005-05-12 10:30:00 EDT" author="Darin Swanson">*** Bug 94920 has been marked as a duplicate of this bug. ***</comment>
		<comment id="14" date="2005-05-13 08:30:22 EDT" author="Veronika Irvine">Closing this bug because the specific problem of getting a resize event when the client area has not 
changed from a pinhead has been fixed.  I have reopened bug 93611.</comment>
      </comments>
    </buginformation>
    <fixedCommits>
      <commit Id="1b1ce5ded085389d01d094d9d62c7b7625f5f581" author="Veronika Irvine" date="2005-05-12 05:28:26"/>
          <file name="bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/ScrollBar.java">
              <method name="isVisible" returnType="boolean" parameters=""/>
          </file>
          <file name="bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/Scrollable.java">
              <method name="setScrollBarVisible" returnType="boolean" parameters="ScrollBar boolean"/>
          </file>
      </commit>
    </fixedCommits>
  </bug>
  <bug id="94598" opendate="2005-05-11 00:01:00" fixdate="2005-05-27 04:59:00">
    <buginformation>
      <summary>DBCS3.1:Eclipse hangs when activate IIMF input in search scope of Help</summary>
      <description>OS: &amp;lt;RHEL 4.0&amp;gt; Language: &amp;lt;Traditional Chinese&amp;gt; Build level: &amp;lt;Eclipse SDK 3.1 M6 - I20050506-1600&amp;gt; JDK version: &amp;lt;IBM JDK 1.4.2 SP1a&amp;gt; Test case #: &amp;lt;5.3 Search scope with NLS name(Help)&amp;gt; Summary: DBCS3.1:Eclipse hangs when activate IIMF input in search scope of Help Steps to recreate problem: 1- Install Eclipse SDK and NL pack 2- Click &amp;quot;Help&amp;quot; from menu -&amp;gt; select &amp;quot;Help Content&amp;quot; -&amp;gt; Click &amp;quot;Search Scope&amp;quot;, a Search Scope dialog pop up. 3- Select &amp;quot;Search all topics&amp;quot;, Click &amp;quot;New&amp;quot;, the New Search List dialog pop up. 4- Then try to active IIMF input method by &amp;quot;CTRL+SPACE&amp;quot; key in order to input DBCS characters, but Eclipse hangs. No response from Eclipse. Error: Eclipse hangs and can't switch or change any input method. Expected Result: IIMF input should be working properly for inputing/key in DBCS characters.</description>
      <comments>
		<comment id="1" date="2005-05-11 00:09:17 EDT" author="Sanny CC Yang">Created attachment 20926 [details]
log file from metadat folder

Attach a log file</comment>
		<comment id="2" date="2005-05-13 17:01:28 EDT" author="Felipe Heidrich">This is Browser widget with a text entry (javascript) inside. The Browser 
widget has a SWT input context which is conflicting with the native input 
context mozilla provides. The fix is to stop creating a SWT input context for 
the Browser widget.</comment>
		<comment id="3" date="2005-05-20 18:13:36 EDT" author="Felipe Heidrich">fixed in head &gt; 20050520</comment>
		<comment id="4" date="2005-05-27 04:43:21 EDT" author="Sanny CC Yang">Thank you, Felipe.</comment>
		<comment id="5" date="2005-05-27 04:59:06 EDT" author="Sanny CC Yang">This bug has been verified by Eclipse SDK 3.1 build.
Build level: I20050526_1200.
This bug is fixed in this build.</comment>
      </comments>
    </buginformation>
    <fixedCommits>
      <commit Id="7e57b361df24bb2168b8ea28aac794c842a59325" author="Felipe Heidrich" date="2005-05-21 07:13:07"/>
          <file name="bundles/org.eclipse.swt/Eclipse SWT Mozilla/gtk/org/eclipse/swt/browser/Browser.java">
          </file>
          <file name="bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Composite.java">
          </file>
      </commit>
    </fixedCommits>
  </bug>
  <bug id="93724" opendate="2005-05-04 17:35:00" fixdate="2005-05-30 15:14:00">
    <buginformation>
      <summary>Drag-and-drop creates signal names every time</summary>
      <description>Here is an example of some code in DragSource.java for GTK+: byte[] buffer = Converter.wcsToMbcs(null, &amp;quot;drag_data_get&amp;quot;, true); OS.g_signal_connect(control.handle, buffer, DragGetData.getAddress(), 0); buffer = Converter.wcsToMbcs(null, &amp;quot;drag_end&amp;quot;, true); OS.g_signal_connect(control.handle, buffer, DragEnd.getAddress(), 0); buffer = Converter.wcsToMbcs(null, &amp;quot;drag_data_delete&amp;quot;, true); OS.g_signal_connect(control.handle, buffer, DragDataDelete.getAddress(), 0); Rather than converting the names for the signals every time, these signal names should be defined in OS.java so that they can be only created once.</description>
      <comments>
		<comment id="1" date="2005-05-28 23:32:05 EDT" author="Billy Biggs">Any chance of this for 3.1?  :)</comment>
		<comment id="2" date="2005-05-30 15:14:44 EDT" author="Veronika Irvine">Done.</comment>
      </comments>
    </buginformation>
    <fixedCommits>
      <commit Id="27237e423c5dbf3d608f1955e4c7412b12299299" author="Veronika Irvine" date="2005-05-31 04:10:47"/>
          <file name="bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/gtk/org/eclipse/swt/dnd/DragSource.java">
              <method name="DragSource" returnType="null" parameters="Control int"/>
          </file>
          <file name="bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/gtk/org/eclipse/swt/dnd/DropTarget.java">
              <method name="DropTarget" returnType="null" parameters="Control int"/>
          </file>
          <file name="bundles/org.eclipse.swt/Eclipse SWT PI/gtk/org/eclipse/swt/internal/gtk/OS.java">
          </file>
      </commit>
    </fixedCommits>
  </bug>
  <bug id="97651" opendate="2005-05-31 14:43:00" fixdate="2005-06-03 13:04:00">
    <buginformation>
      <summary>tree insert mark cheese</summary>
      <description>3.1RC1 - run the snippet below - the insert line is set to be under the &amp;quot;root&amp;quot; item - collapse the root item -&amp;gt; problem 1: this makes most of the insert line go away, except for its pointy ends. This line should not go away because it belongs to the &amp;quot;root&amp;quot; item, not to the &amp;quot;child&amp;quot; item, but if it really wants to go away, then its end tips should not be left - press the button to the right of the Table: this does a Tree.redraw(), and note that the insert line reappears, so I guess it never really meant to go away -&amp;gt; problem 2: now expand the root item again and its insert mark gets copied to below the child item in addition to its initial location. This is cheese, as can be seen by damaging part of this line with another window public static void main(String[] args) { final Display display = new Display(); final Shell shell = new Shell(display); shell.setBounds(10, 10, 300, 300); final Tree tree = new Tree(shell, SWT.NONE); tree.setBounds(10, 10, 200, 200); new TreeItem(tree, SWT.NONE).setText(&amp;quot;pre-root&amp;quot;); TreeItem root1 = new TreeItem(tree, SWT.NONE); root1.setText(&amp;quot;root&amp;quot;); TreeItem child = new TreeItem(root1, SWT.NONE); child.setText(&amp;quot;child&amp;quot;); Button button = new Button(shell, SWT.PUSH); button.setBounds(230,10,30,30); button.addSelectionListener(new SelectionAdapter() { public void widgetSelected(SelectionEvent e) { tree.redraw(); } }); root1.setExpanded(true); tree.setInsertMark(root1, false); shell.open(); while (!shell.isDisposed()) { if (!display.readAndDispatch()) display.sleep(); } display.dispose(); }</description>
      <comments>
		<comment id="1" date="2005-05-31 17:22:32 EDT" author="Veronika Irvine">This sounds like the same problem as shown in Bug 96884.  However, this 
example would be easier to debug.</comment>
		<comment id="2" date="2005-06-01 14:29:15 EDT" author="Steve Northover">*** Bug 96884 has been marked as a duplicate of this bug. ***</comment>
		<comment id="3" date="2005-06-03 13:04:33 EDT" author="Steve Northover">Fixed &gt; 20040603</comment>
      </comments>
    </buginformation>
    <fixedCommits>
      <commit Id="62bfd83b9f7c798916f986e294f941ecd8738afe" author="Steve Northover" date="2005-06-04 02:04:59"/>
          <file name="bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Tree.java">
          </file>
      </commit>
    </fixedCommits>
  </bug>
  <bug id="97678" opendate="2005-05-31 15:21:00" fixdate="2005-06-03 16:42:00">
    <buginformation>
      <summary>SashForm - can lose sash for item on far right</summary>
      <description>Eclipse 3.1 RC1 In the CustomControlExample, drag the sash between the items on the far right as far right as it will go. It should stop about 20 pixels from the end. However, it lets you drag the sash right off the end and then you can no longer drag the sash back.</description>
      <comments>
		<comment id="1" date="2005-06-03 16:42:50 EDT" author="Veronika Irvine">Fixed for 3.1 RC2</comment>
      </comments>
    </buginformation>
    <fixedCommits>
      <commit Id="1ab8b5fbc680e1f1510908f5f82adf75422a18ac" author="Veronika Irvine" date="2005-06-04 04:04:19"/>
          <file name="bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/SashForm.java">
              <method name="onDragSash" returnType="void" parameters="Event"/>
          </file>
      </commit>
    </fixedCommits>
  </bug>
  <bug id="97745" opendate="2005-05-31 17:17:00" fixdate="2005-06-06 14:55:00">
    <buginformation>
      <summary>Table column header stays pressed if mouse button released elsewhere</summary>
      <description>3.1 RC1, Windows XP - open the tasks view - click on the &amp;quot;Resource&amp;quot; Column and release to sort the table. Note that the column header is inset while pressing down and then restores to normal look on release. - now press down on the &amp;quot;Location&amp;quot; column but drag the mouse off the view before releasing the mouse button. Problem: The &amp;quot;Location&amp;quot; column keeps its &amp;quot;depressed&amp;quot; look until another column is clicked. This can mislead one into thinking the table is sorted by the wrong column. Not sure if this is SWT or JFace...</description>
      <comments>
		<comment id="1" date="2005-06-01 02:59:05 EDT" author="Benjamin Pasero">Dup of Bug #85668 ?

Ben</comment>
		<comment id="2" date="2005-06-01 15:22:28 EDT" author="Steve Northover">This could be caused by always turning drag on in the operating system even 
when no columns are draggable.</comment>
		<comment id="3" date="2005-06-01 15:22:59 EDT" author="Steve Northover">*** Bug 85668 has been marked as a duplicate of this bug. ***</comment>
		<comment id="4" date="2005-06-01 15:23:52 EDT" author="Steve Northover">Seems you need to drag the mouse diagonally outside the window to make it 
happen.</comment>
		<comment id="5" date="2005-06-03 12:01:04 EDT" author="Veronika Irvine">For 3.1 RC2 fixed the case where no columns are moveable.

Now, this problem only occurs if 

1) you have at least one moveable column and
2) you are using Win2K or WinXP without a manifest (as soon as you have a
manifest, the problem goes away).</comment>
		<comment id="6" date="2005-06-06 14:14:40 EDT" author="Veronika Irvine">Here is an example showing why ReleaseCapture is needed in 
HDN_BEGINDRAG.

Column1 is not moveable.  Click on column 1 and drag it around.  Notice that 
you can see column 3 moving and dragging can actually cause column 3 to move.

public static void main(String[] args) {
 Display display = new Display();
 Shell shell = new Shell(display);
 shell.setLayout(new FillLayout());
 Table table = new Table(shell, SWT.BORDER);
 table.setHeaderVisible(true);
 TableColumn column1 = new TableColumn(table, SWT.NONE);
 column1.setText("col 1");
 TableColumn column2 = new TableColumn(table, SWT.NONE);
 column2.setText("col 2");
 TableColumn column3 = new TableColumn(table, SWT.NONE);
 column3.setText("col 3");
 column3.setMoveable(true);
 for (int i = 0; i &lt; 10; i++) {
  TableItem item = new TableItem(table, SWT.NONE);
  item.setText(new String[] { "item " + i, "column 1 " + 
i, "asdasdas" });
 }
 column1.setWidth(100);
 column2.setWidth(100);
 column3.setWidth(100);
 shell.pack();
 shell.open();
 while (!shell.isDisposed()) {
  if (!display.readAndDispatch())
   display.sleep();
 }
 display.dispose();
}</comment>
		<comment id="7" date="2005-06-06 14:55:19 EDT" author="Steve Northover">Fixed &gt; 20050606</comment>
      </comments>
    </buginformation>
    <fixedCommits>
      <commit Id="20dfe0906435530210e6d0e7cc5a211635ecb300" author="Veronika Irvine" date="2005-06-04 12:55:01"/>
          <file name="bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Table.java">
              <method name="createHandle" returnType="void" parameters=""/>
          </file>
          <file name="bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/TableColumn.java">
              <method name="setMoveable" returnType="void" parameters="boolean"/>
          </file>
      </commit>
    </fixedCommits>
  </bug>
  <bug id="97177" opendate="2005-05-30 04:20:00" fixdate="2005-06-08 11:17:00">
    <buginformation>
      <summary>[misc] Chinese IME status lost</summary>
      <description>Open chinese IME in eclipse text editor,then switch to another window and switch back to Eclipse, chinese IME are closed, and have to open again.</description>
      <comments>
		<comment id="1" date="2005-05-30 04:28:13 EDT" author="Dani Megert">Does this only happen with Eclipse? I would assume that the IME window is
controlled by the OS.</comment>
		<comment id="2" date="2005-05-30 04:38:22 EDT" author="Haibing">(In reply to comment #1)
&gt; Does this only happen with Eclipse? I would assume that the IME window is
&gt; controlled by the OS.

Yes, it only happen with eclipse.It seems only happen to eclipse text editor, I 
have noticed dialogs of eclipse does not lost IME status, such as Open Type 
dialog.
IME status is not IME window, I mean each time after change IME to chinese in 
eclipse text editor and input some chinese, then switch to some other 
application and switch back to eclipse, you have to change IME to chinese 
again. Normal application will keep the IME you have set until you change it 
again.</comment>
		<comment id="3" date="2005-05-30 05:04:16 EDT" author="Dani Megert">Just tried it out and it works for me using 3.1 RC1, Windows XP, SP2:
1. install fresh 3.1RC1 Eclipse SDK, no additional plug-ins
2. create project P
3. create file f.txt
4. change ime to some other language 'L'
5. switch to other app ==&gt; default language shown in ime
6. switch back to Eclipse ==&gt; 'L' shown in ime status</comment>
		<comment id="4" date="2005-05-30 05:04:25 EDT" author="Dani Megert">.</comment>
		<comment id="5" date="2005-05-30 05:22:30 EDT" author="Haibing">(In reply to comment #4)
&gt; .

Mmm, yes, the IME status in language bar are kept, but you could not input 
chinese in fact, must close IME and open IME again to input chinese.

I'm using 3.1 build200409240800, but had test this bug with 3.1M7 too.

Thank you for test and reply.</comment>
		<comment id="6" date="2005-05-30 05:29:46 EDT" author="Dani Megert">Reopen to move to SWT for comment. There's nothing Platform Text does which
would cause this.</comment>
		<comment id="7" date="2005-06-07 15:03:01 EDT" author="Felipe Heidrich">This is a side-effect caused by the fix for bug14656, the fix is in 
Shell#WM_ACTIVATE:
/*
* Bug in Windows XP.  When a Shell is deactivated, the
* IME composition window does not go away. This causes
* repaint issues.  The fix is to close the IME ourselves
* when the Shell is deactivated.
* 
* Note.  When the Shell is reactivated, the text in the
* composition window has been lost.
*/
if (OS.WIN32_VERSION &gt;= OS.VERSION (5, 1)) {
 if ((wParam &amp; 0xFFFF) == 0 &amp;&amp; OS.IsDBLocale &amp;&amp; hIMC != 0) {
  OS.ImmSetOpenStatus (hIMC, false);
 }
}

-- I can not remove this code cause I can't re-introduce Bug14656, the only 
chance here is to find some other fix for it. </comment>
		<comment id="8" date="2005-06-08 11:17:34 EDT" author="Felipe Heidrich">Fixed in HEAD &gt; 20050608</comment>
      </comments>
    </buginformation>
    <fixedCommits>
      <commit Id="330b80f886db8e05a5f99e5db22244e68c8b0111" author="Felipe Heidrich" date="2005-06-09 12:17:11"/>
          <file name="bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Shell.java">
              <method name="WM_ACTIVATE" returnType="LRESULT" parameters="int int"/>
          </file>
      </commit>
    </fixedCommits>
  </bug>
  <bug id="99376" opendate="2005-06-10 10:56:00" fixdate="2005-06-16 18:24:00">
    <buginformation>
      <summary>TableColumn has width=0 and second column missing</summary>
      <description>31RC2 - Window -&amp;gt; Show View -&amp;gt; Other... - select PDE Runtime - Plug-in Registry, OK - in the opened view, the Table that's to the right of the Tree has two problems: -&amp;gt; column 0 has width 0 (its width can be increased by dragging its separator) -&amp;gt; column 1 seems non-existent</description>
      <comments>
		<comment id="1" date="2005-06-15 15:31:46 EDT" author="Grant Gayed">The following snippet in PropertySheetViewer.addColumns sets the widths of the 
two columns:

tree.addControlListener(new ControlAdapter() {
    public void controlResized(ControlEvent e) {
        Rectangle area = tree.getClientArea();
        TreeColumn[] columns = tree.getColumns();
        if (area.width &gt; 0 &amp;&amp; columns[0].getWidth() == 0) {
            columns[0].setWidth(area.width * 40 / 100);
            columns[1].setWidth(area.width - columns[0].getWidth() - 4);
            tree.removeControlListener(this);
        }
    }
});

Note that once it has set the column widths it removes the control listener.

What is happening: A layout is triggered by setting the weights on the Tree's 
parent SashForm before it (and its children) are realized.  So the Tree (on 
motif) answers its bounds as (0,0,1,1), the layout procedes and sets the Tree's 
size to be very small, which fires the resize callback that is handled by the 
snippet above.  The snippet computes its column widths to be 0's (because 
tree.getClientArea() is still answering a very small size), and then stops 
listening for the next Resize event which would have given the Tree's correct 
size.

SSQ says that to fix this at our level would require making changes similar to 
those on GTK that allow unrealized widgets to answer bounds of (0,0,0,0).  
Since this is obviously a post-3.1 item, the only other way to make this work 
is to have the "if" condition in the snippet above changed to something 
like "(area.width &gt; 1 &amp;&amp; area.height &gt; 1 &amp;&amp; columns[0].getWidth() == 0)".</comment>
		<comment id="2" date="2005-06-16 08:51:53 EDT" author="Veronika Irvine">Is this a case of sending a resize event when no resize happened?

If a Tree is very small (e.g. (1,1)) and columns with non-zero width or rows are
added such that a scrollbar is required, despite the fact that scrollbars are
now required, there should be no resize event because the client area can't
become smaller that (1,1) anyway.</comment>
		<comment id="3" date="2005-06-16 16:53:33 EDT" author="Michael Van Meekeren">+1, we should check for this case in other places as well, but for 3.1 does not
seem wise to change more than necessary.</comment>
		<comment id="4" date="2005-06-16 17:54:23 EDT" author="Veronika Irvine">Changed SashLayout to ignore widths &lt;=1.</comment>
		<comment id="5" date="2005-06-16 18:24:32 EDT" author="Steve Northover">For 3.2 we should fix the bug the same way we worked around it on GTK.</comment>
      </comments>
    </buginformation>
    <fixedCommits>
      <commit Id="8da795fc775959f9e1b6809f80f242f6459cea83" author="Veronika Irvine" date="2005-06-17 05:56:49"/>
          <file name="bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/SashFormLayout.java">
              <method name="layout" returnType="void" parameters="Composite boolean"/>
          </file>
      </commit>
    </fixedCommits>
  </bug>
  <bug id="100040" opendate="2005-06-14 14:19:00" fixdate="2005-06-17 14:49:00">
    <buginformation>
      <summary>Slowdown between 3.1 RC1 and N20050602 due to change to ImageList</summary>
      <description>build N20050602 Several of the UI performance tests got slower between RC1 and N20050602, on Windows. I tried running one of them, the OpenCloseWindowTest on N20050602, and also with N20050602+RC1's SWT. Here are the numbers (on Win2K): N20050602: testOpenCloseWindows:org.eclipse.debug.ui.DebugPerspective Elapsed Process: 844 ms Elapsed Process: 828 ms Elapsed Process: 854 ms average: 842 N20050602 with SWT from RC1 (I20050527-1300): testOpenCloseWindows:org.eclipse.debug.ui.DebugPerspective Elapsed Process: 751 ms Elapsed Process: 757 ms Elapsed Process: 731 ms average: 746ms increase: 96 over 746 = 13% slower I've only included the times for the debug perspective. The other perspectives showed less of a change, and seemed to correlate with the numer of icons (either in the menus or toolbars or both). The debug perspective has the most icons. I'm suspicious of the ImageList change to always specify OS.ILC_MIRROR. I'll see if unwinding that single change makes a difference.</description>
      <comments>
		<comment id="1" date="2005-06-14 14:19:22 EDT" author="Nick Edgar">Tried again with just the ImageList change (based off of SWT in RC1).
This represents the change from v1.23 to v1.24 of ImageList (under win32).

Without ImageList change (v1.23, no OS.ILC_MIRROR flag): 687, 704, 720
  average: 704

With ImageList change (v1.24, with OS.ILC_MIRROR flag): 824, 848, 827
  average: 833

delta: 129 / 704 = 18% slower</comment>
		<comment id="2" date="2005-06-14 14:20:01 EDT" author="Nick Edgar">Please consider for RC3.</comment>
		<comment id="3" date="2005-06-14 14:21:55 EDT" author="Michael Van Meekeren">+1 this affects many UI performance tests.</comment>
		<comment id="4" date="2005-06-14 14:57:31 EDT" author="Steve Northover">FH to fix.  As soon as the code is ready, we need to confirm with Nick that 
the regression has gone away.</comment>
		<comment id="5" date="2005-06-14 15:24:00 EDT" author="Felipe Heidrich">Nick, I have the code ready, can you help me to set up the performance tests ?</comment>
		<comment id="6" date="2005-06-15 11:41:25 EDT" author="Felipe Heidrich">fixed in HEAD &gt; 20050615</comment>
		<comment id="7" date="2005-06-17 14:41:33 EDT" author="Felipe Heidrich">Nick, can you double check if the result of the performance test are back to 
normal.  Thanks

I checked:
http://fullmoon/downloads/drops/I20050617-0010/performance/org.eclipse.ui.php?
It looked fine to me.</comment>
		<comment id="8" date="2005-06-17 14:49:56 EDT" author="Nick Edgar">Yes, confirmed.</comment>
      </comments>
    </buginformation>
    <fixedCommits>
      <commit Id="0be85fb152998df6206f109dfea816fb7584e122" author="Felipe Heidrich" date="2005-06-16 12:41:09"/>
          <file name="bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Button.java">
              <method name="_setImage" returnType="void" parameters="Image"/>
          </file>
          <file name="bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Display.java">
              <method name="getIconSizes" returnType="Point[]" parameters=""/>
          </file>
          <file name="bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/ImageList.java">
          </file>
          <file name="bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Menu.java">
              <method name="imageIndex" returnType="int" parameters="Image"/>
          </file>
          <file name="bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/TabFolder.java">
              <method name="imageIndex" returnType="int" parameters="Image"/>
          </file>
          <file name="bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Table.java">
              <method name="imageIndex" returnType="int" parameters="Image"/>
          </file>
          <file name="bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/ToolItem.java">
              <method name="updateImages" returnType="void" parameters="boolean"/>
          </file>
          <file name="bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Tree.java">
              <method name="imageIndex" returnType="int" parameters="Image"/>
          </file>
      </commit>
    </fixedCommits>
  </bug>
  <bug id="78634" opendate="2004-11-15 12:29:00" fixdate="2005-06-22 10:00:00">
    <buginformation>
      <summary>ImageData.getTransparencyMask - incorrect javadoc or implementation wrong</summary>
      <description>The implementation of getTransparencyMask appears to return a fully opaque mask when the image has no transparency. The javadoc seems to infer that it would return null in that case. /** * Returns an &amp;lt;code&amp;gt;ImageData&amp;lt;/code&amp;gt; which specifies the * transparency mask information for the receiver, or null if the * receiver has no transparency and is not an icon. * * &amp;#64;return the transparency mask or null if none exists */ public ImageData getTransparencyMask() (see implementation of ImageData.colorMask) On a different note, should we return a transparent mask based on the the alphaData values with the 127 threshold?</description>
      <comments>
		<comment id="1" date="2004-11-15 13:44:44 EST" author="Steve Northover">Chrix and SSQ to decide what is right.</comment>
		<comment id="2" date="2005-04-11 23:55:36 EDT" author="Steve Northover">CAR to decide with SSQ and fix.</comment>
		<comment id="3" date="2005-06-21 17:54:01 EDT" author="Carolyn MacLeod">SSQ, Chrix is right. Perhaps we should write the spec to match the 
implementation. So possibly it should be worded something like:

/**
 * Returns an &lt;code&gt;ImageData&lt;/code&gt; which specifies the
 * transparency mask information for the receiver. If the
 * receiver has no transparency or is not an icon, returns
 * an opaque mask.
 *
 * @return the transparency mask
 */


What do you think?

Chrix, we should probably open a new bug to look at returning a mask based on 
alpha data.</comment>
		<comment id="4" date="2005-06-22 09:34:19 EDT" author="Silenio Quarti">That is ok to me.

For the alpha data, we should add new ImageData.getTransparency() which 
returns a ImageData that may be 8 bit depth (alpha data) or 1 bit depth (mask, 
transparent pixel, opaque).</comment>
		<comment id="5" date="2005-06-22 10:00:11 EDT" author="Carolyn MacLeod">Fixed &gt; 20050622 - new comment will be in RC4.

Opened bug 101243 to address the alpha data question.</comment>
      </comments>
    </buginformation>
    <fixedCommits>
      <commit Id="5c18af56c06eac42b5c0bdd457840f7f5340884f" author="Carolyn MacLeod" date="2005-06-22 11:04:18"/>
          <file name="bundles/org.eclipse.swt/Eclipse SWT/common/org/eclipse/swt/graphics/ImageData.java">
          </file>
      </commit>
    </fixedCommits>
  </bug>
  <bug id="94603" opendate="2005-05-11 01:27:00" fixdate="2005-08-04 15:48:00">
    <buginformation>
      <summary>Spinner does not look like Windows standard one</summary>
      <description>SWT Spinner puts buttons outside of the text box inset border. Standard look of Windows UpDown control is different. The buttons are inside the inset border.</description>
      <comments>
		<comment id="1" date="2005-05-11 01:29:59 EDT" author="Sergey Prigogin">Created attachment 20928 [details]
Screen shot of native Windows spinner

Attached a screen shot of standard Windows spinner.</comment>
		<comment id="2" date="2005-05-11 18:12:36 EDT" author="Steve Northover">FH?</comment>
		<comment id="3" date="2005-05-12 00:40:30 EDT" author="Brock Janiczak">For this to work you must register your spinner as a buddy of the text field and
specify an alignment.  You can easily make the spinner a buddy by using the
UDS_AUTOBUDDY (0x10) style.  You can set the alignment by using either
UDS_ALIGNRIGHT (0x4) or UDS_ALIGNLEFT (0x8) depending on the SWT RTL style.</comment>
		<comment id="4" date="2005-05-12 04:07:28 EDT" author="Brock Janiczak">Also, when you press up/down in the text field the corresponding button in the
up/down control is supposed to appear depressed.</comment>
		<comment id="5" date="2005-05-12 11:16:18 EDT" author="Felipe Heidrich">Created attachment 21050 [details]
other native spinner

I like this one better. We implement Spinner in all platforms to have the
border only around the text entry. I don't think I want to change it now :-(</comment>
		<comment id="6" date="2005-05-12 11:18:53 EDT" author="Felipe Heidrich">IMO, on windows xp having the border around the entry+updown looks pretty ugly.</comment>
		<comment id="7" date="2005-05-12 11:52:42 EDT" author="Sergey Prigogin">Felipe, you probably found the only Windows screen where spinner has unusual 
look. My explanation for this anomaly is that they wanted the spinner to look 
the same as the custom control for setting time to keep the style of that 
particular window consistent. Everywhere else in Windows as well as in Office 
the border is around the whole spinner.</comment>
		<comment id="8" date="2005-05-24 16:23:29 EDT" author="Felipe Heidrich">Created attachment 21667 [details]
border only around the updown

Brock, when I set UDS_AUTOBUDDY | UDS_ALIGNRIGHT in the spinner it draws border
around the updown control regardless if the buddy control has border or not.
I know I could use UDS_AUTOBUDDY | UDS_ALIGNRIGHT only when SWT.BORDER is set
but autobuddy also enforces other behaviours (see Bug96053). Would you have any
other ideas on how to change this ?</comment>
		<comment id="9" date="2005-05-24 17:21:21 EDT" author="Felipe Heidrich">(In reply to comment #4)
&gt; Also, when you press up/down in the text field the corresponding button in 
the
&gt; up/down control is supposed to appear depressed.

This is the problem that can be solved by using UDS_SETBUDDYINT. As I said 
before, this flag can not be used because of floating point. Would you know 
any work around for this ?</comment>
		<comment id="10" date="2005-05-25 20:00:22 EDT" author="Steve Northover">Clear the flag when floating point is specified?  Not sure this is possible ...</comment>
		<comment id="11" date="2005-07-26 18:27:09 EDT" author="Felipe Heidrich">fixed in head &gt; 20050726

fixed using 
 if ((style &amp; SWT.BORDER) != 0) {
  if ((style &amp; SWT.RIGHT_TO_LEFT) != 0) {
   upDownStyle |= OS.UDS_ALIGNLEFT;
  } else {
   upDownStyle |= OS.UDS_ALIGNRIGHT;
  }
 }</comment>
		<comment id="12" date="2005-08-03 07:42:27 EDT" author="Florian Priester">Created attachment 25606 [details]
Screenshot (button sizing)

Great to see this fixed. The fix has, however, introduced a tiny regression:
when using the Classic Theme (and the default size for the spinner), the
up/down buttons are now so small that you cannot make out the arrow icons
anymore. All you see are two dots. See the attached screenshot which also
includes a spinner with the expected look on the right.</comment>
		<comment id="13" date="2005-08-03 07:48:39 EDT" author="Florian Priester">Created attachment 25607 [details]
Patch

Here's a patch that works for me. In order for the arrow icons to be
properly visible, Spinner.computeSize needs to ensure that there is
enough vertical room for both the up/down buttons (SM_CYVSCROLL) and
the widget border (if set) when called with a height hint of SWT.DEFAULT.

Right now the new code in the patch is only enabled for unthemed clients
since that is where the look was wrong; the arrow buttons in the XP theme
look OK even if the space they are given is less than SM_CYVSCROLL.</comment>
		<comment id="14" date="2005-08-03 14:03:26 EDT" author="Felipe Heidrich">thanks florian

fixed, I didn't use your fix. Please verify the code and the behaviour are 
okay in your opnion.</comment>
		<comment id="15" date="2005-08-03 17:49:12 EDT" author="Florian Priester">&gt; Please verify the code and the behaviour are okay in your opnion.

Your approach makes the spinner taller than it needs to be.

Since the up/down buttons are positioned directly below the upper
border, the preferred height calculation should be the following:

  max(textHeight + textVerticalMargin + borderHeight,
      upDownHeight + borderHeight)

In your new code, however, it's:

  max(textHeight, upDownHeight) + textVerticalMargin + borderHeight

Moreover, the following should hold true (it does in my patch
[without the theme check] but not yours):

  prefHeight(spinner with border)
    == prefHeight(spinner without border) + 2 * getBorderWidth()

Actually, the old code that you had in place in v1.39 was on the right track.
It had only failed to add the border (2 * getBorderWidth()). My patch solves
this issue so I would suggest to use that approach.

You don't need to include the theme check if you don't want to.
It was only added to keep the change minimal and avoid increasing
the height of the XP theme spinner to 21px when it already looked
acceptable at 19px. On second thought, it is perhaps better to
leave the check out in favour of a really accurate calculation.</comment>
		<comment id="16" date="2005-08-04 11:26:20 EDT" author="Felipe Heidrich">I added text margin to the updown (totally bogus I know) cause it looked 
really tiny and I want to make it a bit taller... but, 23px for spinner on 
winxp looks bad indeed.

I put your code in (whitout the version check). All spinner (that I checked) 
in the OS have 20px height, with the check our computesize gives 19 and 
without 21, so I left out the version check for the sake of the 'really 
accurate calculation' ;-) the art of computesize kills me sometimes.</comment>
		<comment id="17" date="2005-08-04 14:15:43 EDT" author="Florian Priester">&gt; All spinner (that I checked) in the OS have 20px height,
&gt; with the check our computesize gives 19 and without 21

Okay, I have one more idea. You could try the following:

  int upDownHeight = OS.GetSystemMetrics (OS.SM_CYVSCROLL) &amp; ~1;
  upDownHeight += 2 * getBorderWidth ();
  trim.height = Math.max (trim.height, upDownHeight);

This will make the spinner 20px tall in both the Classic theme
(OS.SM_CYVSCROLL=16) and the XP theme (OS.SM_CYVSCROLL=17).
In addition to that, the basic thought behind it is that an even number
is better suited to represent the height of two equally-sized buttons.

What do you think? (It is just a suggestion and I would have no problem
with leaving things as they are now.)</comment>
		<comment id="18" date="2005-08-04 14:23:08 EDT" author="Sergey Prigogin">Should it be

  int upDownHeight = (OS.GetSystemMetrics (OS.SM_CYVSCROLL) + 1) &amp; ~1;

to round up, not down?</comment>
		<comment id="19" date="2005-08-04 15:17:44 EDT" author="Florian Priester">(In reply to comment #18)
&gt; Should it be
&gt; 
&gt;   int upDownHeight = (OS.GetSystemMetrics (OS.SM_CYVSCROLL) + 1) &amp; ~1;
&gt; 
&gt; to round up, not down?

Rounding up would not give us the desired effect which is bringing the height
of the XP theme spinner as close as possible to what Felipe found to be the
common height (20px). Instead it would make it even taller (22px) than it is
after today's check-in (21px).</comment>
		<comment id="20" date="2005-08-04 15:22:06 EDT" author="Sergey Prigogin">Makes sense.</comment>
		<comment id="21" date="2005-08-04 15:48:40 EDT" author="Felipe Heidrich">Thanks, I'll just leave the code the way it is.</comment>
      </comments>
    </buginformation>
    <fixedCommits>
      <commit Id="afa1f360d20e2a4c5363a65a8a165903a6314c9f" author="Felipe Heidrich" date="2005-07-27 07:15:33"/>
          <file name="bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Spinner.java">
              <method name="createHandle" returnType="void" parameters=""/>
          </file>
      </commit>
    </fixedCommits>
  </bug>
  <bug id="96916" opendate="2005-05-27 03:44:00" fixdate="2005-08-05 12:14:00">
    <buginformation>
      <summary>Spinner.setToolTipText() doesn't work</summary>
      <description>No tooltip appears on the spinner widget after Spinner.setToolTipText().</description>
      <comments>
		<comment id="1" date="2005-07-28 17:06:54 EDT" author="Felipe Heidrich">fixed in head &gt; 20050728</comment>
      </comments>
    </buginformation>
    <fixedCommits>
      <commit Id="50dcb2900938416c32d28eaa27bf94229993f752" author="Felipe Heidrich" date="2005-07-29 06:05:32"/>
          <file name="bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Combo.java">
              <method name="setTextLimit" returnType="void" parameters="int"/>
          </file>
          <file name="bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Control.java">
              <method name="releaseWidget" returnType="void" parameters=""/>
          </file>
          <file name="bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Shell.java">
              <method name="fixShell" returnType="void" parameters="Shell Control"/>
          </file>
          <file name="bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Spinner.java">
              <method name="setSelection" returnType="void" parameters="int boolean"/>
          </file>
      </commit>
    </fixedCommits>
  </bug>
  <bug id="102794" opendate="2005-07-05 17:56:00" fixdate="2005-08-05 12:14:00">
    <buginformation>
      <summary>GridLayout has change behaviour between 3.0.2 and 3.1</summary>
      <description>Running the following problem on 3.0.2 and 3.1 shows a difference in behaviour: public static void main(String[] args) { Display display = new Display(); Shell shell = new Shell(display); shell.setLayout(new FillLayout()); ScrolledComposite sc1 = new ScrolledComposite(shell, SWT.H_SCROLL | SWT.V_SCROLL); Composite editor = new Composite(sc1, SWT.SHADOW_NONE); sc1.setContent(editor); sc1.setLayout(new FillLayout()); GridLayout layout = new GridLayout(); layout.numColumns = 6; layout.makeColumnsEqualWidth = true; editor.setLayout(layout); Label boxLabel = new Label(editor, SWT.NONE); boxLabel.setText(&amp;quot;My label&amp;quot;); Text textBox = new Text(editor, SWT.H_SCROLL | SWT.V_SCROLL | SWT.MULTI | SWT.BORDER); textBox.setText(&amp;quot;Some text for the text box\nAlso with a new line&amp;quot;); // do layout bits GridData labelData = new GridData(SWT.RIGHT, SWT.TOP, false, false); boxLabel.setLayoutData(labelData); GridData textBoxData = new GridData(SWT.FILL, SWT.CENTER, true, false, 5, 1); textBoxData.widthHint = 400; textBox.setLayoutData(textBoxData); sc1.setExpandHorizontal(true); sc1.setExpandVertical(true); sc1.setMinSize(editor.computeSize(SWT.DEFAULT, SWT.DEFAULT)); shell.pack(); shell.open(); while (!shell.isDisposed()) { if (!display.readAndDispatch()) display.sleep(); } display.dispose(); } Basically on 3.0.2 the window that appears has a label of about 80 pixels wide and a textbox of 400 pixels wide. With 3.1 the label is about 400 pixels wide, with the text box being about 2000 pixels wide. This appears to be a combination of the text box spanning 5 columns and the use of layout.makeColumnsEqualWidth = true; Turning off makeColumnsEqualWidth helps but it means that the real app this if from ends up looking untidy. Using minimumWidth instead of widthHint doesn't help. Commenting out the minimumWidth line helps, but the form ends up being wider than I'd like. The effect I'm trying to achieve is that labels are 1 column wide then text boxes are either 2 or 5 columns wide (so some rows get two labels and text boxes) The scrolled composite is needed because in the real app the forms are actually within a TabItem, so I need the ability to scroll.</description>
      <comments>
		<comment id="1" date="2005-07-18 11:48:20 EDT" author="Veronika Irvine">Fixed for 3.2 in HEAD &gt; 20050718</comment>
		<comment id="2" date="2005-07-18 11:50:24 EDT" author="Veronika Irvine">See version 1.49 of GridLayout for fix.</comment>
      </comments>
    </buginformation>
    <fixedCommits>
      <commit Id="cb48ee3dfb90e4b0bbbaf2bb0eecef2cccfd1280" author="Veronika Irvine" date="2005-07-19 12:46:18"/>
          <file name="bundles/org.eclipse.swt/Eclipse SWT/common/org/eclipse/swt/layout/GridLayout.java">
              <method name="layout" returnType="Point" parameters="Composite boolean int int int int boolean"/>
          </file>
      </commit>
    </fixedCommits>
  </bug>
  <bug id="100387" opendate="2005-06-16 08:44:00" fixdate="2005-08-05 12:14:00">
    <buginformation>
      <summary>CTabFolder creates and disposes a Shell on every MouseHover</summary>
      <description>CTabFolder.showToolTip() currently does the following: On MouseHover: - create a temporary shell - if there's a tooltip: set it and show it - otherwise: dispose the shell There are no tooltips for the tabs used for views in Eclipse. As you hover over each tab, a new Shell is created and disposed on each MouseHover event.</description>
      <comments>
		<comment id="1" date="2005-07-18 12:41:45 EDT" author="Veronika Irvine">Fixed for 3.2 in HEAD &gt; 20050718

See CTabFolder version 1.239</comment>
      </comments>
    </buginformation>
    <fixedCommits>
      <commit Id="7cdc97fb7d0af6614dc99064f39072da2ef631af" author="Veronika Irvine" date="2005-07-19 01:39:41"/>
          <file name="bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/CTabFolder.java">
              <method name="hideToolTip" returnType="void" parameters=""/>
          </file>
      </commit>
    </fixedCommits>
  </bug>
  <bug id="104966" opendate="2005-07-24 23:17:00" fixdate="2005-08-05 12:14:00">
    <buginformation>
      <summary>Link displays as enabled when setText called after setEnabled</summary>
      <description>VE 1.1 Running with XP manifest 1. Create a new Visual bean (SWT) 2. Drop a link on the composite 3. Set the enabled property on the link to be disabled 4. Note: the link is now disabled in the preview 5. Close the editor 6. Re-open the editor 7. Observe: link now shows as enabled When you run the application the link shows as enabled, but is actually disabled. If you change the order of the initialization such that the enabled status is set after the text is set it displays correctly. This could be an SWT bug.</description>
      <comments>
		<comment id="1" date="2005-07-26 10:27:00 EDT" author="Jonathan Stinton">hi brock,

i've tried this myself and everything seems to behave as expected.  it doesn't
matter for me which order the setEnabled and setText are.

is the example you gave all that is required to produce this, or is there more
to it.  for instance, what layout is your composite in, what is the text you are
setting for the link, etc.

does the enable work correctly for other controls on your system?

thanks,
-jon</comment>
		<comment id="2" date="2005-07-26 19:22:32 EDT" author="Brock Janiczak">Every other control works as expected.  The only thing i could think of was that
i am using the XP manifest and am using a non standard XP theme (Royale).

Here is a standalone SWT app that shows the problem:
public static void main(String[] args) {
 Display d = Display.getDefault();
 Shell s = new Shell(d);
 s.setLayout(new RowLayout());
 Link l = new Link(s, SWT.NONE);
 l.setEnabled(false);
 l.setText("&lt;a&gt;link&lt;/a&gt;");
 
 s.open();
 while (!s.isDisposed()) {
  if (!d.readAndDispatch()) {
   d.sleep();
  }
 }
}

I think VE is correctly rendering what it can see.  Changing title and moving to
SWT.

This could also be related to bug 103890</comment>
		<comment id="3" date="2005-07-28 12:24:28 EDT" author="Felipe Heidrich">fixed in head &gt; 20050728</comment>
      </comments>
    </buginformation>
    <fixedCommits>
      <commit Id="9fa5fc1bc49fd827821b4fd087f2e3db8ee6639a" author="Felipe Heidrich" date="2005-07-29 01:20:43"/>
          <file name="bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Link.java">
              <method name="setText" returnType="void" parameters="String"/>
          </file>
      </commit>
    </fixedCommits>
  </bug>
  <bug id="90258" opendate="2005-04-05 04:56:00" fixdate="2005-08-11 15:55:00">
    <buginformation>
      <summary>Table item not updated when item count == 1</summary>
      <description>I20050401 (M6) I am using a Table with SWT.VIRTUAL. Everything works fine, except for the case I set the item count to 1, in which case I do not receive an SWT.SetData notification. Tried to reproduce using a modified version of Snippet151, but everything works as expected there. Do you have any idea what could be going wrong? One funny thing is that in the variable view, the debugger displays the updated contents of table.items[0] after calling clearAll(), but I have verified that the data is never ever set. The display fails to update. My code looks like this: ---------------- Table table... table.setItemCount(1); table.clearAll(); ... private void handleSetData(Event event) { TableItem item= (TableItem) event.item; int index= fProposalTable.indexOf(item); ICompletionProposal current= fFilteredProposals[index]; item.setText(current.getDisplayString()); item.setImage(current.getImage()); item.setData(current); } -----------------</description>
      <comments>
		<comment id="1" date="2005-04-05 05:47:55 EDT" author="Tom Hofmann">This also happens in cases with itemCount &gt; 1. In todays I-Build (or what we put
in), I can reproduce this by doing the following:

- have this class (caret at |):

package codeAssist;

public class Virtual {
  void xfoobar() {}
  void xfoocar() {}

  void test() {
    xfoo|
  }
}

- invoke code assist (don't use incremental completion)
-&gt; get two proposals for the two xfoo methods

- press Backspace
-&gt; still two items in the proposal list, but only the text of the second is
shown. The first one is correctly displayed when the selection changes.</comment>
		<comment id="2" date="2005-04-14 23:52:32 EDT" author="Billy Biggs">Steve, I figured this one out.  We need to clear lastDataIndex when we clear an
item.</comment>
		<comment id="3" date="2005-04-14 23:53:49 EDT" author="Billy Biggs">*** Bug 90441 has been marked as a duplicate of this bug. ***</comment>
		<comment id="4" date="2005-04-15 09:04:47 EDT" author="Steve Northover">Fix it!</comment>
		<comment id="5" date="2005-04-15 10:32:31 EDT" author="Billy Biggs">Fixed &gt; 20050415</comment>
		<comment id="6" date="2005-05-10 11:29:41 EDT" author="Billy Biggs">Verified on I20050510-0010</comment>
		<comment id="7" date="2005-08-11 15:55:12 EDT" author="Mark McLaren">*** Bug 106535 has been marked as a duplicate of this bug. ***</comment>
      </comments>
    </buginformation>
    <fixedCommits>
      <commit Id="c6ce818f8e4807818aaed4c8009b0378465a5c15" author="Billy Biggs" date="2005-04-15 11:32:18"/>
          <file name="bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Table.java">
          </file>
      </commit>
    </fixedCommits>
  </bug>
  <bug id="107145" opendate="2005-08-16 14:17:00" fixdate="2005-08-16 15:03:00">
    <buginformation>
      <summary>Javadoc can not refer to package protected methods</summary>
      <description>In the javadoc for Widget.destroyWidget, we refer to package protected methods. These must be removed. We can just put them in the comments or remove them entirely. The following build errors are caused by this problem: /builds/I200508161235/src/plugins/org.eclipse.platform.doc.isv/../org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Widget.java:333: warning - Tag &amp;#64;see: can't find releaseChild in org.eclipse.swt.widgets.Widget /builds/I200508161235/src/plugins/org.eclipse.platform.doc.isv/../org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Widget.java:333: warning - Tag &amp;#64;see: can't find releaseWidget in org.eclipse.swt.widgets.Widget /builds/I200508161235/src/plugins/org.eclipse.platform.doc.isv/../org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Widget.java:333: warning - Tag &amp;#64;see: can't find releaseHandle in org.eclipse.swt.widgets.Widget</description>
      <comments>
		<comment id="1" date="2005-08-16 14:21:21 EDT" author="Veronika Irvine">Moved references into the description.</comment>
      </comments>
    </buginformation>
    <fixedCommits>
      <commit Id="cccbf7cc39678ca0d272b14dcb7a6b7155f390e1" author="Veronika Irvine" date="2005-08-17 03:19:49"/>
          <file name="bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Widget.java">
              <method name="destroyWidget" returnType="void" parameters=""/>
          </file>
      </commit>
    </fixedCommits>
  </bug>
  <bug id="92013" opendate="2005-04-19 19:51:00" fixdate="2005-08-18 00:54:00">
    <buginformation>
      <summary>DCR - Need SWT.VERTICAL style for CoolBar</summary>
      <description>There seems to be no way to tell CoolBar to orient itself vertically i.e. the drag handle is always rendered as a vertical line/vertical dots. I wanted to use CoolBar/CoolItem for the intro launch bar so that I can get the OS-specific handle rendering but I need to be able to position CoolBar vertically when in the LEFT and RIGHT window trim areas. In this orientation, CoolItem handle will be rendered horizontally (as horizontal line/dots).</description>
      <comments>
		<comment id="1" date="2005-04-20 08:47:36 EDT" author="Steve Northover">It looks like there might be some support for this in the MSDN.  We can 
investigate this post 3.1.</comment>
		<comment id="2" date="2005-04-20 11:52:49 EDT" author="Felipe Heidrich">MSDN provides RBS_VERTICALGRIPPER and CCS_VERT.</comment>
		<comment id="3" date="2005-04-20 11:56:37 EDT" author="Dejan Glozic">Since it exists, any change we can get it in 3.1 if it does not involve too 
much work?</comment>
		<comment id="4" date="2005-04-20 11:57:56 EDT" author="Dejan Glozic">It would be a noble thing to do - Intro would use native gripper for the 
welcome launch bar and support SWT 'all native' vision :-).</comment>
		<comment id="5" date="2005-04-20 12:09:48 EDT" author="Steve Northover">We can investigate but I don't believe we have time to do this for 3.1.</comment>
		<comment id="6" date="2005-04-20 12:11:25 EDT" author="Felipe Heidrich">Dejan, I don't want be a wet blanket but it would be a lot of work to be done 
in time for 3.1.
a) In windows Coolbar is the most buggy widget ever
b) In emulated version all dragging, wrapping, resizing, etc code would need 
to be reviewed and rewritten.</comment>
		<comment id="7" date="2005-04-20 13:16:04 EDT" author="Dejan Glozic">My condition was that it should not be too much work. It appears it is not the 
case, so let's leave it for after 3.1</comment>
		<comment id="8" date="2005-08-10 14:47:15 EDT" author="Felipe Heidrich">fixed in head &gt; 20050810</comment>
		<comment id="9" date="2005-08-10 23:17:03 EDT" author="Ed Burnette">Cool! (no pun intended)
Do you have a screenshot I could stick on my web site?</comment>
		<comment id="10" date="2005-08-11 11:04:40 EDT" author="Felipe Heidrich">Created attachment 26020 [details]
vertical coolbar screenshot

you can certantly make a better screenshot, here is one from the app i wrote to
test vertical coolbar running on winxp, xp classic theme.</comment>
      </comments>
    </buginformation>
    <fixedCommits>
      <commit Id="f2eaf4de8227661ef29880af04d52e370a50fc82" author="Felipe Heidrich" date="2005-08-06 05:39:13"/>
          <file name="bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/CoolBar.java">
          </file>
          <file name="bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/CoolItem.java">
              <method name="computeSize" returnType="Point" parameters="int int"/>
          </file>
      </commit>
    </fixedCommits>
  </bug>
  <bug id="96053" opendate="2005-05-19 22:06:00" fixdate="2005-08-29 08:22:00">
    <buginformation>
      <summary>Spinner: Pressing buttons should focus spinner and select text</summary>
      <description>SWT-win32, v3135 (3.1M7) The standard behaviour for Windows spinner widgets is to set focus to the text control and select its text when the user clicks on the up or down button. Right now, this does not happen. Note that you get this for free if you implement the suggestion in &lt;span class="bz_closed"&gt;&lt;a href="show_bug.cgi?id=94603#c3" title="RESOLVED FIXED - Spinner does not look like Windows standard one"&gt;bug 94603 comment #3&lt;/a&gt;&lt;/span&gt;.</description>
      <comments>
		<comment id="1" date="2005-05-20 18:16:05 EDT" author="Felipe Heidrich">&gt; Note that you get this for free if you implement the suggestion
&gt; in bug 94603 comment #3.
I wish I could follow the suggestion. Actually, in the past we used to set 
autobuddy, autobuddy int, etc. We had to remove it to be able to implement 
floating point.</comment>
		<comment id="2" date="2005-05-20 20:58:08 EDT" author="Brock Janiczak">I never suggested using autobuddy int which would indeed break the floating
point functionality.  I just tried this in the control example and it works fine
with decimal places.  It does look a bit odd when the text box has no border though.</comment>
		<comment id="3" date="2005-05-24 16:38:04 EDT" author="Felipe Heidrich">I could use autobuddy only when SWT.BORDER is set (fixing bug94603) and when 
SWT.BORDER is not set I could fix this during the WM_LBUTTONDOWN callback of 
the updown control.


Brock, sorry, I confused UDS_AUTOBUDDY/UDS_SETBUDDYINT functionality.</comment>
		<comment id="4" date="2005-07-26 18:19:19 EDT" author="Felipe Heidrich">fixed in HEAD &gt; 20050726

UDS_AUTOBUDDY always set fixes this problem.</comment>
		<comment id="5" date="2005-08-29 08:22:05 EDT" author="Billy Biggs">*** Bug 108237 has been marked as a duplicate of this bug. ***</comment>
      </comments>
    </buginformation>
    <fixedCommits>
      <commit Id="afa1f360d20e2a4c5363a65a8a165903a6314c9f" author="Felipe Heidrich" date="2005-07-27 07:15:33"/>
      </commit>
    </fixedCommits>
  </bug>
  <bug id="105772" opendate="2005-08-02 06:50:00" fixdate="2005-08-29 16:07:00">
    <buginformation>
      <summary>Strange background color of label on text search page</summary>
      <description>I20050726-1222 SWT has enabled native support for correct background color of tab bocks. However one label inside the search page has a strange background color now.</description>
      <comments>
		<comment id="1" date="2005-08-02 06:51:22 EDT" author="Dirk Baeumer">Created attachment 25545 [details]
Screen shot</comment>
		<comment id="2" date="2005-08-02 07:07:43 EDT" author="Martin Aeschlimann">The problematic widget is a CLabel, no special or anny background manipulations
done by the text search dialog
page.(org.eclipse.search/org.eclipse.search.internal.ui.text.TextSearchPage).

Moving to SWT.</comment>
		<comment id="3" date="2005-08-08 11:25:41 EDT" author="Steve Northover">VI to fix this using SWT.DOUBLE_BUFFERED.</comment>
		<comment id="4" date="2005-08-09 06:37:54 EDT" author="Martin Aeschlimann">*** Bug 106444 has been marked as a duplicate of this bug. ***</comment>
		<comment id="5" date="2005-08-09 17:36:52 EDT" author="Billy Biggs">Didn't make it for M1.</comment>
		<comment id="6" date="2005-08-29 16:07:13 EDT" author="Veronika Irvine">Added SWT.DOUBLE_BUFFERED support</comment>
      </comments>
    </buginformation>
    <fixedCommits>
      <commit Id="ed8e699d82d44d808052f8c255273ae30e39ece7" author="Veronika Irvine" date="2005-08-30 05:06:09"/>
          <file name="bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/CLabel.java">
          </file>
      </commit>
    </fixedCommits>
  </bug>
  <bug id="84609" opendate="2005-02-07 13:35:00" fixdate="2005-09-26 13:20:00">
    <buginformation>
      <summary>TableColumn has NPE while calling pack() on last column</summary>
      <description>Consider followed code, table has only 3 columns: // refresh table on new data lvtTable.getColumn(0).pack(); lvtTable.getColumn(1).pack(); lvtTable.getColumn(2).pack(); On third call I get caught NPE (in debugger) in TableColumn (line 356), because parent.getColumns() (in TableColumn:354) returns array with 4 elements (always one more as existing in the table), and the last element is always null. My system is WinXP, Eclipse Version: 3.1.0, Build id: I20050202-0800, JDK 1.5.0. 1</description>
      <comments>
		<comment id="1" date="2005-02-07 13:40:41 EST" author="Andrey Loskutov">Similar (and related) NPE is on Table class, line 1577, on releaseWidget() 
method call - the last element in columns[] array is null.</comment>
		<comment id="2" date="2005-02-08 16:43:47 EST" author="Steve Northover">Sorry about that ... temporary bogus code to work around a Windows feature.  
It's now replaced with bogus code ... one more time!</comment>
		<comment id="3" date="2005-02-08 16:44:50 EST" author="Steve Northover">Did I say "bogus" twice?  Meant to say "better" but "bogus" will do.  If not 
fixed for you, please reopen.

Fixed &gt; 20050208</comment>
		<comment id="4" date="2005-09-26 11:24:05 EDT" author="Andrey Loskutov">Verified with 3.1.1 (M20050907-1200)</comment>
		<comment id="5" date="2005-09-26 12:43:26 EDT" author="Steve Northover">Thanks.  BTW, the fix is not in 3.1.1 but it's in the HEAD stream for 3.2.</comment>
		<comment id="6" date="2005-09-26 13:20:00 EDT" author="Andrey Loskutov">Hmm.. I have definitely tested it *in debugger* before removing extra try/catch 
blocks from my workaround, and I haven't seen any exception. My code was not 
changed since the first bug comment. Did you probably means "3.1 head"?</comment>
      </comments>
    </buginformation>
    <fixedCommits>
      <commit Id="8b3cbf3b5eee3deb1dafe90fe80e8c033230f02c" author="Veronika Irvine" date="2005-02-08 07:44:54"/>
          <file name="bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Table.java">
              <method name="wmNotifyChild" returnType="LRESULT" parameters="int int"/>
          </file>
          <file name="bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/TableColumn.java">
              <method name="pack" returnType="void" parameters=""/>
          </file>
      </commit>
    </fixedCommits>
  </bug>
  <bug id="99266" opendate="2005-06-09 16:51:00" fixdate="2005-10-14 15:17:00">
    <buginformation>
      <summary>[Viewers] Bogus empty rows at the beginning of a table</summary>
      <description>RC1: To reproduce this issue run the attached code. The table gets displayed with few blank lines at the top.</description>
      <comments>
		<comment id="1" date="2005-06-09 16:52:52 EDT" author="Sergey Prigogin">Created attachment 22748 [details]
Code snippet that reproduces the problem</comment>
		<comment id="2" date="2005-06-09 16:54:38 EDT" author="Sergey Prigogin">Created attachment 22749 [details]
Screen shot showing the problem</comment>
		<comment id="3" date="2005-06-10 16:41:06 EDT" author="Steve Northover">Not again!</comment>
		<comment id="4" date="2005-06-14 12:12:22 EDT" author="Michael Van Meekeren">talked with SN and I agree with fixing this for RC3</comment>
		<comment id="5" date="2005-06-14 12:59:31 EDT" author="Steve Northover">Fixed &gt; 20050614</comment>
		<comment id="6" date="2005-07-18 11:54:20 EDT" author="Sergey Prigogin">Created attachment 24919 [details]
New test case that reproduces the problem

This new test case reproduces the same problem with 3.1 GA.</comment>
		<comment id="7" date="2005-07-18 12:02:39 EDT" author="Sergey Prigogin">Reopened since the problem still happens with a sligtly modified test code. 
It's pretty bizzarre that the bad behavior is sensitive to a number of 
seemingly unrelated factors. For example, commenting out
     Text text = new Text(shell, SWT.BORDER);
line makes the empty space go away.

Please give this problem high priority since it is serious and does not have a 
workaround. Is it possible to create a binary replacement plugin with a fix 
when it's ready? </comment>
		<comment id="8" date="2005-07-20 09:34:27 EDT" author="Steve Northover">Fixed &gt; 20050720

This is a really tough Windows bug (caused when the table is very small and 
someone resizes the columns from within a resize listener, causing another 
resize event to happen when the scroll bars are hidden and shown).  I have had 
many different attempts at working around this problem in each version of the 
toolkit.  The latest approach still seems good but I missed a case which you 
code uncovered.  Thanks!

I agree that the problem is serious.  It can be worked around in 3.1 by 
ensuring that a table with resize listeners has exactly one parent.</comment>
		<comment id="9" date="2005-07-20 11:22:42 EDT" author="Sergey Prigogin">Steve, I'm not sure I understand the statement "table with resize listeners has 
exactly one parent". Does it mean that the parent has to be Shell, not 
Composite? Or does it mean that it has to be the only child of its parent?

Our company is very close to release of an RCP application based on Eclipse 
3.1. This application uses a lot of tables controlled by TableViewers and is 
greatly affected by this bug. Is it possible to get a binary build of SWT (for 
Win32) with your latest fix?</comment>
		<comment id="10" date="2005-07-20 11:32:49 EDT" author="Steve Northover">I can attach the patch to 3.1 to this bug report.</comment>
		<comment id="11" date="2005-07-20 12:18:50 EDT" author="Sergey Prigogin">Thanks a lot. That would be very helpful.</comment>
		<comment id="12" date="2005-07-20 16:56:19 EDT" author="Steve Northover">Created attachment 25091 [details]
Patch for 99266</comment>
		<comment id="13" date="2005-07-20 17:02:17 EDT" author="Sergey Prigogin">I don't have an environment set up to build SWT. Is it possible to attach a 
fixed version of org.eclipse.swt_3.1.0.jar?</comment>
		<comment id="14" date="2005-07-20 17:05:07 EDT" author="Sergey Prigogin">Actually it would be fine if you can attach just Table.class.</comment>
		<comment id="15" date="2005-07-20 17:10:04 EDT" author="Sergey Prigogin">Correction to comment 13. I meant org.eclipse.swt.win32.win32.x86_3.1.0.jar.</comment>
		<comment id="16" date="2005-07-22 13:50:49 EDT" author="Sergey Prigogin">With build N20050722-0010 I was still able to reproduce the issue although not 
with a simple standalone program yet. The scenario in which the table gets 
empty rows includes deletion of rows from the bottom of the table so that the 
table has a scroll bar before the deletion, but no scroll bar after the 
deletion.

I will try to create a simple program that reproduces the problem in this 
scenario.</comment>
		<comment id="17" date="2005-07-23 21:09:28 EDT" author="Sergey Prigogin">It looks like the scenario with deletion of rows only leads to empty rows at 
the top of the table when the table has a dynamic column layout, which resizes 
columns so that they always occupy the whole table width. I was able to work 
around the problem by subclassing TableViewer and disabling layout during 
remove operation:

  public void remove(Object[] elements) {
    Table table = getTable();
    table.setLayoutDeferred(true);
    try {
      super.remove(elements);
    } finally {
      table.setLayoutDeferred(false);
    }
  }</comment>
		<comment id="18" date="2005-07-25 09:10:25 EDT" author="Steve Northover">Can you provide code some example code for me to debug?</comment>
		<comment id="19" date="2005-07-25 18:25:46 EDT" author="Sergey Prigogin">Created attachment 25276 [details]
Test case with removal of rows

Here is code that reproduces empty space when a bunch of rows is deleted.</comment>
		<comment id="20" date="2005-07-25 19:45:01 EDT" author="Steve Northover">Sigh.  The original example code you gave me has the #$!%!@# blank lines, even 
before I press the remove button.</comment>
		<comment id="21" date="2005-07-25 19:51:15 EDT" author="Sergey Prigogin">Strange. I'm running with SWT from build N20050722-0010 and I don't see empty 
space before rows removal.</comment>
		<comment id="22" date="2005-07-25 19:54:35 EDT" author="Steve Northover">Ok, I have another work around.  Give me a day or two to test it.</comment>
		<comment id="23" date="2005-07-26 09:25:51 EDT" author="Steve Northover">Fixed (again) &gt; 20050726</comment>
		<comment id="24" date="2005-07-27 21:20:37 EDT" author="Sergey Prigogin">Is the fix in 3.1.1 branch yet?

I've tried to run Test case with removal of rows with SWT from M20050727-1200 
and got the empty space before even doing anything. The empty space goes away 
after I click around in the table and appears again after removing of rows.</comment>
		<comment id="25" date="2005-07-28 19:52:40 EDT" author="Sergey Prigogin">Reopened since it still does not work.</comment>
		<comment id="26" date="2005-08-02 10:57:14 EDT" author="Steve Northover">This WORKSFORME:

1) Run Bug99266RemoveScenario
2) Select 'Name 13'
3) Shift Select 'Name 9' (a bunch of items get selected)
4) Press 'Remove Rows'

Can you give me a series of steps that fails for you?</comment>
		<comment id="27" date="2005-08-03 00:19:23 EDT" author="Sergey Prigogin">With I20050802-0800 I'm getting no empty rows when Bug99266RemoveScenario comes 
up and one empty row at the top after following the steps in comment 26. This 
test ran over a remote desktop connection. Tomorrow I will run the same test 
locally.</comment>
		<comment id="28" date="2005-08-03 12:11:26 EDT" author="Sergey Prigogin">When running locally the test has exactly the same behavior as described in 
comment 27. Screen resolution is set to 120 DPI, font size normal.

I'm puzzled by the fact that I20050802-0800 exhibits different behavior than 
M20050727-1200. Behavior with M20050727-1200 is described in comment 24 -- four 
empty rows upfront, one empty row after deletion.</comment>
		<comment id="29" date="2005-08-10 12:16:52 EDT" author="Sergey Prigogin">Any progress so far? Was it put on a back burner?</comment>
		<comment id="30" date="2005-08-10 12:27:13 EDT" author="Steve Northover">It's on the back burner because it WORKSFORME.  Got any ideas?</comment>
		<comment id="31" date="2005-08-10 12:31:42 EDT" author="Sergey Prigogin">How do you explain differences in behavior I got from I20050802-0800 and from 
M20050727-1200? Is it possible that we are simply running different versions of 
SWT?</comment>
		<comment id="32" date="2005-08-10 12:48:55 EDT" author="Steve Northover">&gt;Sigh.  The original example code you gave me has the #$!%!@# blank lines, 
&gt;even before I press the remove button.

We were already seeing different behavior.  How would you like to proceed?</comment>
		<comment id="33" date="2005-08-10 12:53:21 EDT" author="Steve Northover">It must be a different JFace.  I'm running SWT from HEAD, and JFace 3.1.0 from 
the JAR's.</comment>
		<comment id="34" date="2005-08-10 13:09:22 EDT" author="Sergey Prigogin">Can you try plain M20050727-1200 to make sure that we are on the same page?</comment>
		<comment id="35" date="2005-08-17 20:50:52 EDT" author="Sergey Prigogin">Steeve, here is something that I don't understand. This bug is targeted for 
3.1.1 and therefore has to be tested with 3.1.1. How can you make an assertion 
that it works for you if you didn't test it in the environment in which it is 
supposed to be fixed? </comment>
		<comment id="36" date="2005-08-29 17:18:35 EDT" author="Karice McIntyre">Steve, from the comments below, the fix for this appears to be in the 3.2 
stream.  But the bug is targetted for 3.1.1.  Will this be fixed for 3.1.1?  If 
not, the Target field should be changed.</comment>
		<comment id="37" date="2005-08-29 19:09:14 EDT" author="Steve Northover">Sergey is right.  I want the fix to go into 3.1.1 but it doesn't work for him 
(although it WORKSFORME).  I need to resolve the issue as he suggests.

Billy, can you confirm the failure that Sergey is seeing on your Windows 
machine using the code from 3.1.1 stream?</comment>
		<comment id="38" date="2005-09-06 19:26:50 EDT" author="Steve Northover">BB or MVM, does this happen on your machine or in 3.1.x and not HEAD?</comment>
		<comment id="39" date="2005-09-09 11:54:03 EDT" author="Steve Northover">*** Bug 65792 has been marked as a duplicate of this bug. ***</comment>
		<comment id="40" date="2005-09-09 18:35:13 EDT" author="Steve Northover">Ok, the problem happens when remove() causes a scroll bar it be hidden and 
sends a resize event.  I have fixed the problem (again) in HEAD.  BB and VI to 
determine whether the patch is safe enough for 3.1.1.</comment>
		<comment id="41" date="2005-09-16 13:12:55 EDT" author="Karice McIntyre">Steve,Veronika, Billy - if you are going to fix this for 3.1.1, the code should 
be released before the RC2 build on Sept 23rd, for testing purposes.</comment>
		<comment id="42" date="2005-09-19 14:48:55 EDT" author="Sergey Prigogin">I ran the test case with removal of rows with build N20050918-0010 and got:
Exception in thread "main" java.lang.ArrayIndexOutOfBoundsException
 at java.lang.System.arraycopy(Native Method)
 at org.eclipse.swt.widgets.Table.remove(Table.java:1976)
 at org.eclipse.jface.viewers.TableViewer.internalRemove
(TableViewer.java:933)
 at org.eclipse.jface.viewers.TableViewer.access$3(TableViewer.java:910)
 at org.eclipse.jface.viewers.TableViewer$4.run(TableViewer.java:968)
 at org.eclipse.jface.viewers.StructuredViewer.preservingSelection
(StructuredViewer.java:1201)
 at org.eclipse.jface.viewers.TableViewer.remove(TableViewer.java:966)
 at Bug99266RemoveScenario$3.widgetSelected
(Bug99266RemoveScenario.java:134)
 at org.eclipse.swt.widgets.TypedListener.handleEvent
(TypedListener.java:90)
 at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:66)
 at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:884)
 at org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:3194)
 at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:2823)
 at Bug99266RemoveScenario.main(Bug99266RemoveScenario.java:140)</comment>
		<comment id="43" date="2005-09-21 15:57:43 EDT" author="Veronika Irvine">Regarding Comment 42, I have released a fix for this which will be included in
Eclipse 3.2 M2.

Regarding 3.1.1.  The changes have not been tested enough and are too wide
spread to be patched back to 3.1.1.  I think the risk level is too high versus
the benefit to patch this change back at this time.  Perhaps we will be more
comfortable with the changes for a future 3.1.* release.

I am marking this bug report as fixed.  Sergey, can you please confirm that your
problem is fixed in 3.2 M2?</comment>
		<comment id="44" date="2005-09-21 16:00:00 EDT" author="Sergey Prigogin">Sorry, I won't be able to test it soon since I'm leaving on vacation for three 
weeks.</comment>
		<comment id="45" date="2005-09-27 13:07:51 EDT" author="Steve Northover">Fixed &gt; 20050927 (actually, the changes were in M2)

Wow.  This is the 4rth attempt at fixing this problem (really, working around 
the bug in Windows).  I hope that this time the fix will hold.  Sergey, please 
reopen this bug as necessary if not fixed for you in M2.  Thanks for your 
patience.</comment>
		<comment id="46" date="2005-09-27 14:07:16 EDT" author="Rutger Ovidius">Created attachment 27569 [details]
Updated testcase

I get a lot of blank lines in tables.  Here is an updated testcase.  Just click
the button, hopefully you see the same.  (I use 3.2M2 win32)</comment>
		<comment id="47" date="2005-09-27 14:48:50 EDT" author="Billy Biggs">Given that there were reproducable cases in this bug that were fixed in 3.2M2, I
think it's best to file a new bug with your new case.</comment>
		<comment id="48" date="2005-09-27 15:35:11 EDT" author="Rutger Ovidius">Ok, I've opened bug #110864.</comment>
		<comment id="49" date="2005-09-27 16:04:51 EDT" author="Billy Biggs">*** Bug 110864 has been marked as a duplicate of this bug. ***</comment>
		<comment id="50" date="2005-09-27 16:05:22 EDT" author="Billy Biggs">Reopening as the fix will need to change to fix the new case.</comment>
		<comment id="51" date="2005-09-27 16:34:53 EDT" author="Steve Northover">Fixed &gt; 20050927 

Rutger, thanks for finding this right away.  This is a particularly insidious 
Windows bug.  It turns out that Windows sends an unexpected WM_SIZE from 
within WM_SETREDRAW.  We used to check for this case in one of the work around 
attempts but various different strategies have been tried along the way, the 
code got deleted, and the code is needed in the latest attempt.</comment>
		<comment id="52" date="2005-09-27 16:59:16 EDT" author="Rutger Ovidius">I just replaced my Table.java, and it works for the test case, but in my real 
app I use SWT.VIRTUAL, and the blank lines are still there.  When I disable the 
SWT.VIRTUAL the blank rows do not show up.</comment>
		<comment id="53" date="2005-09-27 17:31:49 EDT" author="Steve Northover">!@#$!@$!@#</comment>
		<comment id="54" date="2005-09-27 17:33:57 EDT" author="Rutger Ovidius">Created attachment 27597 [details]
Second update (virtual)

This is an SWT.VIRTUAL testcase.

Click the button twice to see a blank row.  

Or, set variable "cnt" to 20 (instead of 22) and click the button once and
everything disappears.</comment>
		<comment id="55" date="2005-10-12 18:01:47 EDT" author="Sergey Prigogin">Tested I20051012-1200.
Was not able to reproduce empty rows with any of the test cases: "Test case 
with removal of rows", "Updated testcase" and "Second update (virtual)" with 
both cnt=22 and cnt=20.</comment>
		<comment id="56" date="2005-10-13 00:30:38 EDT" author="Rutger Ovidius">SWT 3209 
swt-I20051012-1200-win32-win32-x86
eclipse-SDK-I20051012-1200-win32.zip 
jface cvs 

The virtual one still leaves blank rows for me.</comment>
		<comment id="57" date="2005-10-14 15:17:48 EDT" author="Billy Biggs">Fixed &gt; 20051014

Avoiding WM_SIZE from LVM_SETITEMCOUNT seems to fix both cases (cnt=20 and
cnt=22) from the test case posted in comment #54.</comment>
      </comments>
    </buginformation>
    <fixedCommits>
      <commit Id="7a1d67f746b314a594406116148490b4cb66e7bd" author="Steve Northover" date="2005-06-14 12:09:35"/>
          <file name="bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Table.java">
          </file>
      </commit>
    </fixedCommits>
  </bug>
  <bug id="113971" opendate="2005-10-27 10:26:00" fixdate="2005-10-28 14:16:00">
    <buginformation>
      <summary>Test failures in Tree on N20051027-0010</summary>
      <description>The &amp;quot;org.eclipse.ui.tests&amp;quot; had test failures on MacOS X last night. The failures were in Tree code. One was a NPE, which I believe has already been fixed. The other is as follows: java.lang.ArrayIndexOutOfBoundsException at java.lang.System.arraycopy(Native Method) at org.eclipse.swt.widgets.Tree.createItem(Tree.java:714) at org.eclipse.swt.widgets.TreeItem.&amp;lt;init&amp;gt;(TreeItem.java:191) at org.eclipse.swt.widgets.TreeItem.&amp;lt;init&amp;gt;(TreeItem.java:148) at org.eclipse.jface.viewers.TreeViewer.newItem(TreeViewer.java:507) at org.eclipse.jface.viewers.AbstractTreeViewer.updatePlus(AbstractTreeViewer.java:1875) at org.eclipse.jface.viewers.AbstractTreeViewer.internalRefresh(AbstractTreeViewer.java:1235) at org.eclipse.jface.viewers.AbstractTreeViewer.internalRefresh(AbstractTreeViewer.java:1201) at org.eclipse.jface.viewers.AbstractTreeViewer.internalRefresh(AbstractTreeViewer.java:1188) at org.eclipse.jface.viewers.StructuredViewer$7.run(StructuredViewer.java:1264) at org.eclipse.jface.viewers.StructuredViewer.preservingSelection(StructuredViewer.java:1201) at org.eclipse.jface.viewers.StructuredViewer.refresh(StructuredViewer.java:1262) at org.eclipse.jface.tests.viewers.TestModelContentProvider.doStructureChange(TestModelContentProvider.java:78) at org.eclipse.jface.tests.viewers.TestModelContentProvider.testModelChanged(TestModelContentProvider.java:130) at org.eclipse.jface.tests.viewers.TestModel.fireModelChanged(TestModel.java:38) at org.eclipse.jface.tests.viewers.TestElement.addChild(TestElement.java:69) at org.eclipse.jface.tests.viewers.TestElement.addChild(TestElement.java:63) at org.eclipse.jface.tests.viewers.AbstractTreeViewerTest.testRefreshWithAddedChildren(AbstractTreeViewerTest.java:161) at org.eclipse.test.EclipseTestRunner.run(EclipseTestRunner.java:330) at org.eclipse.test.EclipseTestRunner.run(EclipseTestRunner.java:204) at org.eclipse.test.CoreTestApplication.runTests(CoreTestApplication.java:35) at org.eclipse.test.CoreTestApplication.run(CoreTestApplication.java:31) at org.eclipse.core.internal.runtime.PlatformActivator$1.run(PlatformActivator.java:226) at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:386) at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:165) at org.eclipse.core.launcher.Main.invokeFramework(Main.java:338) at org.eclipse.core.launcher.Main.basicRun(Main.java:282) at org.eclipse.core.launcher.Main.run(Main.java:977) at org.eclipse.core.launcher.Main.main(Main.java:952)</description>
      <comments>
		<comment id="1" date="2005-10-27 15:06:56 EDT" author="Dirk Baeumer">The JDT/UI test cases fail due to a different exception in the tree. The
exception is:

Caused by: java.lang.NullPointerException
at org.eclipse.swt.widgets.Tree.itemNotificationProc(Tree.java:2049)
at org.eclipse.swt.widgets.Display.itemNotificationProc(Display.java:2220)
at org.eclipse.swt.internal.carbon.OS.RemoveDataBrowserItems(Native Method)
at org.eclipse.swt.widgets.Tree.destroyItem(Tree.java:884)
at org.eclipse.swt.widgets.TreeItem.destroyWidget(TreeItem.java:301)
at org.eclipse.swt.widgets.Widget.release(Widget.java:1437)
at org.eclipse.swt.widgets.Widget.dispose(Widget.java:623)
at
org.eclipse.jface.viewers.AbstractTreeViewer.internalRemove(AbstractTreeViewer.java:1312)
at org.eclipse.jface.viewers.AbstractTreeViewer$6.run(AbstractTreeViewer.java:1422)
at
org.eclipse.jface.viewers.StructuredViewer.preservingSelection(StructuredViewer.java:1201)
at org.eclipse.jface.viewers.AbstractTreeViewer.remove(AbstractTreeViewer.java:1420)
at
org.eclipse.jdt.internal.ui.search.LevelTreeContentProvider.elementsChanged(LevelTreeContentProvider.java:215)
at
org.eclipse.jdt.internal.ui.search.JavaSearchResultPage.elementsChanged(JavaSearchResultPage.java:319)
at
org.eclipse.search.ui.text.AbstractTextSearchViewPage.runBatchedUpdates(AbstractTextSearchViewPage.java:1025)
at
org.eclipse.search.ui.text.AbstractTextSearchViewPage.access$0(AbstractTextSearchViewPage.java:1015)
at
org.eclipse.search.ui.text.AbstractTextSearchViewPage$UpdateUIJob.runInUIThread(AbstractTextSearchViewPage.java:132)
at org.eclipse.ui.progress.UIJob$1.run(UIJob.java:93)
at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:35)
at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:123)
... 63 more

To note is that this exception happens in a async runnable which causes another
NPE in org.eclipse.swt.SWTException

org.eclipse.swt.SWTException: Failed to execute runnable
(java.lang.NullPointerException)
at org.eclipse.swt.SWT.error(SWT.java:3262)
at org.eclipse.swt.SWT.error(SWT.java:3185)
at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:126)
at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:3117)
at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:2902)
at
org.eclipse.jface.operation.ModalContext$ModalContextThread.block(ModalContext.java:153)
at org.eclipse.jface.operation.ModalContext.run(ModalContext.java:303)
at
org.eclipse.jface.dialogs.ProgressMonitorDialog.run(ProgressMonitorDialog.java:453)
at
org.eclipse.ui.internal.progress.ProgressMonitorJobsDialog.run(ProgressMonitorJobsDialog.java:261)
at org.eclipse.ui.internal.progress.ProgressManager$3.run(ProgressManager.java:866)
at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:69)
at
org.eclipse.ui.internal.progress.ProgressManager.busyCursorWhile(ProgressManager.java:900)
at
org.eclipse.ui.internal.progress.ProgressManager.busyCursorWhile(ProgressManager.java:876)
at
org.eclipse.jdt.internal.junit.util.TestSearchEngine.findTests(TestSearchEngine.java:134)
at
org.eclipse.jdt.internal.junit.launcher.JUnitLaunchShortcut.launchType(JUnitLaunchShortcut.java:113)
at
org.eclipse.jdt.internal.junit.launcher.JUnitLaunchShortcut.searchAndLaunch(JUnitLaunchShortcut.java:103)
at
org.eclipse.jdt.internal.junit.launcher.JUnitLaunchShortcut.launch(JUnitLaunchShortcut.java:78)
at
org.eclipse.debug.internal.ui.launchConfigurations.LaunchShortcutExtension.launch(LaunchShortcutExtension.java:372)
at
org.eclipse.jdt.junit.tests.WrappingSystemTest.launchTests(WrappingSystemTest.java:169)
at
org.eclipse.jdt.junit.tests.WrappingSystemTest.runTests(WrappingSystemTest.java:118)
at
org.eclipse.jdt.junit.tests.WrappingSystemTest.test00characterizeSecondLine(WrappingSystemTest.java:64)
at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22)
at junit.extensions.TestSetup$1.protect(TestSetup.java:19)
at junit.extensions.TestSetup.run(TestSetup.java:23)
at org.eclipse.test.EclipseTestRunner.run(EclipseTestRunner.java:330)
at org.eclipse.test.EclipseTestRunner.run(EclipseTestRunner.java:204)
at org.eclipse.test.UITestApplication$3.run(UITestApplication.java:188)
at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:35)
at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:123)
at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:3117)
at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:2894)
at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:1763)
at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:1727)
at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:371)
at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:143)
at org.eclipse.ui.internal.ide.IDEApplication.run(IDEApplication.java:106)
at org.eclipse.test.UITestApplication.runApplication(UITestApplication.java:131)
at org.eclipse.test.UITestApplication.run(UITestApplication.java:58)
at
org.eclipse.core.internal.runtime.PlatformActivator$1.run(PlatformActivator.java:226)
at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:386)
at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:165)
at org.eclipse.core.launcher.Main.invokeFramework(Main.java:338)
at org.eclipse.core.launcher.Main.basicRun(Main.java:282)
at org.eclipse.core.launcher.Main.run(Main.java:977)
at org.eclipse.core.launcher.Main.main(Main.java:952)</comment>
		<comment id="2" date="2005-10-27 15:07:15 EDT" author="Dirk Baeumer">*** Bug 114027 has been marked as a duplicate of this bug. ***</comment>
		<comment id="3" date="2005-10-27 16:50:28 EDT" author="Veronika Irvine">I have released a fix for this but I am still looking into to it further because
I don't like it.</comment>
		<comment id="4" date="2005-10-28 10:35:49 EDT" author="Douglas Pollock">Now a new set of errors have appeared in N20051028-0010.  These include an NPE 
and several "Widget is disposed" exceptions. 
 </comment>
		<comment id="5" date="2005-10-28 14:16:12 EDT" author="Veronika Irvine">Fixed NPE and widget is disposed errors.   Confirmed by running the UiTestsSuite.

Fixed in HEAD &gt; N20051028</comment>
      </comments>
    </buginformation>
    <fixedCommits>
      <commit Id="30d64d862c2391ce0e5603549fa1ca6337efe7ff" author="Veronika Irvine" date="2005-10-28 05:45:49"/>
          <file name="bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Tree.java">
              <method name="createItem" returnType="void" parameters="TreeItem TreeItem int"/>
          </file>
      </commit>
    </fixedCommits>
  </bug>
  <bug id="112358" opendate="2005-10-12 12:07:00" fixdate="2005-11-10 09:20:00">
    <buginformation>
      <summary>Need a way to create a new Color based on an existing color</summary>
      <description>We need a way to create a new color from an existing color by varying the hue, saturation or brightness.</description>
      <comments>
		<comment id="1" date="2005-11-10 09:20:05 EST" author="Veronika Irvine">In RGB, added a constructor that takes hue, saturation and brightness and add
method getHSB() to query hue, saturation and brightness.</comment>
      </comments>
    </buginformation>
    <fixedCommits>
      <commit Id="2503053f30d7051ae67b1f8960c73f8d3decfc0a" author="Veronika Irvine" date="2005-11-10 11:19:30"/>
          <file name="bundles/org.eclipse.swt/Eclipse SWT/common/org/eclipse/swt/graphics/RGB.java">
          </file>
      </commit>
    </fixedCommits>
  </bug>
  <bug id="82277" opendate="2005-01-05 14:38:00" fixdate="2005-11-17 17:59:00">
    <buginformation>
      <summary>[XP theme] coolbars gradient background</summary>
      <description>a gradient background in coolbars in combination with win xp visula themes will give us an &amp;quot;office 2003 like&amp;quot; toolbar &lt;a href="http://www.eclipse.org/newsportal/article.php?id=16763&amp;amp;group=eclipse.platform.swt"&gt;http://www.eclipse.org/newsportal/article.php?id=16763&amp;amp;group=eclipse.platform.swt&lt;/a&gt;</description>
      <comments>
		<comment id="1" date="2005-01-06 11:59:17 EST" author="Steve Northover">Chrix to investigate this as part of the XP theme background work.</comment>
		<comment id="2" date="2005-07-25 17:47:52 EDT" author="Felipe Heidrich">The coolbar is gradient when running on XP.
You can force the coolbar to be solid on XP by creating it with SWT.FLAT.
The office 2003 coolbar is not an instance of the rebar common control used by 
SWT. Comparing both is not valid.

If you use a Label in a CoolItem it doesn't work well (the transparency 
doesn't work), it is a bug we have. Is this the problem you are having ?</comment>
		<comment id="3" date="2005-11-17 17:59:40 EST" author="Steve Northover">This has been fixed for a while.  Please repen if not FIXEDFORYOU.

NOTE: Make sure you do not use the SWT.FLAT style when creating the CoolBar.</comment>
      </comments>
    </buginformation>
    <fixedCommits>
      <commit Id="0f87afa00740d11186b3c90abf4e454cd53a16c4" author="Felipe Heidrich" date="2005-07-28 01:44:36"/>
          <file name="bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/CoolBar.java">
              <method name="drawThemeBackground" returnType="void" parameters="int int RECT"/>
          </file>
      </commit>
    </fixedCommits>
  </bug>
  <bug id="92341" opendate="2005-04-22 03:37:00" fixdate="2005-11-22 05:16:00">
    <buginformation>
      <summary>DCR - Add SWT.VIRTUAL style to Tree widget</summary>
      <description>Please add a possibility to lazy-load the first tree level (like SWT.VIRTUAL for the table widget).</description>
      <comments>
		<comment id="1" date="2005-04-22 12:58:12 EDT" author="Steve Northover">Yup, tried to do this for 3.1 but ran out of time.</comment>
		<comment id="2" date="2005-05-05 08:04:20 EDT" author="Thomas Derflinger">Steve, please skip your breakfast, lunch, and dinner, we really need this ;)
(just kiddin, on the first part). 

Is it possible to have an experimental version before 3.2? I might even be able
to help you at some point.</comment>
		<comment id="3" date="2005-05-05 09:31:12 EDT" author="Steve Northover">I'm hoping to work on this right after 3.1 ships.</comment>
		<comment id="4" date="2005-05-05 10:01:53 EDT" author="Thomas Derflinger">Super, thank you!</comment>
		<comment id="5" date="2005-06-30 17:07:10 EDT" author="Steve Northover">Code released on Windows as /*public*/.  Working on the other platforms.</comment>
		<comment id="6" date="2005-06-30 17:27:43 EDT" author="Steve Northover">Code released as /*public*/ on Motif.  Still need the code for Mac and GTK.</comment>
		<comment id="7" date="2005-09-21 18:49:28 EDT" author="Steve Northover">Darn, missed M2.  Working to get this into M3.</comment>
		<comment id="8" date="2005-09-26 19:18:13 EDT" author="Steve Northover">VI, any reason this was moved back to SWT-Inbox?</comment>
		<comment id="9" date="2005-09-26 19:54:30 EDT" author="Billy Biggs">Michael.Scharf did that, likely by mistake.  The "reassign bug to owner of
selected component" button is far too close to the Commit button in bugzilla.</comment>
		<comment id="10" date="2005-09-28 04:05:42 EDT" author="Michael Scharf">Sorry, I changed this by accident :-(</comment>
		<comment id="11" date="2005-10-07 14:44:49 EDT" author="Steve Northover">Better version released on Windows (still /*public*/).  Almost there on the 
other platforms.</comment>
		<comment id="12" date="2005-10-08 21:37:43 EDT" author="Michael Scharf">Is there any example of a virtual tree?</comment>
		<comment id="13" date="2005-10-08 22:50:18 EDT" author="Michael Scharf">OK, I created my own snippet:

public static void main (String [] args) {
    final Display display = new Display ();
    final Shell shell = new Shell (display);
    shell.setText ("Virtual Tree");
    shell.setLayout (new FillLayout ());
    final Tree tree = new Tree (shell, SWT.BORDER|SWT.VIRTUAL);
    tree.addListener(SWT.SetData, new Listener() {
        int fN;
        public void handleEvent(Event e) {
            TreeItem item = (TreeItem)e.item;
            TreeItem parent=item.getParentItem();
            String name=getName(item, parent);
            item.setText("Item ("+fN+++") "+name);
            item.setItemCount(10000); // Number of children
        }
        private String getName(TreeItem item, TreeItem parent) {
            if(parent!=null) {
                int i=parent.indexOf(item);
                return getName(parent,parent.getParentItem())+"-"+i;
            }
            return "0";
        }
    });

    tree.setItemCount(1);
    Point size = tree.computeSize (300, SWT.DEFAULT);
    int width = Math.max (300, size.x);
    int height = Math.max (300, size.y);
    shell.setSize (shell.computeSize (width, height));
    shell.open ();
    while (!shell.isDisposed ()) {
        if (!display.readAndDispatch ()) display.sleep ();
    }
    display.dispose ();
}

However, it seems pretty slow on windows, when a node has many children (e.g. 
10,000)....</comment>
		<comment id="14" date="2005-10-08 23:04:15 EDT" author="Michael Scharf">Ok, the problem is: it is very expensive to add the children 
(TreeItem.setItemCount) creates all child nodes, and that seems to
be expensive. Therefore a comibation of Lazy and Virtual tree is better:

public static void main (String [] args) {
    final Display display = new Display ();
    final Shell shell = new Shell (display);
    shell.setText ("Virtual Lazy Tree");
    shell.setLayout (new FillLayout ());
    final Tree tree = new Tree (shell, SWT.BORDER|SWT.VIRTUAL);
    final Random random=new Random(1);
    tree.addListener(SWT.SetData, new Listener() {
        public void handleEvent(Event e) {
            TreeItem item = (TreeItem)e.item;
            TreeItem parent=item.getParentItem();
            String name=getName(item, parent);
            // create a random number of child nodes
            // favor 0 a little bit..
            int n=((int)Math.pow(2,random.nextInt(18)))/16;
            if(parent==null &amp;&amp; n==0)
                n=1;
            item.setText("Item "+name+" ["+n+"]");
            // set the count to 0 ot 1 
            item.setItemCount(n&gt;0?1:0);
            // and remember the number of children is the item data
            // (the expand listener will set the real number)
            item.setData(new Integer(n));
        }
        private String getName(TreeItem item, TreeItem parent) {
            if(parent!=null) {
                int i=parent.indexOf(item);
                return getName(parent,parent.getParentItem())+"-"+i;
            }
            return "0";
        }
    });

    tree.setItemCount(1);
    tree.addListener (SWT.Expand, new Listener () {
        public void handleEvent (final Event event) {
            TreeItem root = (TreeItem) event.item;
            root.setItemCount(((Integer)root.getData()).intValue());
        }
    }); Point size = tree.computeSize (300, SWT.DEFAULT);
    int width = Math.max (300, size.x);
    int height = Math.max (300, size.y);
    shell.setSize (shell.computeSize (width, height));
    shell.open ();
    while (!shell.isDisposed ()) {
        if (!display.readAndDispatch ()) display.sleep ();
    }
    display.dispose ();
}


However, for many child nodes the tree is still inefficient, when scrolling to 
the end of the list.....</comment>
		<comment id="15" date="2005-10-08 23:14:56 EDT" author="Michael Scharf">The problem is that calling TreeItem.indexOf is inefficient if done 
recursively. Therefore, the solution it to avoid calling TreeItem.indexOf 
recursively, by storing the index (the name) in TreeItem...

Now that's realy fast :-) :-D

public static void main (String [] args) {
    final Display display = new Display ();
    final Shell shell = new Shell (display);
    shell.setText ("Virtual Lazy Tree");
    shell.setLayout (new FillLayout ());
    final Tree tree = new Tree (shell, SWT.BORDER|SWT.VIRTUAL);
    final Random random=new Random(1);
    tree.addListener(SWT.SetData, new Listener() {
        public void handleEvent(Event e) {
            TreeItem item = (TreeItem)e.item;
            TreeItem parent=item.getParentItem();
            
            // calling indexOf recursively is very inefficient.
            // therefore remember the tree position in the item
            // itself...
            // That could be dangerous, if the tree gets rearranged...
            String name;
            if(parent==null)
                name=""+tree.indexOf(item);
            else
                name=parent.getData("name")+"-"+parent.indexOf(item);
            item.setData("name",name);
            // create a random number of child nodes
            // favor 0 a little bit..
            int n=((int)Math.pow(2,random.nextInt(19)))/16;
            if(parent==null &amp;&amp; n==0)
                n=1;
            item.setText("Item "+name+" ["+n+"]");
            // set the count to 0 ot 1 
            item.setItemCount(n&gt;0?1:0);
            // and remember the number of children is the item data
            // (the expand listener will set the real number)
            item.setData(new Integer(n));
        }
    });

    tree.setItemCount(1);
    tree.addListener (SWT.Expand, new Listener () {
        public void handleEvent (final Event event) {
            TreeItem root = (TreeItem) event.item;
            root.setItemCount(((Integer)root.getData()).intValue());
        }
    }); Point size = tree.computeSize (300, SWT.DEFAULT);
    int width = Math.max (300, size.x);
    int height = Math.max (300, size.y);
    shell.setSize (shell.computeSize (width, height));
    shell.open ();
    while (!shell.isDisposed ()) {
        if (!display.readAndDispatch ()) display.sleep ();
    }
    display.dispose ();
}</comment>
		<comment id="16" date="2005-10-27 15:26:31 EDT" author="Rutger Ovidius">Re comment #11: ("almost there")

Will this feature make it into 3.2M3?</comment>
		<comment id="17" date="2005-10-27 16:17:06 EDT" author="Steve Northover">We are working on it and looking forward to you using it!</comment>
		<comment id="18" date="2005-10-27 16:42:00 EDT" author="Veronika Irvine">Tree can now be created with the SWT.VIRTUAL style.

Use Tree.addListener(SWT.SetData, listener) to be notified when tree items first
become visible.

New API in Tree - clear(), clearAll(), setItemCount()

New API in TreeItem - clear(), celarAll(), setItemCount()

Example Snippet:

http://dev.eclipse.org/viewcvs/index.cgi/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet202.java?rev=HEAD&amp;content-type=text/vnd.viewcvs-markup</comment>
		<comment id="19" date="2005-10-27 16:51:22 EDT" author="Steve Northover">Fixed &gt; 20051027</comment>
		<comment id="20" date="2005-10-31 16:33:55 EST" author="Ted Williams">Is there a mechanism for invalidating TreeItem attributes?

For example, I have a populated SWT.Virtual Tree. The underlying data has 
changed. I'd like to force SetData events to be fired for all visible TreeItems. 
(I could set the TreeItem fields, but I don't know which TreeItems are current 
visible and I definitely do not want to update data of non-visible nodes.) Tree.
clearAll() is an option, but it will cause a blink, since the items will be set 
from present value to default value and then finally to the new value.</comment>
		<comment id="21" date="2005-11-01 08:57:33 EST" author="Veronika Irvine">Yes, that is what the clear() and clearAll() methods do.</comment>
      </comments>
    </buginformation>
    <fixedCommits>
      <commit Id="7ec2e420459073a76767eaf4412d2bd5b970dc99" author="Steve Northover" date="2005-10-08 03:43:22"/>
          <file name="bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Tree.java">
              <method name="_getBackgroundPixel" returnType="int" parameters=""/>
          </file>
          <file name="bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/TreeColumn.java">
              <method name="pack" returnType="void" parameters=""/>
          </file>
          <file name="bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/TreeItem.java">
              <method name="TreeItem" returnType="null" parameters="Tree int"/>
          </file>
      </commit>
    </fixedCommits>
  </bug>
  <bug id="117574" opendate="2005-11-22 15:22:00" fixdate="2005-11-28 17:40:00">
    <buginformation>
      <summary>RIGHT_TO_LEFT | DOUBLE_BUFFERED don't get along</summary>
      <description>build I20051122-0800 When SWT.RIGHT_TO_LEFT | SWT.DOUBLE_BUFFERED are used the gc clipping is Rect(0,0,0,0) during paint. Example: public static void main(String[] args) { Display display = new Display(); Shell shell = new Shell(display, SWT.SHELL_TRIM | SWT.RIGHT_TO_LEFT | SWT.DOUBLE_BUFFERED); shell.addListener(SWT.Paint, new Listener() { public void handleEvent(Event event) { System.out.println(event.gc.getClipping()); event.gc.drawString(&amp;quot;This is broken &amp;quot; + event.gc.getClipping(), 10, 10); } }); shell.open(); while (!shell.isDisposed()) { if (!display.readAndDispatch()) display.sleep(); } display.dispose (); } Doesn't draw anything. Note: my machine is a win xp bidi enabled.</description>
      <comments>
		<comment id="1" date="2005-11-24 15:43:56 EST" author="Felipe Heidrich">fixed &gt; 20051124</comment>
      </comments>
    </buginformation>
    <fixedCommits>
      <commit Id="6050683e0a29a2ce91eeb18855edde35d92968d3" author="Felipe Heidrich" date="2005-11-25 05:36:24"/>
          <file name="bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Composite.java">
              <method name="WM_PAINT" returnType="LRESULT" parameters="int int"/>
          </file>
      </commit>
    </fixedCommits>
  </bug>
  <bug id="93380" opendate="2005-05-01 22:12:00" fixdate="2005-12-20 15:39:00">
    <buginformation>
      <summary>[DnD] 100% CPU usage when dragging files in the navigator or package explorer</summary>
      <description>Version: 3.1.0 Build id: I20050419-1200 When i drag and drop a file inside the package explorer or navigator views the CPU says at 100% (or 50% when hyperthreading is enabled). Since the CPU usage doesn't go above 50% my guess is that all of the processing time is spent in the event thread (windows doesn't seem to let the virtual CPU on the event thread, hence the 50% number). I do not see this massive use of CPU when dragging an external file into the navigator or when dragging a file out of the navigator. Dragging views/editor is also ok. I will try to get some thread dumps either tonight or tomorrow.</description>
      <comments>
		<comment id="1" date="2005-05-04 05:04:16 EDT" author="Eric Suen">I met the same problem since 3.1M5, and not just package explorer
or navigator views, When DND in Outline(like JavaEditor outline, 
GEF outline), this problem happens.

And I try SWT DND examples(Snippet79, Snippet91, Snippet185), then
everything is fine. I think maybe there are something wrong in class
LocalSelectionTransfer.

Dragging views/editor is ok is because of it use Tracker, not same as DND.

my env is: jdk1.4.2_07, Windows XP SP2</comment>
		<comment id="2" date="2005-05-13 18:49:06 EDT" author="Olivier Oeuillot">*** Bug 94953 has been marked as a duplicate of this bug. ***</comment>
		<comment id="3" date="2005-08-30 11:33:49 EDT" author="Billy Biggs">This sounds suspicious, I'd like to verify that it's not an SWT thing.</comment>
		<comment id="4" date="2005-09-14 11:58:04 EDT" author="Eric Suen">Hi,

   I figure out the problem is DragSource.drag method link 277,
COM.DoDragDrop method. When drag happend, it will callback
Display.foregroundIdleProc(..) method. In SWT examples,
display.getMessageCount() always return 0, but in workbend, 
somehow, it always greater than 0, and that will call wakeThread 
method, cause 100% CPU useage. My temporary solution is in DragSource.drag
method, before call COM.DoDragDrop, call display.runAsyncMessages(true) first,
then everything is fine...

   Hope you find more better solutions.</comment>
		<comment id="5" date="2005-09-14 21:33:56 EDT" author="Eric Suen">Created attachment 27148 [details]
test case

Modified Snippet91 can reproduct the bug, see line 58, so this should be SWT
bugs</comment>
		<comment id="6" date="2005-09-15 09:31:52 EDT" author="Veronika Irvine">Thanks for the snippet.  Great work ferretting out the problem.  We will have a
look at this.  Sounds like an issue with how Display handles asyncExecs.</comment>
		<comment id="7" date="2005-09-23 14:00:13 EDT" author="Mark A. Ziesemer">I'm having the same problem - but not just limited to files.  Moving view tabs 
around causes the same problem.  The worst part is, when running into one of 
these "100% CPU usage"-type problems when using Eclipse over some type of 
remote program such as pcAnywhere, it seems to cause some sort of a race 
condition, and I typically have to have the machine rebooted.

This bug also seems suspiciously similar to bug 88958.  Possibly the same issue?</comment>
		<comment id="8" date="2005-10-13 15:56:24 EDT" author="Randy Hudson">This affects GEF too since we use asyncexec to queue layouts and repainting. 
Our workaround is to force a layout and paint whenever dragover occurs.

Note that when expand or autoscroll feedback hints are used, repeated drop 
events for the same mouse location are desirable since the target may have 
moved under the mouse cursor.</comment>
		<comment id="9" date="2005-11-03 11:59:44 EST" author="Veronika Irvine">Fixed for 3.2 &gt; N20051103 (not included in 3.2 M3)</comment>
		<comment id="10" date="2005-12-20 13:19:34 EST" author="Mark A. Ziesemer">Tested and verified under 3.2M4.  Thanks!!!</comment>
		<comment id="11" date="2005-12-20 15:15:22 EST" author="Randy Hudson">Has this been verified on all platforms?</comment>
		<comment id="12" date="2005-12-20 15:39:39 EST" author="Steve Northover">Are you seeing this on any other platforms?</comment>
      </comments>
    </buginformation>
    <fixedCommits>
      <commit Id="32dee67340c78bb56a81cc5712fbee188555b83d" author="Veronika Irvine" date="2005-11-04 01:59:13"/>
          <file name="bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/win32/org/eclipse/swt/dnd/DragSource.java">
              <method name="drag" returnType="void" parameters=""/>
          </file>
      </commit>
    </fixedCommits>
  </bug>
  <bug id="103976" opendate="2005-07-15 05:05:00" fixdate="2006-02-05 06:48:00">
    <buginformation>
      <summary>Spinner widget should provide setValues() method like Slider</summary>
      <description>Especially since Spinner is so picky about the order you set the values when you set them individually, it's a pain to get right. It'd be really nice to have this method: setValues(int selection, int minimum, int maximum, int digits, int increment, int pageIncrement)</description>
      <comments>
		<comment id="1" date="2005-07-21 18:21:06 EDT" author="Steve Northover">Sounds right to me.  Note that Slider should probably also have this method.</comment>
		<comment id="2" date="2005-07-22 03:18:23 EDT" author="David Walser">Actually Slider already has this method (except it has thumb instead of digits).
 That's where I got the idea :o)</comment>
		<comment id="3" date="2005-07-28 12:31:57 EDT" author="Felipe Heidrich">Steve, did you mean Scale also should have setValues() ?</comment>
		<comment id="4" date="2005-07-28 13:02:19 EDT" author="Steve Northover">All of the range widgets (the ones with the concept of minimum and maxumum) 
should have this method.</comment>
		<comment id="5" date="2006-01-25 21:28:04 EST" author="David Walser">Just a reminder on this bug.  If you plan to implement it, the API freeze is coming up soon.</comment>
		<comment id="6" date="2006-01-26 12:21:48 EST" author="Steve Northover">FH, you should just to this, right?</comment>
		<comment id="7" date="2006-01-26 17:37:21 EST" author="Felipe Heidrich">you got it.
I added Spinner#setValues(int selection, int minimum, int maximum, int digits, int increment, int pageIncrement) to al our platforms.

fixed &gt; 20060126</comment>
      </comments>
    </buginformation>
    <fixedCommits>
      <commit Id="76867498f9fb44198c4df2f0d2534a34f0b82ca1" author="Felipe Heidrich" date="2006-01-27 06:22:04"/>
          <file name="bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Spinner.java">
              <method name="setToolTipText" returnType="void" parameters="Shell String"/>
          </file>
      </commit>
    </fixedCommits>
  </bug>
  <bug id="106289" opendate="2005-08-06 19:27:00" fixdate="2006-02-18 23:39:00">
    <buginformation>
      <summary>Blurry Tree text in second column</summary>
      <description>When running the sample Tree-with-columns snippet (Snippet170) I'm getting 'blurry' text in columns 2 and 3 after selecting an item. It's like the antialiasing has been applied many times.</description>
      <comments>
		<comment id="1" date="2005-08-06 19:31:17 EDT" author="Mark McLaren">Created attachment 25812 [details]
Blurry text in columns 2 and 3

Attaching a screenshot of problem.  Note that the more you change the selected
tree item, the more blurry the text in columns 2 and 3 gets.</comment>
		<comment id="2" date="2005-08-08 11:13:41 EDT" author="Steve Northover">This WORKSFORME.  Are there some Windows settings I need to do to make this 
happen on my machine?</comment>
		<comment id="3" date="2005-08-08 18:18:25 EDT" author="Mark McLaren">Sorry should have mentioned I have enabled 'Cleartype', Microsoft's nice little
antialising feature.  

Go to Control Panel -&gt; Display -&gt; Appearance, and select 'Clear Type'.  

Also, I'm using Windows XP Profession with SP2.</comment>
		<comment id="4" date="2005-08-09 10:54:21 EDT" author="Steve Northover">Ok, I can make it happen now.</comment>
		<comment id="5" date="2005-08-10 09:59:32 EDT" author="Steve Northover">Fixed &gt; 20050810</comment>
		<comment id="6" date="2005-09-09 14:46:25 EDT" author="Veronika Irvine">This has not been patched to 3.1.1.
Reopening to consider for 3.1.1.</comment>
		<comment id="7" date="2005-09-09 16:29:41 EDT" author="Billy Biggs">Fixed in the maintenance stream &gt; 20050909.</comment>
		<comment id="8" date="2005-10-06 15:51:12 EDT" author="Veronika Irvine">Backed out change from 3.1.1 because it caused bug 111836</comment>
		<comment id="9" date="2006-02-17 12:25:12 EST" author="Florian Priester">The problem is visible again in versions &gt;= 3223. This bug should be reopened.</comment>
		<comment id="10" date="2006-02-17 12:54:42 EST" author="Steve Northover">Ok then.</comment>
		<comment id="11" date="2006-02-18 23:39:58 EST" author="Steve Northover">Fixed &gt; 20060218 (again)

With all the recent changes to Tree, I keep forgetting that it is necessary to always fill the background where the text is drawn (ie. I fall for OS.SetBkMode (hDC, OS.TRANSPARENT)).  Thanks for keeping me honest.  Hopefully I won't fall for it again for 3.2!</comment>
      </comments>
    </buginformation>
    <fixedCommits>
      <commit Id="d2cc3b36961e1b577bb29d7169b1b241e35d3b1a" author="Steve Northover" date="2005-08-10 10:59:05"/>
          <file name="bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Tree.java">
              <method name="wmNotifyChild" returnType="LRESULT" parameters="int int"/>
          </file>
      </commit>
    </fixedCommits>
  </bug>
  <bug id="104150" opendate="2005-07-16 19:58:00" fixdate="2006-03-15 15:21:00">
    <buginformation>
      <summary>[Patch] Table cursor separated from table selection when clicking on grid lines or empty space</summary>
      <description>SWT-win32, v3138 (3.1-final) When using a table cursor, there are two kinds of table regions that have the potential to separate the table cursor from the table selection when clicked on: 1) grid lines (table.getLinesVisible() == true) 2) empty space to the left of the first cell of each row (SWT.FULL_SELECTION) Expected behaviour: No matter which part of the table the user clicks on, the table cursor should follow the table selection as closely as possible if the selection is changed as a result of the click. To reproduce the problem, use snippet 96 with an added table.setLinesVisible(true).</description>
      <comments>
		<comment id="1" date="2005-07-16 19:59:53 EDT" author="Florian Priester">Created attachment 24888 [details]
Screenshot illustrating the two cases</comment>
		<comment id="2" date="2005-07-16 20:04:19 EDT" author="Florian Priester">Created attachment 24889 [details]
Patch (tested on Windows only)

This new implementation of TableCursor.tableMouseDown first calls
Table.getItem(Point) to find the right item, then checks which
column the given location belongs to, treating a grid line to the
right of a cell as part of its bounds. If this fails, the first column
will be used. If there are no columns, the column will be set to null.</comment>
		<comment id="3" date="2005-10-12 14:38:05 EDT" author="Florian Priester">Unless some table widget quirks on other platforms prevent the patch
in comment #2 from working on those platforms, would it be possible
to check it in in time for one of the next milestone releases?</comment>
		<comment id="4" date="2005-10-19 13:28:12 EDT" author="Florian Priester">Having just read bug 113105, it seems that the current behaviour of
Table#getItem(Point) (which, as bug 86229 comment #2 says, is intended)
prevents my patch from working for tables without FULL_SELECTION style.

Not sure why anyone would use a table cursor in combination with such
a table, but if it worked in the past then it should continue to do so.
For the time being, please disregard the patch, I'll try to come up with
a new one. Sorry about that.

(On a side note, I /knew/ that there must have been some reason why the
current implementation of TableCursor#tableMouseDown avoided calling
Table#getItem(Point)...)</comment>
		<comment id="5" date="2005-12-18 15:22:45 EST" author="Florian Priester">Created attachment 31913 [details]
Updated patch

In the absence of a Table.getItem(Point, boolean) API (-&gt; bug 113105 comment #1)
the best approach I can think of to resolve this bug would be to use the code
from the original patch when FULL_SELECTION is set, thus covering both the trim
area and gridlines, and fall back to the old code when that style is not set.
This at least fixes the most common case.</comment>
		<comment id="6" date="2006-03-13 14:21:50 EST" author="Florian Priester">Ping. Veronika, please let me know if there are any problems with the patch.</comment>
		<comment id="7" date="2006-03-15 14:19:27 EST" author="Veronika Irvine">I released a variation on this patch.  See below.  I tried to make the non FULL_SELECTION a bit smarter and reuse as much of the same code between the two cases.


### Eclipse Workspace Patch 1.0
#P org.eclipse.swt
Index: Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/TableCursor.java
===================================================================
RCS file: /cvsroot/eclipse/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/TableCursor.java,v
retrieving revision 1.32
diff -u -r1.32 TableCursor.java
--- Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/TableCursor.java 6 Mar 2006 15:16:35 -0000 1.32
+++ Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/TableCursor.java 15 Mar 2006 19:19:26 -0000
@@ -464,23 +464,43 @@
 void tableMouseDown(Event event) {
  if (isDisposed() || !isVisible()) return;
  Point pt = new Point(event.x, event.y);
- Rectangle clientRect = table.getClientArea();
- int columnCount = table.getColumnCount();
- int maxColumnIndex =  columnCount == 0 ? 0 : columnCount - 1;
- int start = table.getTopIndex();
- int end = table.getItemCount();
- for (int i = start; i &lt; end; i++) {
-  TableItem item = table.getItem(i);
-  for (int j = 0; j &lt;= maxColumnIndex; j++) {
-   Rectangle rect = item.getBounds(j);
+ int lineWidth = table.getLinesVisible() ? table.getGridLineWidth() : 0;
+ TableItem item = table.getItem(pt);
+ if ((table.getStyle() &amp; SWT.FULL_SELECTION) != 0) {
+  if (item == null) return;
+ } else {
+  int start = item != null ? table.indexOf(item) : table.getTopIndex();
+  int end = table.getItemCount();
+  Rectangle clientRect = table.getClientArea();
+  for (int i = start; i &lt; end; i++) {
+   TableItem nextItem = table.getItem(i);
+   Rectangle rect = nextItem.getBounds(0);
+   if (pt.y &gt;= rect.y &amp;&amp; pt.y &lt; rect.y + rect.height) {
+    item = nextItem;
+    break;
+   }
    if (rect.y &gt; clientRect.y + clientRect.height)  return;
+  }
+  if (item == null) return;
+ }
+ TableColumn newColumn = null;
+ int columnCount = table.getColumnCount();
+ if (columnCount &gt; 0) {
+  for (int i = 0; i &lt; columnCount; i++) {
+   Rectangle rect = item.getBounds(i);
+   rect.width += lineWidth;
    if (rect.contains(pt)) {
-    setRowColumn(i, j, true);
-    setFocus();
-    return;
+    newColumn = table.getColumn(i);
+    break;
    }
   }
+  if (newColumn == null) {
+   newColumn = table.getColumn(0);
+  }
  }
+ setRowColumn(item, newColumn, true);
+ setFocus();
+ return;
 }
 
 void traverse(Event event) {</comment>
		<comment id="8" date="2006-03-15 14:51:36 EST" author="Florian Priester">Thanks for working on this bug.

However, you've replaced the following lines from my patch:

  Rectangle rect = item.getBounds(i);
  if (pt.x &gt;= rect.x &amp;&amp; pt.x &lt; rect.x + rect.width + lineWidth) {

with

  Rectangle rect = item.getBounds(i);
  rect.width += lineWidth;
  if (rect.contains(pt)) {

With this change the column is not set correctly when the user clicks on
a vertical grid line (since grid lines are not part of the item bounds).</comment>
		<comment id="9" date="2006-03-15 14:55:01 EST" author="Florian Priester">&gt; a vertical grid line

Sorry, I meant to say "a horizontal grid line".</comment>
		<comment id="10" date="2006-03-15 15:21:14 EST" author="Veronika Irvine">Add rect.height += lineWidth;</comment>
      </comments>
    </buginformation>
    <fixedCommits>
      <commit Id="8094c5620da45f5980d8d011643b26514020dd87" author="Veronika Irvine" date="2006-03-16 04:20:31"/>
          <file name="bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/TableCursor.java">
              <method name="tableMouseDown" returnType="void" parameters="Event"/>
          </file>
      </commit>
    </fixedCommits>
  </bug>
  <bug id="81264" opendate="2004-12-15 13:17:00" fixdate="2006-04-12 13:22:00">
    <buginformation>
      <summary>Table fails to setTopIndex after new items are added to the table</summary>
      <description>I am working on a table viewer that keeps track of the scroll bar and loads content into the table dynamically as the user scrolls to the end of the table. Items could be added/removed from the table as the user scrolls. To maintain the position of the table, I call setTopIndex at the end of the update. I have created a small testcase to simulate the process. Here's my testcase to demonstrate the problem: public static void main(String[] args) { final Display display = new Display(); Shell shell = new Shell(display); shell.setBounds(10,10,200,200); final Table table = new Table(shell, SWT.NONE); table.setBounds(10,10,100,100); for (int i = 0; i &amp;lt; 99; i++) { new TableItem(table, SWT.NONE).setText(&amp;quot;item &amp;quot; + i); } table.setTopIndex(20); shell.open(); System.out.println(&amp;quot;top visible index: &amp;quot; + table.getTopIndex()); for (int i = 0; i &amp;lt; 5; i++) { new TableItem(table, SWT.NONE).setText(&amp;quot;item &amp;quot; + i); } table.setTopIndex(40); System.out.println(&amp;quot;top visible index: &amp;quot; + table.getTopIndex()); while (!shell.isDisposed()) { if (!display.readAndDispatch()) display.sleep(); } display.dispose(); } Table.setTopIndex fails to position to the correct table item if new items are added to the table after the shell is opened. The first call to setTopIndex succeeds. The table is correctly positioned at item 20. After adding new table items to the table, calling setTopTable(40) has no effect. Calling getTopIndex continues to return 20. Expected Result: Calling setTopIndex(40) should move table item #40 to the top of the table. Calling getTopIndex after should return 40. If the last 5 items are added before the shell is opened, setTopIndex to 40 will also succeed. The testcase works as expected on Windows.</description>
      <comments>
		<comment id="1" date="2005-01-12 12:04:42 EST" author="Steve Northover">Billy, I believe this is a dup ...</comment>
		<comment id="2" date="2005-01-20 16:25:16 EST" author="Billy Biggs">I can reproduce this problem using GtkTreeView.  Running an event loop after
adding items to the table works around the problem.  I filed the following bug
upstream:

  http://bugzilla.gnome.org/show_bug.cgi?id=164749</comment>
		<comment id="3" date="2005-03-11 17:22:26 EST" author="Samantha Chan">Hi Billy -

Again, is it possible to force the setTopIndex to take effect without running
the event loop?

Thanks
Samantha</comment>
		<comment id="4" date="2006-04-06 10:53:16 EDT" author="Veronika Irvine">Fixed in HEAD for 3.2 RC1.</comment>
      </comments>
    </buginformation>
    <fixedCommits>
      <commit Id="750fbf7ef7f008b0864e26e584fad6255dbe4f53" author="Veronika Irvine" date="2006-04-06 11:27:41"/>
          <file name="bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/List.java">
              <method name="setTopIndex" returnType="void" parameters="int"/>
          </file>
          <file name="bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Table.java">
              <method name="setTopIndex" returnType="void" parameters="int"/>
          </file>
          <file name="bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Tree.java">
              <method name="setTopItem" returnType="void" parameters="TreeItem"/>
          </file>
      </commit>
    </fixedCommits>
  </bug>
  <bug id="99145" opendate="2005-06-09 09:51:00" fixdate="2006-04-25 16:52:00">
    <buginformation>
      <summary>Link widget only disables link, not text</summary>
      <description>20050609-0010 When disabling a a linked wiget with mixed text/link content (e.g. &amp;quot;Use the &amp;lt;a&amp;gt;XY page&amp;lt;/a&amp;gt; to configure this&amp;quot;), only the link is disabled, not the text. See screenshot</description>
      <comments>
		<comment id="1" date="2005-06-09 09:52:29 EDT" author="Martin Aeschlimann">Created attachment 22686 [details]
screenshot</comment>
		<comment id="2" date="2005-06-09 10:40:28 EDT" author="Felipe Heidrich">That is how the native SysLink widget works. How would you like it to be 
different ?</comment>
		<comment id="3" date="2005-06-09 10:43:43 EDT" author="Martin Aeschlimann">The test around the link should also be disabled.
E.g. in the screenshot: The whole page is diabled but the link text sticks out.</comment>
		<comment id="4" date="2005-06-09 15:58:46 EDT" author="Felipe Heidrich">Platform behaviour. OS.EnableWindow(hwndLink, false) doesn't change the 
foreground of the text around the link, nothing I can do about it. </comment>
		<comment id="5" date="2005-08-02 13:32:29 EDT" author="Felipe Heidrich">fixed in head &gt; 20050802
behaviour changed in all platforms.</comment>
		<comment id="6" date="2006-04-07 17:29:55 EDT" author="Mike Wemhoff">Created attachment 38050 [details]
Disabled Link without the XP manifest</comment>
		<comment id="7" date="2006-04-07 17:32:13 EDT" author="Mike Wemhoff">This bug appears to not be fixed with the XP manifest (see screenshot).  Without the XP manifest, the text does become disabled, but does not look the same as a disabled label (see screenshot).

Here is a code snippet:
public class LinkTest {
        void run() {
                Display display = new Display();
                Shell shell = new Shell(display);
                shell.setLayout(new RowLayout(SWT.VERTICAL));

                Label label = new Label(shell, SWT.NONE);
                Link link = new Link(shell, SWT.NONE);

                label.setText("Disabled Label."); //$NON-NLS-1$
                label.setEnabled(false);
                link.setText("Disabled Link."); //$NON-NLS-1$
                link.setEnabled(false);

                shell.open();
                while (!shell.isDisposed()) {
                        if (!display.readAndDispatch())
                                display.sleep();
                }

                display.dispose();
        }

        public static void main(String[] args) {
                new LinkTest().run();
        }</comment>
		<comment id="8" date="2006-04-07 17:32:45 EDT" author="Mike Wemhoff">Created attachment 38051 [details]
Disabled Link with XP manifest</comment>
		<comment id="9" date="2006-04-07 17:36:26 EDT" author="Felipe Heidrich">on windows xp only the 'link' portion of the text is disabled.
platform behaviour</comment>
		<comment id="10" date="2006-04-07 17:49:18 EDT" author="Brad Reynolds">(In reply to comment #9)
&gt; on windows xp only the 'link' portion of the text is disabled.
&gt; platform behaviour
&gt; 

Just to clarify... doesn't Mike's screenshots show that on XP, without the manifest, it is styled appropriately?  Are you saying that with the manifest this is no longer possible?</comment>
		<comment id="11" date="2006-04-07 17:52:12 EDT" author="Mike Wemhoff">Yes, that is correct.</comment>
		<comment id="12" date="2006-04-07 17:54:02 EDT" author="Felipe Heidrich">i'm sorry for the confusion, starting this week the manifest is no longer necessary, SWT on windows xp is always themed.
In another words, you don't need to add a manifest file to get the xp look, it is on by default.</comment>
		<comment id="13" date="2006-04-10 17:06:49 EDT" author="Felipe Heidrich">*** Bug 123938 has been marked as a duplicate of this bug. ***</comment>
		<comment id="14" date="2006-04-21 14:47:54 EDT" author="Markus Keller">Created attachment 39202 [details]
Disabled Link in ControlExample

So how can the ControlExample do it right with the manifest (N20060421-0010)? Can't this be the default behavior?</comment>
		<comment id="15" date="2006-04-24 12:25:19 EDT" author="Felipe Heidrich">fixed in head, now the link and the non-link portion of the text are grayed out when disable.</comment>
		<comment id="16" date="2006-04-25 16:51:27 EDT" author="Veronika Irvine">Verified in 3.2 N20060425-0:10</comment>
      </comments>
    </buginformation>
    <fixedCommits>
      <commit Id="ed276658e2fcf0ec8b403e420899063844791f4a" author="Felipe Heidrich" date="2005-08-03 01:08:46"/>
          <file name="bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Link.java">
          </file>
      </commit>
    </fixedCommits>
  </bug>
  <bug id="101354" opendate="2005-06-22 16:31:00" fixdate="2006-05-01 16:26:00">
    <buginformation>
      <summary>Class ImageDataLoader needs javadoc</summary>
      <description>See &lt;span class="bz_closed"&gt;&lt;a href="show_bug.cgi?id=68867" title="RESOLVED FIXED - ImageData - remove ImageLoader dependencies"&gt;bug 68867&lt;/a&gt;&lt;/span&gt; for details.</description>
      <comments>
		<comment id="1" date="2006-05-01 16:26:55 EDT" author="Carolyn MacLeod">Fixed &gt; 20060501</comment>
      </comments>
    </buginformation>
    <fixedCommits>
      <commit Id="f851a1491c86eded57ab0a079e1b0ff7a2a08f60" author="Carolyn MacLeod" date="2006-05-02 05:26:53"/>
          <file name="bundles/org.eclipse.swt/Eclipse SWT/common/org/eclipse/swt/graphics/ImageDataLoader.java">
          </file>
      </commit>
    </fixedCommits>
  </bug>
  <bug id="108769" opendate="2005-09-04 21:27:00" fixdate="2006-05-01 17:09:00">
    <buginformation>
      <summary>swt.FileDialog: additional clarification in javadoc and convenience method</summary>
      <description>I was recently working out an issue with some code using the SWT FileDialog class. The soon-to-be-attached patch adds some additional information to the javadoc which explains some details I gleaned from reading the source but wasn't quite clear from the existing javadocs. The patch also adds a new method for setting the filter names and extensions which I believe is more convenient to use. I created the patch against the GTK version of SWT. It will need to be adapted for the other versions. (note: by &amp;quot;adapt&amp;quot; I merely mean that the line numbers need to be adjusted, none of the code is platform-specific)</description>
      <comments>
		<comment id="1" date="2005-09-04 21:31:21 EDT" author="Derrick Hudson">Created attachment 26826 [details]
patch mentioned in first comment</comment>
		<comment id="2" date="2005-09-06 14:44:41 EDT" author="Steve Northover">CAR to look into Javadoc issue.

NOTE:  We are not really interested in adding convenience API in order to 
avoid bloating the toolkit.</comment>
		<comment id="3" date="2006-05-01 17:09:12 EDT" author="Carolyn MacLeod">Fixed javadoc &gt; 20060501.
Did not add convenience method.</comment>
      </comments>
    </buginformation>
    <fixedCommits>
      <commit Id="4a8b15adef2f0c6fe4bb1a8285a7194c7499fb25" author="Carolyn MacLeod" date="2006-05-02 06:07:55"/>
          <file name="bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/FileDialog.java">
              <method name="setFilterExtensions" returnType="void" parameters="String[]"/>
          </file>
      </commit>
    </fixedCommits>
  </bug>
  <bug id="85072" opendate="2005-02-11 18:57:00" fixdate="2006-06-05 10:11:00">
    <buginformation>
      <summary>Eclipse working set aggressively trimmed by Windows</summary>
      <description>[This problem affects all NT-based Windows variants, including Win2k and XP] The Windows NT kernel has a well-known problem: When you minimize an application, Windows will trim the working set of the process. This is described in the following Microsoft knowledgebase entry, which also provides a solution: &lt;a href="http://support.microsoft.com/default.aspx?scid=kb;en-us;293215"&gt;http://support.microsoft.com/default.aspx?scid=kb;en-us;293215&lt;/a&gt; Certain applications seem particularly affected by this problem -- Java GUI applications and the Mozilla suite seem particularly sensitive. (Mozilla-based apps include a hidden configuration option to enable the solution mentioned above.) When you bring back the minimized application, the OS will start swapping the pages back into physical memory, &amp;quot;trashing&amp;quot; the disk and meanwhile making the application completely unresponsive. Waits up to a minute have been observed with large (300-350MB) working sets. The aforementioned solution prevents the OS from immediately swapping out the application, but will still swap out the application to give priority to other focused applications, so the fix has no significant negative effects on a running system. A patch was offered on the SWT dev mailing list some time ago, but it does not seem to have been recorded or accepted: &lt;a href="http://dev.eclipse.org/mhonarc/lists/platform-swt-dev/msg03710.html"&gt;http://dev.eclipse.org/mhonarc/lists/platform-swt-dev/msg03710.html&lt;/a&gt; Further references: &lt;a href="http://www.javagaming.org/cgi-bin/JGNetForums/YaBB.cgi?board=Tuning;action=display;num=1090286158"&gt;http://www.javagaming.org/cgi-bin/JGNetForums/YaBB.cgi?board=Tuning;action=display;num=1090286158&lt;/a&gt; &lt;a href="https://bugzilla.mozilla.org/show_bug.cgi?id=76831"&gt;https://bugzilla.mozilla.org/show_bug.cgi?id=76831&lt;/a&gt; &lt;a href="http://www.eclipsepowered.org/archives/2004/11/18/best-jvm-settings-for-eclipse/"&gt;http://www.eclipsepowered.org/archives/2004/11/18/best-jvm-settings-for-eclipse/&lt;/a&gt;</description>
      <comments>
		<comment id="1" date="2005-02-11 18:59:30 EST" author="Alexander Staubo">Created attachment 17880 [details]
SC_MINIMIZE patch

This is Ivan Markov's patch retrofitted to the current trunk (untested).</comment>
		<comment id="2" date="2005-02-16 11:54:31 EST" author="Steve Northover">One of the reasons that is wasn't accepted is that overriding the default 
behavior of the operating system like this is generally dangerous.  Stand 
alone SWT applications generally use much less memory than Eclipse so the 
patch may not be necessary for them.  Finally, it doesn't work.  When you 
minimize a window, Windows assigns a new active window.  The patch gets in the 
way of this and leaves your desktop with no active window when you minimize a 
shell.  Furthermore, I'd like to do some investigation regarding multiple 
shells.  Is the patch only necessary when the last shell is minimized or does 
the problem happen when every shell is minimized.

Assuming we can get around the "no active shell assigned" bug that this code 
introduces, it might make sense to only apply the patch when more than 64 meg 
of memory is being used?  Not sure about this because applications that hog 
memory should really be giving the memory back ... but the problem is that 
they need it all and restart slowly.</comment>
		<comment id="3" date="2005-02-16 11:59:53 EST" author="Alexander Staubo">&gt; overriding the default behavior of the operating 
&gt; system like this is generally dangerous.

What is the danger?

&gt; it might make sense to only apply the patch when 
&gt; more than 64 meg of memory is being used?

Better to make it a prefs option.

&gt; Not sure about this because applications that hog
&gt; memory should really be giving the memory back

And even with this patch, they would be. The patch doesn't prevent other apps
from reclaiming the apps' memory; but it won't happen until they need the
memory, whereas without the patch, Windows will start sucking out the pages
immediately.</comment>
		<comment id="4" date="2005-02-16 12:04:16 EST" author="Steve Northover">The danger is in changing ANY of the default behavior of Windows.  This is the 
kind of change that will screw up in some bizzare unintended way on Longhorn.</comment>
		<comment id="5" date="2005-02-16 12:05:45 EST" author="Alexander Staubo">Longhorn isn't out, and won't be out for years. Why do we care at this point?</comment>
		<comment id="6" date="2005-02-16 12:06:56 EST" author="Alexander Staubo">As for the focus problem, can we find the next window in the chain and ask
Windows to give it focus?</comment>
		<comment id="7" date="2005-02-16 13:47:04 EST" author="Steve Northover">Go ahead and search the MSDN.  Assigning the active shell is something that 
leads to trouble.  You can cause the wrong shell to come to the front, steal 
focus away from other applications etc.

We do care about future verions of the operating system because we maintain 
every line.  I understand that this is a real problem.  I'm thinking about 
putting in the code (active shell bug and all) for SWT programs that are using 
a lot of memory.

Does anyone know if this happens whenever a window is minimize or does it have 
to be the last shell?</comment>
		<comment id="8" date="2005-02-16 13:50:30 EST" author="Alexander Staubo">What do you mean by "assigning the active shell"? All the patch does is follow
the Microsoft recommendation, which is to call ShowWindow() on the main window
with SW_SHOWMINIMIZED instead of SW_MINIMIZE when the window is minimized. The
application itself stays focused even though it's minimized.</comment>
		<comment id="9" date="2005-02-16 13:58:13 EST" author="Steve Northover">I've seen the MS patch.  It has a bug.  When you minimize a shell, a new shell 
on the desktop is supposed to become active and get focus.  If you apply the 
patch, this no longer happens.  Try it.</comment>
		<comment id="10" date="2005-02-16 14:03:39 EST" author="Alexander Staubo">It's not a bug -- that's how SW_SHOWMINIMIZED works. It doesn't automatically
defer focus to another app. That's why I'm wondering if it's possible to
programmatically shift focus to the next app in the chain.</comment>
		<comment id="11" date="2005-02-16 14:05:06 EST" author="Alexander Staubo">And I wonder if SW_SHOWMINNOACTIVE works the same way. According to the API
docs, "Displays the window as a minimized window. This value is similar to
SW_SHOWMINIMIZED, except the window is not activated."</comment>
		<comment id="12" date="2005-02-16 14:18:27 EST" author="Steve Northover">&gt;&gt;Go ahead and search the MSDN.  Assigning the active shell
&gt;&gt;is something that leads to trouble.  You can cause the wrong
&gt;&gt;shell to come to the front, steal focus away from other
&gt;&gt;applications etc.</comment>
		<comment id="13" date="2005-03-09 16:08:52 EST" author="Veronika Irvine">*** Bug 87061 has been marked as a duplicate of this bug. ***</comment>
		<comment id="14" date="2005-03-16 11:03:57 EST" author="Veronika Irvine">Silenio, we have to give this top priority for 3.1 M6.</comment>
		<comment id="15" date="2005-04-08 04:13:59 EDT" author="John Whaley">If you want to walk on the wild side, you can try the KeepResident plugin I wrote:
   http://suif.stanford.edu/pub/keepresident/

It uses two functions in the Windows API - SetProcessWorkingSetSize() and
VirtualLock() - to encourage Windows to keep more of the Eclipse Java process in
physical RAM.

This plugin is far, far more evil than calling SW_SHOWMINIMIZED. ;-)</comment>
		<comment id="16" date="2005-04-11 23:03:52 EDT" author="Steve Northover">*** Bug 50278 has been marked as a duplicate of this bug. ***</comment>
		<comment id="17" date="2005-04-21 11:10:54 EDT" author="Billy Biggs">*** Bug 61533 has been marked as a duplicate of this bug. ***</comment>
		<comment id="18" date="2005-05-04 16:08:39 EDT" author="Steve Northover">I have released a hack/fix for this problem based on the suggestion from 
Microsoft.  I'm not happy with is quite yet so I'm not going to close this bug 
report in the hope that I can come up with something better before 3.1 (yes, I 
know I am running out of time).</comment>
		<comment id="19" date="2005-05-08 10:50:29 EDT" author="Ed Burnette">How's this interact with the fix for bug 92164?</comment>
		<comment id="20" date="2005-05-09 09:28:03 EDT" author="Steve Northover">Shouldn't be related.</comment>
		<comment id="21" date="2005-05-18 23:11:14 EDT" author="Eclipse User">(In reply to comment #0)
&gt; (Mozilla-based apps include a hidden configuration option to enable the
solution mentioned above.)

Could you provide the Mozilla configuration option reference please? (My web
search didn't show any)

Thanks</comment>
		<comment id="22" date="2005-05-19 08:03:12 EDT" author="Alexander Staubo">(In reply to comment #21)
&gt; Could you provide the Mozilla configuration option reference please? (My web
&gt; search didn't show any)

"config.trim_on_minimize"</comment>
		<comment id="23" date="2005-05-19 08:59:09 EDT" author="Steve Northover">The hack/fix has been released for a while and is probably the best we can do 
for 3.1.  Is anyone still seeing the problem?</comment>
		<comment id="24" date="2005-05-19 11:51:20 EDT" author="Ed Burnette">Netbeans 4.1 uses "-Dsun.awt.keepWorkingSetOnMinimize=true".

Here's the full command line if anybody is interested (this is the command line
for java.exe called from nbexec.exe called from nbexec.exe called from
netbeans.exe, and I thought *eclipse* had too many processes :).

"C:\Program Files\Java\jdk1.6.0\jre\bin\java.exe"
"-Dnetbeans.importclass=org.netbeans.upgrade.AutoUpgrade" "-Xms32m" "-Xmx128m"
"-XX:PermSize=32m" "-XX:MaxPermSize=96m" "-Xverify:none"
"-Dnetbeans.osenv=C:\DOCUME~1\userid\LOCALS~1\Temp\nbenv2"
"-Dnetbeans.osenv.nullsep=true" "-Djdk.home=C:\Program Files\Java\jdk1.6.0"
"-Dnetbeans.home=C:\Program Files\netbeans-4.1\platform5"
"-Dnetbeans.dirs=C:\Program Files\netbeans-4.1\nb4.1;C:\Program
Files\netbeans-4.1\ide5;C:\Program Files\netbeans-4.1\enterprise1"
"-Dnetbeans.user=C:\Documents and Settings\userid\.netbeans\4.1"
"-Dsun.awt.keepWorkingSetOnMinimize=true" -cp "C:\Program
Files\netbeans-4.1\platform5\lib\boot.jar;C:\Program
Files\Java\jdk1.6.0\lib\dt.jar;C:\Program Files\Java\jdk1.6.0\lib\tools.jar"
org/netbeans/Main "--branding" "nb"</comment>
		<comment id="25" date="2005-05-20 00:00:10 EDT" author="Gunnar Wagenknecht">(In reply to comment #24)
&gt; "-Djdk.home=C:\Program Files\Java\jdk1.6.0"

Wow, they already do have Java 6 Support ;)</comment>
		<comment id="26" date="2005-05-20 10:46:00 EDT" author="Steve Northover">Ed, the Netbeans command line isn't relevant for SWT.</comment>
		<comment id="27" date="2005-05-20 12:00:43 EDT" author="Ed Burnette">I know, I just mentioned it here because we were talking about how other
applications like Mozilla solved the problem. Apparently NetBeans solved it in
the exact same way, by not trimming the working set on minimize.</comment>
		<comment id="28" date="2005-05-20 23:21:45 EDT" author="Alexander Staubo">(In reply to comment #23)
&gt; The hack/fix has been released for a while and is probably the best we can do 
&gt; for 3.1.  Is anyone still seeing the problem?

The fix seems to have a real effect, and I have not experienced any adverse effects.</comment>
		<comment id="29" date="2005-05-21 02:51:11 EDT" author="David Williams">I just wanted to say thanks for including this fix/workaround. This has been a
big problem in my own developement, and I know its even worse for some 
large-memory-using upstream products. The aggressive trimming seems to defeat
the purpose of having lots of extra memory installed. Without the
fix/workaround, I sometimes resorted to using ctrl-break to abort the Eclipse
swapping back in and restart from the beginning ... its hard to believe that
would be faster, but seemed to sometimes be faster.

Anyway, I assume its in M7, and I assume it there automatically? No -D control
to turn off or on?

Thanks again. </comment>
		<comment id="30" date="2005-05-21 03:00:09 EDT" author="David Williams">In fact, now that I think about it, any way this could easily/safely be
backported to 3.0x stream? I would still help those memory hungrey upstream apps
I mentioned. </comment>
		<comment id="31" date="2005-05-26 12:01:32 EDT" author="Richard Cook">Just wanted to say I really like this fix. I know longer have to go get 
another cup of coffee while I wait for Eclipse to come back up. Please keep 
this in the 3.1 builds, if there is any doubt about it. Thanks, Rich.</comment>
		<comment id="32" date="2005-05-26 12:12:44 EDT" author="Steve Northover">We won't be changing this now, even though I still don't like the code.</comment>
		<comment id="33" date="2005-08-11 14:22:00 EDT" author="Veronika Irvine">Code has shipped.  This will just have to do.</comment>
		<comment id="34" date="2006-02-24 18:50:14 EST" author="Steve Northover">Add the word WM_SYSCOMMAND since I can never find this bug report when I search for it (WM_SYSCOMMAND is the method were it was fixed).</comment>
		<comment id="35" date="2006-06-04 14:23:13 EDT" author="Ron Yang">Is there a -D flag for disabling this?  IOW, apply previous behavior of trimming the working set on mminimize.

Thanks</comment>
		<comment id="36" date="2006-06-05 10:11:02 EDT" author="Steve Northover">No, there is no way to disable this.  I'm still hoping to get rid of the code someday.</comment>
		<comment id="37" date="2013-01-29 17:04:06 EST" author="Silenio Quarti">This fix caused bug#399151. The changes to fix bug#399151 should not invalidate this fix, but since this cannot be easily reproduced we need to watch for regressions.</comment>
      </comments>
    </buginformation>
    <fixedCommits>
      <commit Id="c2deeb4450cf9e760ad5d114d9513f6491d23aa4" author="Steve Northover" date="2005-04-12 12:10:45"/>
          <file name="bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Shell.java">
              <method name="WM_MOUSEACTIVATE" returnType="LRESULT" parameters="int int"/>
          </file>
      </commit>
    </fixedCommits>
  </bug>
  <bug id="102756" opendate="2005-07-05 13:37:00" fixdate="2006-07-20 11:09:00">
    <buginformation>
      <summary>Use GtkComboBox instead of GtkCombo</summary>
      <description>Attached are 2 screenshots using Fedora Core 3 (GNOME 2.8, GTK 2.4.14). goodcombo.png is GTK's native Open File dialog. badcombo.png is Eclipse's Team preferences page. You can see that Eclipse does not render the read only Combo properly. Rendering combos this way is confusing because it implies you can edit the values when you actually can't. It also doesn't match the combos in other native applications. Please render the Combo widget to match the native GTK platform. Thanks!</description>
      <comments>
		<comment id="1" date="2005-07-05 13:38:46 EDT" author="David Graham">Created attachment 24354 [details]
Incorrect combo rendering</comment>
		<comment id="2" date="2005-07-05 13:39:28 EDT" author="David Graham">Created attachment 24355 [details]
Native combo rendering</comment>
		<comment id="3" date="2005-07-05 13:42:24 EDT" author="David Graham">An additional problem this causes is you cannot display the drop down list by
clicking in the combo text area.  You are forced to click on the small arrow.</comment>
		<comment id="4" date="2005-07-05 13:48:00 EDT" author="Billy Biggs">The read-only combo box you see in the file chooser is using the GtkComboBox
widget which is new in GTK+ 2.4.  SWT is still using the GtkCombo widget.  We
should update the code to use GtkComboBox, although it will make the code a bit
ugly since we still need to support GTK+ 2.2.</comment>
		<comment id="5" date="2005-07-07 14:33:21 EDT" author="Billy Biggs">I'd like to do the port for 3.2.</comment>
		<comment id="6" date="2005-11-15 21:56:13 EST" author="David Graham">Is this still planned for 3.2?  Has there been any progress on it?</comment>
		<comment id="7" date="2005-11-15 22:02:25 EST" author="Billy Biggs">I'm actually in the middle of hacking on it.  I think it should be possible to
finish for 3.2, the port isn't too difficult, although I've already found some
bugs in GtkComboBox ;-)

  http://bugzilla.gnome.org/show_bug.cgi?id=321393</comment>
		<comment id="8" date="2005-11-16 00:16:01 EST" author="Billy Biggs">Created attachment 30030 [details]
Proposed patch

Here's my current patch that handles read-only combo boxes. Need to check the
style with SN/SSQ.</comment>
		<comment id="9" date="2006-04-12 14:03:31 EDT" author="David Graham">Is this patch going to make it into 3.2?</comment>
		<comment id="10" date="2006-06-29 13:48:22 EDT" author="Felipe Heidrich">fixed in head</comment>
      </comments>
    </buginformation>
    <fixedCommits>
      <commit Id="7fa7aa8854b43954f6efd749504d6fe4f12a1735" author="Felipe Heidrich" date="2006-06-24 01:38:18"/>
          <file name="bundles/org.eclipse.swt/Eclipse SWT PI/gtk/org/eclipse/swt/internal/gtk/OS.java">
              <method name="g_object_set" returnType="void" parameters="int byte[] boolean int"/>
          </file>
      </commit>
    </fixedCommits>
  </bug>
  <bug id="81834" opendate="2004-12-22 21:09:00" fixdate="2006-08-09 12:46:00">
    <buginformation>
      <summary>BIDI: StyledText does not convert European Number to Arabic Number</summary>
      <description>StyledText does not convert European Number(EN) to Arabic Number(AN) on WinXP. How to reproduce: 1. Change the user language to Arabic on &amp;quot;Regional and Language Options&amp;quot; panel on Windows. (do not specify &amp;quot;-nl&amp;quot; command line arguments.) 2. Create Shell with SWT.RIGHT_TO_LEFT flag. 3. add StyledText on the shell. 4. Set text &amp;quot;012345 abc 012345&amp;quot; in StyledText widget. 5. Open and run the shell. Result: All the numbers are still European Number characters on StyledText widget. Text widget displays the first &amp;quot;012345&amp;quot; as Arabic Numbers. This is reproducible on swt-I20041221-0800-win32. (also, in Eclipse3.0GA) Thanks, Hiro</description>
      <comments>
		<comment id="1" date="2004-12-22 21:11:51 EST" author="Hiroyuki Okamoto">Created attachment 16819 [details]
Test source code to reproduce this problem.

Added sample code to reproduce this problem.
StyledText behavior is different from Text widget.</comment>
		<comment id="2" date="2005-01-05 14:41:03 EST" author="Felipe Heidrich">What you're asking is for me to set the flag fDigitSubstitute in SCRIPT_STATE ?
From MSDN:
fDigitSubstitute 
TRUE if character codes U+0030 through U+0039 (European digits) are to be 
substituted by national digits. Set by Unicode NADS, cleared by NODS. 
see:
http://msdn.microsoft.com/library/en-us/intl/uniscrib_9hiq.asp

I don't think people really want that (by default). Even if we add API to make 
possible to set it in TextLayout I don't think I can implement it in all the 
platforms.</comment>
		<comment id="3" date="2006-03-28 18:21:19 EST" author="Felipe Heidrich">*** Bug 133133 has been marked as a duplicate of this bug. ***</comment>
		<comment id="4" date="2006-05-25 11:59:27 EDT" author="Ahmed Farrag">This problem is encountered on RHEL 4.0, SLES 9.0, Win XP, Win 2K &amp; Win 2003 using eclipse build 3.2


We are expecting a fix for this bug in 3.2 release.</comment>
		<comment id="5" date="2006-05-25 12:07:45 EDT" author="Felipe Heidrich">&gt; We are expecting a fix for this bug in 3.2 release.

It is too late in the release to fix this now, sorry.</comment>
		<comment id="6" date="2006-05-25 12:21:19 EDT" author="Ahmed Farrag">(In reply to comment #5)

&gt;This defect must be fixed before 3.2 is shipped. Eclipse is a vital product, we
have to make sure that Arabic is supported without any limitations.

Without fixing such bugs, Eclipse can't be announced as an Arabic-supported
product.</comment>
		<comment id="7" date="2006-05-25 12:59:46 EDT" author="Steven Wasleski">I agree that it is too late for 3.2 but could something be done in 3.2.1?

Ahmed, I am not clear what the requirement really is here.  I would think that just fixing this on Windows would be okay.  We already have significantly varying Bidi support across platforms with Windows being the best.  I think only having this work in Windows would be within user expectations.

I am also unclear on when exactly the substitution should occur.  Is it only when the SWT.RIGHT_TO_LEFT bit is set on the StyledText widget or its parent?  If it is one of these cases, it might be easy to know when to set and when to not set the fDigitSubstitute flag.</comment>
		<comment id="8" date="2006-05-25 15:07:06 EDT" author="Felipe Heidrich">Created attachment 42624 [details]
org.eclipse.swt  patch, win32

Here is the fix for win32, as far as i know win32 is the only platform that offers native support. Note: The doesn't require new API, but it needs two new natives and one new class (all internal).

In this patch the substitution occurs when (a) SWT.RIGHT_TO_LEFT is on *and* (b) user system locale is bidi. We can easilly change the code convert when only (b) is true.
I think the code is safe (it should only affect RTL user running on actual Bidi machines), but if we could add it to 3.2.1 would probably be a good idea.</comment>
		<comment id="9" date="2006-05-28 10:32:12 EDT" author="Ahmed Farrag">Steven,
Substitution of European digits with Arabic digits should take place when the User system locale is set to Arabic and :

1) The text proceeding the numbers is Arabic.
or 
2) The orientation of the StyledText widget is set to RTL. 

So as you can see it needs some processing to know when substitution can occur.</comment>
		<comment id="10" date="2006-05-28 11:14:03 EDT" author="Ahmed Farrag">(In reply to comment #8)

Felipe,

I can help you test the attached patch and update you with the results, if you can make the substitution take place according to the cases mentioned in comment #9.</comment>
		<comment id="11" date="2006-07-17 17:45:30 EDT" author="Felipe Heidrich">Fixed in head &gt; 20060717


&gt; 1) The text proceeding the numbers is Arabic.
I could not implement this request. the flag fDigitSubstitute if set will convert all numbers (preceded by arabic text or not).</comment>
		<comment id="12" date="2006-07-18 08:48:11 EDT" author="Ahmed Farrag">(In reply to comment #11)

Felipe,
Thanks for your cooperation.</comment>
		<comment id="13" date="2006-08-09 12:46:34 EDT" author="Felipe Heidrich">fix backport to 3.2.x</comment>
      </comments>
    </buginformation>
    <fixedCommits>
      <commit Id="9694ee4c04be5eaf89c0653a81d2155dad71cbaf" author="Felipe Heidrich" date="2006-07-18 06:45:22"/>
          <file name="bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/graphics/TextLayout.java">
              <method name="itemize" returnType="StyleItem[]" parameters=""/>
          </file>
      </commit>
    </fixedCommits>
  </bug>
  <bug id="106372" opendate="2005-08-08 12:18:00" fixdate="2006-09-30 18:17:00">
    <buginformation>
      <summary>Provide DND support for the StyledText widget</summary>
      <description>R3.1 In order to add DND text editing support to our editors (see &lt;span class="bz_closed"&gt;&lt;a href="show_bug.cgi?id=11624" title="RESOLVED FIXED - [DnD] [navigation] text drag and drop"&gt;bug 11624&lt;/a&gt;&lt;/span&gt;) we need basic support in StyledText. Since this is one of Platform Text's 3.2 plan items it would be great to have early feedback whether we can expect something in this area for 3.2 or not.</description>
      <comments>
		<comment id="1" date="2005-08-08 12:24:44 EDT" author="Dani Megert">Bug 11624 contains hints about the intended use cases.</comment>
		<comment id="2" date="2005-08-15 11:45:58 EDT" author="Felipe Heidrich">related to Bug 100245, VI any ideas?</comment>
		<comment id="3" date="2005-08-15 13:10:26 EDT" author="Veronika Irvine">Currently investigating the mouse event ordering issue.  Need to decide if 
this is the beginning of a drag and drop action or a text selection action.</comment>
		<comment id="4" date="2005-11-13 13:22:32 EST" author="tuanglen">(In reply to comment #3)
&gt; Currently investigating the mouse event ordering issue.  Need to decide if 
&gt; this is the beginning of a drag and drop action or a text selection action.

Every major platform supports this. I use text drag and drop in apps on Linux,
Windows, and MacOS X, so you can experiment with pretty much any platform to see
how it is already done. Windows tends to simply make the selected text draggable
immediately. If you put your mouse over a text selection (in anything more
advanced than Notepad), the mouse cursor changes to a hand instantly, showing
dragability. If you want to drag select a new selection inside an existing
selection (instead of moving the existing selection), you have to first click
outside the selection to unselect.

MacOS X uses a little delay timer on mousedown inside an existing selection. If
you move the mouse immediately after mousedown, it assumes a new selection. If
you wait for the timeout (~150ms), then it becomes a text drag and drop and
drags the existing selection.

Since this is such a common, highly convenient, well used, and well loved direct
manipulation feature of so many apps on so many platforms, it needs to be
available ASAP, both in Eclipse and in apps made with SWT. The number of
complaints and duplicate bugs about this missing standard capability in Eclipse
(see bug 11624) shows the kind of feedback developers using SWT will get from
their OWN customers when they discover they can't do it. Not a pleasant thought.

It does seem as though a timing parameter (adjustable to zero) should be
included and of course a way to disable text drag and drop so developers can
decide whether to do Windows style, Mac style, leave it out, or make it a user
preference.</comment>
		<comment id="5" date="2005-11-23 16:03:19 EST" author="Nitin Dahyabhai">(In reply to comment #3)
&gt; Currently investigating the mouse event ordering issue.  Need to decide if 
&gt; this is the beginning of a drag and drop action or a text selection action.

Doesn't it usually depend more on where the mouse down occurred (movement after mousedown from within the selected text usually indicating a drag event)?</comment>
		<comment id="6" date="2005-11-23 17:18:37 EST" author="Stefan van den Oord">Actually, on Mac OS X, it's just another selection if you move your mouse right after the mouse down. If after mouse down you hold still for, say, half a second and then start moving, it's a DND operation. This prevents incidental DND by users who just want to change the selection.</comment>
		<comment id="7" date="2005-11-25 15:25:26 EST" author="Veronika Irvine">I have release part one of the support in StyledText for dragging.  Now, if you create a DragSource for StyledText, mouse down in the selected text and drag, the selection will not be removed and you can implement dragging of the selected text.

See the following snippet:

http://dev.eclipse.org/viewcvs/index.cgi/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet210.java?rev=HEAD&amp;content-type=text/vnd.viewcvs-markup

Step 2 is to have the caret follow the mouse location when dragging over text to indicate where the dropped text will be inserted.  I am working on this as well as support in native text widgets for dragging the selected text.</comment>
		<comment id="8" date="2006-03-02 14:42:56 EST" author="Veronika Irvine">Fixed in HEAD for I20060314.

I have completed step 2, the caret now shows where the text will be inserted if dropped.

The following snippet has been updated to show this:

http://dev.eclipse.org/viewcvs/index.cgi/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet210.java?rev=HEAD&amp;content-type=text/vnd.viewcvs-markup</comment>
		<comment id="9" date="2006-09-30 18:17:29 EDT" author="David Ayre">I have an app that "broke" after this bug was resolved (Provide DND support for the StyledText widget).

Previous to the fix, my app allowed the dragging of a "text processor" object from an RCP view onto a selection of text in the editor (StyledText widget).  This allowed my users to process a specific selection of text using a drag/drop operation.  I lost this functionality after the above bug was "fixed" because the caret now moves to an insert location relative to the mouse and the setCaretOffset() clears any previous text selections.  I "lost" what the user had selected.

The semantics of my drag and drop operation were not one of "insert" but one of "process/transform".  99% of the time with a text editor, i think the semantics will be one of "insert".  But there should be some flexibility in the API to override the default "insert" assumption (or only allow it for certain DataTransfer types/subtypes, eg. TextTransfer) so a developer can assign whatever semantics to the drag and drop operation which make sense for their users.</comment>
      </comments>
    </buginformation>
    <fixedCommits>
      <commit Id="a49d2360996f2fa2b9f5a3c5115b075c8281ec8c" author="Veronika Irvine" date="2005-11-26 04:45:45"/>
          <file name="bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText.java">
          </file>
          <file name="bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/carbon/org/eclipse/swt/dnd/DragSource.java">
          </file>
          <file name="bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/common/org/eclipse/swt/dnd/DragSourceEvent.java">
          </file>
          <file name="bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/win32/org/eclipse/swt/dnd/DragSource.java">
              <method name="DragSource" returnType="null" parameters="Control int"/>
              <method name="handleEvent" returnType="void" parameters="Event"/>
          </file>
      </commit>
    </fixedCommits>
  </bug>
  <bug id="115947" opendate="2005-11-10 21:36:00" fixdate="2006-11-06 09:15:00">
    <buginformation>
      <summary>Accessibility : Cannot set tooltip Text for image in Table Column</summary>
      <description>To be Section 508 compliant, every image should have an Alt+text tooltip associated with it. When using images in a Table, you can't set a tooltip.</description>
      <comments>
		<comment id="1" date="2005-11-17 13:17:36 EST" author="Steve Northover">Is the table in the Windows File Explorer 508 compliant?</comment>
		<comment id="2" date="2005-11-17 17:15:56 EST" author="David Taieb">No, the windows file explorer doesn't show alt text.</comment>
		<comment id="3" date="2006-02-10 15:43:50 EST" author="David Taieb">From what I am seeing in Windows File Explorer you are looking at a tree view, not a table view (unless I am looking at the wrong thing). If we can't add alt-text to the image is there any way to distinguish when the image is different, like Information: then the text or Error: then the text. Also is there any other image that is used in this section or is it only the X. This might make a difference on whether or not we need alt-text for the image or not.</comment>
		<comment id="4" date="2006-02-23 12:16:03 EST" author="Carolyn MacLeod">What is "alt text"?
What is an "Alt+text tooltip"?

FYI, the Windows File Explorer has both a Tree view (on the left) and a Table view (on the right).

I do not know what you mean when you say "Also is there any other image that is used in this section or is it only the X."
   - what section?
   - what X?

What table are you really looking at?</comment>
		<comment id="5" date="2006-02-23 12:19:02 EST" author="Carolyn MacLeod">Let's talk about a concrete example. Here is a snippet that shows how to create a Table with 3 TableColumn's. Each TableColumn has both a tooltip and an image. The tooltip works fine when there is an image. Please modify this snippet to show the problem you are having, because I'm afraid I can't tell from the previous discussion what the problem is.

import org.eclipse.swt.*;
import org.eclipse.swt.widgets.*;
import org.eclipse.swt.layout.*;

public class TableColumnIconAndTooltipTest {
 static Display display;
 static Shell shell;
 static Table table;
 
 public static void main(String[] args) {
  display = new Display();
  shell = new Shell(display);
  shell.setLayout(new GridLayout());  
  table = new Table(shell, SWT.MULTI | SWT.FULL_SELECTION);
  table.setLayoutData(new GridData(GridData.FILL_BOTH));
  table.setHeaderVisible(true);
  for (int col = 0; col &lt; 3; col++) {
   TableColumn column = new TableColumn(table, SWT.NONE);
   column.setText("Column " + col);
   column.setWidth(100);
   column.setToolTipText("Tooltip for Column " + col);
   column.setImage(display.getSystemImage(1 &lt;&lt; col));
  }
  for (int row = 0; row &lt; 5; row++) {
   TableItem item = new TableItem(table, SWT.NONE);
   for (int col = 0; col &lt; 3; col++) {
    item.setText(col, "item" + col + row);
   }
  }
  shell.pack();
  shell.open();
  while (!shell.isDisposed()) {
   if (!display.readAndDispatch()) display.sleep();
  }
 }
}</comment>
		<comment id="6" date="2006-04-04 09:11:42 EDT" author="Keri Tuttle">I was reading over the comments and I 
was a bit confused as to what was going on. I am the QE person that 
originally found the problem in our code, so I thought maybe I would 
explain what I was looking for and then maybe you could let me know if 
there is a fix or workaround possible. 

For our Accessibility checklist we need to have Alternate text (also known 
as a tool-tip) for any image that does not have associated text and 
conveys important information. What I found in our code is that in the 
Errors tab /Problems tab there are some images in the left hand column 
that distinguish a description between an error or warning. Since this 
image states information that is not available in the description the 
image should have alternate text to show what type of error. The alternate 
text is then used by a screen reader to state whether the description is 
for an error or warning etc. 



Is there some way to assign alternate text to the image in the column? </comment>
		<comment id="7" date="2006-04-04 13:05:01 EDT" author="Carolyn MacLeod">Created attachment 37646 [details]
Problems View</comment>
		<comment id="8" date="2006-04-04 13:28:13 EDT" author="Carolyn MacLeod">I agree that this is a bug in eclipse. I do not know of a way to give a tooltip to a table item (setTooltipText is only defined for the table or the columns).

However, there is a way to prepend some useful text to the "name" that can then be spoken by the screen reader. Here is a modified version of the snippet from comment 5 to show how this can be done.

import org.eclipse.swt.*;
import org.eclipse.swt.widgets.*;
import org.eclipse.swt.layout.*;
import org.eclipse.swt.accessibility.*;

public class TableColumnIconAndTooltipTest {
 static Display display;
 static Shell shell;
 static Table table;
 
 public static void main(String[] args) {
  display = new Display();
  shell = new Shell(display);
  shell.setLayout(new GridLayout());  
  table = new Table(shell, SWT.MULTI | SWT.FULL_SELECTION);
  table.setLayoutData(new GridData(GridData.FILL_BOTH));
  table.setHeaderVisible(true);
  for (int col = 0; col &lt; 3; col++) {
   TableColumn column = new TableColumn(table, SWT.NONE);
   column.setText("Column " + col);
  }
  for (int row = 0; row &lt; 5; row++) {
   TableItem item = new TableItem(table, SWT.NONE);
   for (int col = 0; col &lt; 3; col++) {
    item.setText(col, "item" + col + row);
    item.setImage(display.getSystemImage(row &lt; 3 ? SWT.ICON_ERROR : SWT.ICON_WARNING));
   }
  }
  for (int col = 0; col &lt; 3; col++) {
   TableColumn column = table.getColumn(col);
   column.pack();
  }
  table.getAccessible().addAccessibleListener(new AccessibleAdapter() {
   public void getName(AccessibleEvent e) {
    if (e.childID &gt; ACC.CHILDID_SELF) {
     String severity = e.childID  &lt; 3 ? "Error: " : "Warning: ";
     e.result = severity + e.result;  
    }
   }
  });
  shell.pack();
  shell.open();
  while (!shell.isDisposed()) {
   if (!display.readAndDispatch()) display.sleep();
  }
 }
}</comment>
		<comment id="9" date="2006-04-04 13:43:36 EDT" author="Carolyn MacLeod">Just for info, did you happen to notice that problems in the Problems View can now be grouped by severity? (as of M5). This is because the Problems view now contains a Tree with columns, not a Table. 

Here's the "New and Noteworthy" for M5. Find the text "Problems View" in here:
http://fullmoon.ottawa.ibm.com/eclipse/downloads/drops/S-3.2M5-200602171115/eclipse-news-M5.html

Are you running the latest eclipse?

This doesn't help much, but if the problems are grouped by severity, and if the user knows which branch of the Tree he is currently navigating in, he will know whether the parent branch is the "Errors" or "Warnings" branch.</comment>
		<comment id="10" date="2006-04-04 14:52:24 EDT" author="Carolyn MacLeod">I was just thinking about how the snippet in comment 8 could be rewritten using a Tree for the new Problems View. It's more difficult than for Table, because with Table, childID maps to the TableItem's index. In a Tree, the childID is a "cookie", not an index. So we actually need to add a new API to find the TreeItem that corresponds to a given childID in a Tree widget.

We are past the "API freeze" milestone (M5) for eclipse 3.2. We would need to get PMC approval for this change to go in. How important is this problem?

Steve, we may need to consider adding this API, depending on the priority of this bug. The API would be something like Display.findWidget(Widget w, int id).</comment>
		<comment id="11" date="2006-04-04 17:28:12 EDT" author="Keri Tuttle">Yes, this needs to be fixed for our product to pass our Accessibility checkpoint for alternate text for images. Please let me know if you need further information to get this fix approved.</comment>
		<comment id="12" date="2006-04-05 12:52:01 EDT" author="Carolyn MacLeod">Kevin,  (eclipse PMC)

It turns out that we need to add a new API method to Display class in order to fix this bug. The bug is that there is no way a blind user with a screen reader can tell whether an item in the Problems View is an error or a warning, because there is no text associated with the error/warning icons.

The API is Display.findWidget(Widget w, int id). We would need it to look up the TreeItem given only a "cookie" from MSAA (i.e. the OS). Platform-UI will then be able to determine the problem's severity from the TreeItem, and they can use MSAA to add a string (like "Error" or "Warning") to the item's MSAA name so that the screen reader can speak it.

This is new API that is pretty isolated, and we think it is low risk. We know we can make it work on all of the platforms because we already have a similar method that can do the same lookup using a handle - this would just make that into API with a Widget passed in instead of a handle.

Since the API freeze was M5, we are asking for PMC permission to put this in.
OK?</comment>
		<comment id="13" date="2006-04-17 11:04:12 EDT" author="Kevin Haaland">+1</comment>
		<comment id="14" date="2006-04-26 12:20:47 EDT" author="Steve Northover">I'm really sorry but we are not going to fix this for 3.2.  The new API is goofy.  A (possibly) better solution would be to add an item field to the AccessibleEvent class and fill this in for controls that have items (tables, trees, tab folder etc.).  Since we haven't decided how we want to fix this bug and we are at the end of the 3.2 release cycle, it doesn't make sense to try to implement something now and live with the results forever.

WONTFIX for 3.2.</comment>
		<comment id="15" date="2006-04-27 11:38:12 EDT" author="Keri Tuttle">Since this will not be fixed for Eclipse 3.2, I was wondering how you will pass the Accessibility Check point for "When an image represents a program element, make the information conveyed by the image available in text" I was just wondering so that we could do the same workaround. 

Thank you
Keri</comment>
		<comment id="16" date="2006-04-27 15:42:09 EDT" author="Tod Creasey">When you cannot make an image accessible (like in a label) the usual method is to make sure that the information is available otherwise

either
1) some different accessibility affordance (such as implementing an IAccessible on the widget or a properties dialog)

2) making sure that the information is conveyed elsewhere. For instance the error image in the error dialog is not enough - the title should make it clear it is an error.

Generally using an IAccessible is the best solution as you can convey exactly what you want.</comment>
		<comment id="17" date="2006-06-20 15:52:45 EDT" author="Carolyn MacLeod">Fixed in HEAD &gt; 20060620

For 3.3 we have decided to add the api mentioned in comment 12. This is useful for finding a TreeItem in a Tree, given a childID.

When you are working with a Table, the childID in the AccessibleEvent still represents an indexed TableItem. So you still use table.getItem(childID) to lookup the TableItem corresponding to the event's childID.

But when you are working with a Tree, you need to use the new Display.findWidget(tree, childID) API to look up the TreeItem.
Here is a snippet:

import org.eclipse.swt.*;
import org.eclipse.swt.widgets.*;
import org.eclipse.swt.layout.*;
import org.eclipse.swt.accessibility.*;

public class TreeColumnIconAndTooltipTest {
 static Display display;
 static Shell shell;
 static Tree tree;
 
 public static void main(String[] args) {
  display = new Display();
  shell = new Shell(display);
  shell.setLayout(new GridLayout());  
  tree = new Tree(shell, SWT.MULTI | SWT.FULL_SELECTION);
  tree.setLayoutData(new GridData(GridData.FILL_BOTH));
  tree.setHeaderVisible(true);
  for (int col = 0; col &lt; 3; col++) {
   TreeColumn column = new TreeColumn(tree, SWT.NONE);
   column.setText("Column " + col);
  }
  TreeItem category = new TreeItem(tree, SWT.NONE);
  category.setText("Errors");
  for (int row = 0; row &lt; 3; row++) {
   TreeItem item = new TreeItem(category, SWT.NONE);
   for (int col = 0; col &lt; 3; col++) {
    item.setText(col, "item" + col + row);
    item.setImage(display.getSystemImage(SWT.ICON_ERROR));
    item.setData("Error");
   }
  }
  category.setExpanded(true);
  category = new TreeItem(tree, SWT.NONE);
  category.setText("Warnings");
  for (int row = 0; row &lt; 2; row++) {
   TreeItem item = new TreeItem(category, SWT.NONE);
   for (int col = 0; col &lt; 3; col++) {
    item.setText(col, "item" + col + row);
    item.setImage(display.getSystemImage(SWT.ICON_WARNING));
    item.setData("Warning");
   }
  }
  category.setExpanded(true);
  for (int col = 0; col &lt; 3; col++) {
   TreeColumn column = tree.getColumn(col);
   column.pack();
  }
  tree.getAccessible().addAccessibleListener(new AccessibleAdapter() {
   public void getName(AccessibleEvent e) {
    if (e.childID &gt; ACC.CHILDID_SELF) {
     TreeItem item = (TreeItem)display.findWidget(tree, e.childID);
     if (item != null) {
      String severity = (String) item.getData();
      if (severity != null) {
       e.result = item.getData() + ": " + e.result;
      }
     }
    }
   }
  });
  shell.open();
  while (!shell.isDisposed()) {
   if (!display.readAndDispatch()) display.sleep();
  }
 }
}</comment>
		<comment id="18" date="2006-06-22 14:38:38 EDT" author="Sameh Ayoub">Thanks for providing the fix for this defect. But you said that it will be available for eclipse 3.3 
We have two BP1 defects that are blocked on the fix of this defect for the JET Authoring editor in the RSA Product. 
But our product will be shipped with eclipse 3.21. 

Can you please apply the fix of this defect for 3.21 to allow me to fix my blocked defects? 
Thanks
Sameh</comment>
		<comment id="19" date="2006-06-22 14:48:10 EDT" author="Carolyn MacLeod">Steve - your thoughts?</comment>
		<comment id="20" date="2006-06-22 15:02:27 EDT" author="Steven Wasleski">Accessibility is important to many members of the community particularly because it can be a goverment section 508 compliance issue.  I have heard interest in this bug from a few people.  Do we have a process (probably via the PMC) to add api in a maintenance release as long as it can be done in a completely source and binary compatible manner?  If so, we should look into taking this one through it.  If not, we should probably come up with one.</comment>
		<comment id="21" date="2006-06-22 15:47:05 EDT" author="Steve Northover">I agree.  KH, do you know were I can find the rules (or can you give me PMC approval to break them)?</comment>
		<comment id="22" date="2006-07-10 12:10:56 EDT" author="Frederic Plante">Hi Kevin,

Preventing maintenance release fixes that require backward compatible API changes (both source and binary) would be quite a contrast with the agility displayed so far by the Eclipse platform team.

Please confirm whether this defect can be fixed in 3.2.1

  Thanks</comment>
		<comment id="23" date="2006-07-20 11:51:09 EDT" author="Grant Gayed">(Note that by setting the target to 3.3M1 I didn't mean to imply that a decision has been made regarding the possibility of this bug appearing in 3.2.1, I was just doing a pass of recently fixed bugs without targets.  This bug's target can change later if appropriate).</comment>
		<comment id="24" date="2006-08-16 12:54:36 EDT" author="Steve Northover">We can't fix this for 3.2.1 because it involves new API.  Even if we added the API, can the code above us be changed to call it?</comment>
		<comment id="25" date="2006-08-16 14:39:42 EDT" author="Carolyn MacLeod">The following should work for you in 3.2 (and 3.2.1).
Take the snippet in comment 17 and instead of calling:
   TreeItem item = (TreeItem)display.findWidget(tree, e.childID);
call:
   TreeItem item = (TreeItem)display.findWidget(tree.handle, e.childID);

The problem with this (and the reason we did not recommend it in the first place) is:
- the 'handle' field is not really public. It is just public to allow cross-package access within the SWT implementation.
- this will work on Windows, but it will *not* work on all platforms.
- to ensure that your code compiles on all platforms, note that you can ask a Control (like Tree) for its handle, but not a Widget (like TreeItem).

You can use this when you ship with 3.2 or 3.2.1, but we recommend that you upgrade to the new api when you ship with 3.3.</comment>
		<comment id="26" date="2006-11-06 09:15:25 EST" author="Jan Lohre">*** Bug 162737 has been marked as a duplicate of this bug. ***</comment>
      </comments>
    </buginformation>
    <fixedCommits>
      <commit Id="4db032857f93b2241fad9d301956188aae7bf246" author="Carolyn MacLeod" date="2006-06-21 04:35:16"/>
          <file name="bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Display.java">
              <method name="findWidget" returnType="Widget" parameters="int int"/>
          </file>
          <file name="bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Display.java">
              <method name="findWidget" returnType="Widget" parameters="int int"/>
          </file>
          <file name="bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/Display.java">
              <method name="findWidget" returnType="Widget" parameters="int int"/>
          </file>
          <file name="bundles/org.eclipse.swt/Eclipse SWT/photon/org/eclipse/swt/widgets/Display.java">
              <method name="findWidget" returnType="Widget" parameters="int int"/>
          </file>
          <file name="bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Display.java">
              <method name="findWidget" returnType="Widget" parameters="int int"/>
          </file>
      </commit>
    </fixedCommits>
  </bug>
  <bug id="84911" opendate="2005-02-10 11:41:00" fixdate="2007-02-19 16:52:00">
    <buginformation>
      <summary>Unspecified methods</summary>
      <description>In the specs there are some methods that are probably intended to be platform/implementation specific. We feel this should be stated. You find the details in the file attached. However, broadly speaking, the functionality of methods such as toString(), hashCode() ane equals() has not been specified. Could you either say that these are totally implementation dependent, or, if this is not the case, give some functionality guidelines.</description>
      <comments>
		<comment id="1" date="2005-02-10 11:42:08 EST" author="Frederic Philippe">Created attachment 17824 [details]
DETAILS</comment>
		<comment id="2" date="2005-02-16 04:23:47 EST" author="Yu You">1) org.eclipse.swt.widgets.Button
setText 
Are button mnemonics obligatory to support?  Same applies to 
org.eclipse.swt.widgets.Label and org.eclipse.swt.widgets.MenuItem. ( Mnemonics 
are usable in devices with keyboard but are they used in touch screen devices?)

2) org.eclipse.swt.widgets.Text setEchoChar
Should "setEchoChar" become deprecated if PASSWORD style is used? or say it is 
implementation-dependent?</comment>
		<comment id="3" date="2005-02-16 08:44:23 EST" author="Mark Rogalski">From a usability standpoint, mnemonics should not be shown if a full keyboard 
is not available with which to use them (independent of touch screen 
capabilities.) Thus, perhaps the doc should simply describe the mnemonic as a 
hint.

&gt;&gt;Should "setEchoChar" become deprecated if PASSWORD style is used? 
&gt;&gt;or say it is implementation-dependent?

Not sure why you would deprecate setEchoChar for the style where it is most 
commonly used. Can the javaDoc specify that the echo character may be fixed on 
some platforms?</comment>
		<comment id="4" date="2005-02-16 14:42:33 EST" author="Steve Northover">CAR to investigate the specifics.

Mnemonics are already a hint on the Macintosh.  However, the API's still need 
to accept them and strip them out before calling the underlying operating 
system.  For example, "A &amp;&amp; B" will draw as "A &amp; B".

Text.setEchoChar() doesn't need to be deprecated.</comment>
		<comment id="5" date="2005-02-17 02:34:20 EST" author="Yu You">(In reply to comment #3)
&gt; From a usability standpoint, mnemonics should not be shown if a full keyboard 
&gt; is not available with which to use them (independent of touch screen 
&gt; capabilities.) Thus, perhaps the doc should simply describe the mnemonic as a 
&gt; hint.

Agree. Javadoc is the document developers look at, not source code.

&gt; &gt;&gt;Should "setEchoChar" become deprecated if PASSWORD style is used? 
&gt; &gt;&gt;or say it is implementation-dependent?
&gt; Not sure why you would deprecate setEchoChar for the style where it is most 
&gt; commonly used. Can the javaDoc specify that the echo character may be fixed 
on 
&gt; some platforms?

The reason is: if you donot explicitly mention "..may be fixed on some 
platforms" in javadoc, "setEchoChar('@')" ends up showing "*" instead. 
Developers certainly will complain about this as a lousy implementation.
Also our implementation can not pass the test because such behavior's not 
definied in the specification (javadoc).</comment>
		<comment id="6" date="2005-02-17 09:29:56 EST" author="Steve Northover">It think that eSWT needs to decide whether it wants to include setEchoChar() 
in the subset of SWT.  However, the desktop SWT has no intention of 
deprecating the API at this time.  It would be really strange if API were 
deprecated only in one place.

In any case, this bug report is not the right place to discuss this.  Please 
open a bug report about both issues (mnemonics and setEchoChar()).</comment>
		<comment id="7" date="2005-06-22 09:50:21 EDT" author="Carolyn MacLeod">Fixed &gt; 20050622.
These changes will be in eclipse 3.1 as of RC4.
The Button, Label, and MenuItem setText javadoc already mention that platforms 
may not all support mnemonics.
I put some words in Text.setEchoChar that should help.</comment>
      </comments>
    </buginformation>
    <fixedCommits>
      <commit Id="06b49e6b617fb3a7c950ffef3f6da71106d90fcf" author="Carolyn MacLeod" date="2005-06-22 05:27:55"/>
          <file name="bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/SashFormData.java">
              <method name="getName" returnType="String" parameters=""/>
          </file>
          <file name="bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StackLayout.java">
              <method name="getName" returnType="String" parameters=""/>
          </file>
          <file name="bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyleRange.java">
              <method name="clone" returnType="Object" parameters=""/>
          </file>
          <file name="bundles/org.eclipse.swt/Eclipse SWT OLE Win32/win32/org/eclipse/swt/ole/win32/Variant.java">
              <method name="setData" returnType="void" parameters="int"/>
          </file>
          <file name="bundles/org.eclipse.swt/Eclipse SWT PI/win32/org/eclipse/swt/internal/win32/TCHAR.java">
          </file>
          <file name="bundles/org.eclipse.swt/Eclipse SWT Program/win32/org/eclipse/swt/program/Program.java">
              <method name="hashCode" returnType="int" parameters=""/>
          </file>
          <file name="bundles/org.eclipse.swt/Eclipse SWT/common/org/eclipse/swt/internal/image/PngChunk.java">
              <method name="getChunkType" returnType="int" parameters=""/>
          </file>
          <file name="bundles/org.eclipse.swt/Eclipse SWT/common/org/eclipse/swt/layout/FillLayout.java">
              <method name="layout" returnType="void" parameters="Composite boolean"/>
          </file>
          <file name="bundles/org.eclipse.swt/Eclipse SWT/common/org/eclipse/swt/layout/FormAttachment.java">
              <method name="solveY" returnType="int" parameters="int"/>
          </file>
          <file name="bundles/org.eclipse.swt/Eclipse SWT/common/org/eclipse/swt/layout/FormData.java">
              <method name="getTopAttachment" returnType="FormAttachment" parameters="Control int boolean"/>
          </file>
          <file name="bundles/org.eclipse.swt/Eclipse SWT/common/org/eclipse/swt/layout/FormLayout.java">
              <method name="layout" returnType="Point" parameters="Composite boolean int int int int boolean"/>
          </file>
          <file name="bundles/org.eclipse.swt/Eclipse SWT/common/org/eclipse/swt/layout/GridData.java">
              <method name="getName" returnType="String" parameters=""/>
          </file>
          <file name="bundles/org.eclipse.swt/Eclipse SWT/common/org/eclipse/swt/layout/GridLayout.java">
              <method name="getName" returnType="String" parameters=""/>
          </file>
          <file name="bundles/org.eclipse.swt/Eclipse SWT/common/org/eclipse/swt/layout/RowData.java">
              <method name="getName" returnType="String" parameters=""/>
          </file>
          <file name="bundles/org.eclipse.swt/Eclipse SWT/common/org/eclipse/swt/layout/RowLayout.java">
              <method name="layoutVertical" returnType="Point" parameters="Composite boolean boolean int boolean"/>
          </file>
          <file name="bundles/org.eclipse.swt/Eclipse SWT/common/org/eclipse/swt/widgets/Event.java">
          </file>
      </commit>
    </fixedCommits>
  </bug>
  <bug id="84906" opendate="2005-02-10 11:23:00" fixdate="2007-02-19 16:52:00">
    <buginformation>
      <summary>We found some typos or broken links.</summary>
      <description>See file attached.</description>
      <comments>
		<comment id="1" date="2005-02-10 11:23:55 EST" author="Frederic Philippe">Created attachment 17822 [details]
TYPOS</comment>
		<comment id="2" date="2005-02-11 11:47:08 EST" author="Lynne Kues">Note that the style of making a reference to a class/method in the @see tag 
(e.g., Control#moveAbove) does not work without specifying a tag.  To make a 
link outside of the @see tag, you can use the @link tag:

    {@link class#member label}

For example:

/* 
The blah blah is used by {@link Control#computeSize  Control.computeSize(int, 
int, boolean)}.
*/</comment>
		<comment id="3" date="2005-02-16 04:20:32 EST" author="Yu You">1) org.eclipse.swt.graphics.Device
getSystemColor() &amp; getSystemFont() 
a typo: "free'd" -&gt; should it be "set free"?

2) org.eclipse.swt.widgets.Listener
 â¦ will will be sent to the instance. typo: will will

3) org.eclipse.swt.widgets.Table
 ...and issue notificiation when selected. typo: notificiation</comment>
		<comment id="4" date="2005-02-24 08:39:07 EST" author="Yu You">org.eclipse.set.widgets.Text.java

" * &lt;dt&gt;&lt;b&gt;Events:&lt;/b&gt;&lt;/dt&gt;
 * &lt;dd&gt;DefaultSelection, Modify, Verify&lt;/dd&gt;"

should

" * &lt;dt&gt;&lt;b&gt;Events:&lt;/b&gt;&lt;/dt&gt;
 * &lt;dd&gt;Selection, DefaultSelection, Modify, Verify&lt;/dd&gt;"</comment>
		<comment id="5" date="2005-03-15 05:09:18 EST" author="Yu You">org.eclipse.swt.widgets.ProgressBar

in the method "computeSize(in, int, boolean)
the javadoc starts with "Description copied from class: Control 
Returns the preferred size of the receiver".

The first line "Description copied from class: Control" must be removed.

I guess there're same copies in other controls,for example, at least I found it 
in Scale too.</comment>
		<comment id="6" date="2005-03-28 21:01:45 EST" author="Steve Northover">CAR, please go ahead and fix the obvious ones but be careful not to add things 
or change meaning.  For example, Yu suggests that Text controls support 
SWT.Selection.  They do not.</comment>
		<comment id="7" date="2005-06-21 17:29:51 EDT" author="Carolyn MacLeod">Fixed &gt; 20050621.

Made about 90% of the suggested changes.
Updates will be in 3.1 RC4.</comment>
      </comments>
    </buginformation>
    <fixedCommits>
      <commit Id="03b2434a9978fa54eb996a51c7fdd80da2045f21" author="Carolyn MacLeod" date="2005-06-22 03:41:02"/>
          <file name="bundles/org.eclipse.swt/Eclipse SWT/common/org/eclipse/swt/layout/FormLayout.java">
          </file>
      </commit>
    </fixedCommits>
  </bug>
  <bug id="14654" opendate="2002-04-25 13:35:00" fixdate="2007-04-09 11:23:00">
    <buginformation>
      <summary>[typing] Single line selection on triple-click</summary>
      <description>This is a common and convenient behavior for text editors/IDEs which is missing. Would be nice to have it. Switching to keyboard and doing &amp;quot;shift+arrow down&amp;quot; seems like a lot more effort for achieving the same effect.</description>
      <comments>
		<comment id="1" date="2002-04-25 14:11:19 EDT" author="McQ Wilson">Some people like this functionality, and some don't. In addition, whether or 
not this makes sense is at least partially related to the domain of the editor 
(for example, "select-a-line" makes sense for a Java editor, but "select-a-
sentance" or "select-a-paragraph" might be more appropriate for a plain text 
editor).

There are two possible places where it could show up. One is in the native 
widgets, in which case, if it happens at all it will be as a side-effect of 
the normal functioning of the native widget.

The other possibility is in the StyledText code. StyledText is a custom widget 
whose behavior is defined by the needs of the Eclipse UI team. It *is* 
platform neutral, so if triple-click were to be added, it would show up on all 
platforms.

Note that, few (none?) of the operating systems SWT is implemented on provide 
triple-click notification, so this would have to be done by detecting the 
event times in the StyledText code.

Moving to the UI team for consideration.</comment>
		<comment id="2" date="2002-04-25 14:26:55 EDT" author="Nick Edgar">Defer for consideration after 2.0.
Semantics based selection expansion may be preferable even in code (see Edit / 
Expand Selection).</comment>
		<comment id="3" date="2002-08-12 09:29:02 EDT" author="Randy Giffen">Reopen to move</comment>
		<comment id="4" date="2002-08-12 09:29:19 EDT" author="Randy Giffen">Move to text</comment>
		<comment id="5" date="2002-09-12 11:28:07 EDT" author="Kai-Uwe Maetzel">*** Bug 21310 has been marked as a duplicate of this bug. ***</comment>
		<comment id="6" date="2002-11-10 13:49:09 EST" author="Alex Chaffee">&gt; Some people like this functionality, and some don't.

Then make it optional, but *please* make it.  Triple-click has been an 
important part of code editors (starting on the Mac, but soon spreading 
everywhere) for over ten years.

Make sure you also implement triple-click-and-drag (which selects and deselects 
entire lines as the cursor is dragged over them).

By the way, double-click-and-drag is also unimplemented, which is unfortunate.

See http://developer.apple.com/techpubs/mac/HIGuidelines/HIGuidelines-205.html 
for the thoughts of people who have thought about this a lot (they agree that 
in different contexts, triple-click may mean "select sentence" or "select 
paragraph").</comment>
		<comment id="7" date="2002-11-10 18:51:55 EST" author="Bob Foster">1. Paragraph selection only makes sense for editors that wrap. Otherwise, there
are only lines.

2. If you do happen to implement selection drag and drop, please make it
optional. It's an invention of the devil.</comment>
		<comment id="8" date="2002-11-11 12:15:00 EST" author="Alex Chaffee">&gt; If you do happen to implement selection drag and drop, please make it
optional. It's an invention of the devil.

Absolutely!  Let me be clear: double-click-and-drag is when you click down-up-
down, then immediately start to drag the cursor.  It expands the selection 
area, selecting entire words (*not* merely individual characters) as those 
words come under the cursor.  It's akin to shift-control-rightarrow in Word and 
other editors.

Triple-click-and-drag expands and shrinks the selection line by line.

Selection drag and drop is stupid and whoever invented it should be dragged 
over broken glass and dropped in a spiked pit.</comment>
		<comment id="9" date="2003-01-23 05:14:33 EST" author="Zach Pincus">This bug is closely related to bug 22880, which details how to implement this 
click-hold and multiple-click behavior.

A specific complaint about how double-click and drag (often referred to as 1.5 
click: mouse-down, mouse-up, mouse-down, and hold while you drag is not quite 2 
full clicks!) should work can be found in bug 21336.

Regarding these questions, it should be noted that on almost all editors, on 
almost all platforms, double-clicking selects a word and double-clicking and 
then dragging (1.5 clicks and a drag) extends the selection word-wise. Triple-
click behavior is less uniform.

While it may be annoying to some that triple-clicking doesn't select a line 
(and I agree that it should!), the behavior on 1.5-click and drag is truly 
asinine:
If you 1.5-click on a word and then move the mouse, the selection extends by 
characters, not by words. Then, on mouseup, the selection reverts back to only 
include the originally clicked-on word. This is doubly unexpected and bad 
behavior, and should be fixed in the same set of fixes that defines triple-
click behavior.</comment>
		<comment id="10" date="2003-03-06 09:59:13 EST" author="Alex Chaffee">For the double-click-and-drag issue, see (and vote for!) bug 33193</comment>
		<comment id="11" date="2004-02-11 16:39:34 EST" author="Dani Megert">*** Bug 51725 has been marked as a duplicate of this bug. ***</comment>
		<comment id="12" date="2004-09-03 04:05:59 EDT" author="Marc Guenther">Created attachment 14386 [details]
patch for double click, hold and drag and triple click

I have attached a small patch which allows you to:
- double click, hold and drag to select multiple words
- triple click to select lines

the triple click stuff works only on MacOSX (carbon). The double click might
work on other OS' too, but I don't have access to other boxes.

The patch is against version R3_0.

Basically I made these changes:

1. for triple click:

org.eclipse.swt: 
  I introduced a 'int click_count' member to Event.java and MouseEvent.java.
  This is set from inside of sendMouseEvent() in Control.java and works
  with any number of mouse clicks

org.eclipse.jface.text:
  Added a new class ITextTripleClickStrategy, which adds one method
  tripleClicked()
  In TextViewer$TextDoubleClickStrategyConnector I added
  fClickCount and mouseDown(). fClickCount remebers the click count
  of the last mouseDown
  In mouseUp() if the fClickCount is 3, I send a tripleClicked() if the
  Strategy is a ITextTripleClickStrategy
  DefaultTextDoubleClickStrategy implements ITextTripleClickStrategy
  and adds tripleClicked() method

org.eclipse.jdt.ui:
  JavaDoubleClickSelector also implements ITextTripleClickStrategy
  and adds tripleClicked() method

2. for double click n drag support (this should work on all platforms)

org.eclipse.jface.text.DefaultTextDoubleClickStrategy
  and
org.eclipse.jdt.ui.JavaDoubleClickSelector
  
  Changed the doubleClicked() method to use the start AND end point
  of the mouse selection to calculate the resulting selection.

  JavaStringDoubleClickSelector calls super instead of selectWord()
  directly

Comments:
- The feedback during the mouse drag is still wrong.
- Shift-Clicking doesn't remember that the original click was a
  double/triple click (always selects characters)
- To make this work on Win* and other OS', basically what I do here in
  SWT/carbon: org.eclipse.swt.widgets.Control.sendMouseEvent()
  (getting the click count and store it into the Event) has to be duplicated.
  Everything else should work from there.</comment>
		<comment id="13" date="2004-09-03 04:16:19 EDT" author="Marc Guenther">Created attachment 14387 [details]
zip file for double/triple click patch

trying to submit again, last attachment was displayed as text...</comment>
		<comment id="14" date="2004-09-03 04:19:04 EDT" author="Dani Megert">Thanks for the patch. We will look at this when we attack the corresponding 3.1
plan item:

- interaction (mouse, keyboard)
    * selection modes (line selection, word selection)</comment>
		<comment id="15" date="2004-12-04 14:53:02 EST" author="Peter Eastman">Handling of double/triple clicks is something that a lot of editors get wrong in a variety of subtle ways.  
Here are the details of what I consider to be the "correct" behavior.

1. Double-click should select the clicked work on the second mouse press (*not* release).  It should 
*not* select spaces or punctuation marks to either side of the word.  Double-clicking on a space or 
punctuation mark should select only that character.

2. Double-click-drag should select a sequence of whole words.

3. Triple-click should select the clicked line, *including* the carriage return at the end of it.  (Swing 
messes up on that one.)  Again, selection should occur on mouse down, not mouse up.  It should not 
matter where in the line you click.  In particular, triple-clicking to the right of the last character should 
still select the line.  (IDEA 3.x messed up on that one, but they fixed it in 4.0.)

4. Triple-click-drag should select a series of whole lines, again including the carriage return at the end 
of the last line.  (jEdit, which otherwise gets everything right, messes up on that last carriage return.)</comment>
		<comment id="16" date="2005-02-25 15:37:03 EST" author="Felipe Heidrich">*** Bug 82398 has been marked as a duplicate of this bug. ***</comment>
		<comment id="17" date="2005-03-29 16:34:50 EST" author="Dani Megert">*** Bug 28733 has been marked as a duplicate of this bug. ***</comment>
		<comment id="18" date="2005-06-07 19:22:33 EDT" author="Chris Wiebe">Created attachment 22577 [details]
patch to add support for triple-clicking

This patch adds support for triple-clicking (or as many clicks as you like) to
select an entire line. I have taken a simliar approach to Marc Guenther's
patch, only this one doesn't require any swt changes and is limited to just one
plugin - org.eclipse.jface.text.

This patch also changes the double- and triple-click to select on the mouse
down event, rather than the mouse up event.  This behaviour is consistent with
the way most text editors work (I tried several editors on both Mac OS and
Windows and they all selected on mouse-down).  If people prefer the current
Eclipse way, perhaps this could be made into a preference option.</comment>
		<comment id="19" date="2005-06-24 17:52:23 EDT" author="Chris Wiebe">Who do we have to bribe to get this feature implemented? ;) Looks like this bug has been open for over 3 
years now.  Is there any chance of getting something like an extension point in place for 3.1?  Please throw 
us poor folks a bone!</comment>
		<comment id="20" date="2005-06-27 06:55:14 EDT" author="Markus Keller">Chris, I'm sure the Text team will look at your patch after 3.1 is out. I guess
it came a bit too late for inclusion in 3.1 since we were already in a
stabilization lockdown phase by that time.

I've tried your patch, and I discovered that it does not implement several items
of Peter's comment 15 "correctly" (IMO, that list shows the desired behavior,
except for double-clicking a tab or a space, which should select all adjacent
whitespace except for line delimiters).

1. Double-clicking on a tab before a word as in
  System.out.println();
selects the tab and the next word. Should only select the tab(s) before the word.

2. Double-click-and-hold does not expand the selection word-wise, but
character-wise.

3. Triple-click should select the clicked line, *including* the line
delimiter(s) at the end of it. The patch misses the line delimiter.

4. See 2. and 3.</comment>
		<comment id="21" date="2005-06-27 07:26:31 EDT" author="Marc Guenther">Hi Markus,
&gt; Chris, I'm sure the Text team will look at your patch after 3.1 is out.
Sorry to say, but the same I heard last year about my patch, it will be worked on after 3.0 comes out. 
But unfortunately that never happened. So who do we need to bribe again? :-)

btw, I agree with the desired behauvoir you describe, espacially about double clicking on white space. 
Chris, are you interested in implementing the changes Markus described? Otherwise I might give it a 
try.</comment>
		<comment id="22" date="2005-06-27 13:36:22 EDT" author="Chris Wiebe">I agree that Peter's way (comment 15) is the "right way."  It should be the default behaviour for a generic 
text editor, with the ability to override/customize behaviour for different kinds of editors.  My patch was a 
bit too simplistic.

Marc, feel free to tackle this... :)</comment>
		<comment id="23" date="2005-06-28 04:42:38 EDT" author="Dani Megert">&gt;&gt; Chris, I'm sure the Text team will look at your patch after 3.1 is out.
&gt;Sorry to say, but the same I heard last year about my patch, it will be worked
&gt;on after 3.0 comes out. 
&gt;But unfortunately that never happened. So who do we need to bribe again? :-)

Please read comment 14 again ;-) The mentioned item wasn't on the committed
items list and there was unfortunately not enough time to attack it, that's why
we did not look at these patches yet.

There were already several comments in that PR what should/will happen upon
double- and tripple-click: this is up to each viewer / editor e.g. Java defines
its own double-click strategy and hence changes/whishes regarding the
functioning of double- and tripple-click in individual editors should be placed
there.

Chris, one thing that I didn't like in your patch is the 'multi'. I suggest to
keep it to "Tripple" otherwise we should also add support registering of more
than one multi click strategy.</comment>
		<comment id="24" date="2005-06-28 04:49:04 EDT" author="Dani Megert">Note that we are still waiting for an answer whether StyleText will provide
tripple-click mouse events (see bug 23614). I've just pinged them again in the bug.</comment>
		<comment id="25" date="2005-06-28 14:23:58 EDT" author="Chris Wiebe">&gt; Chris, one thing that I didn't like in your patch is the 'multi'. I suggest to
&gt; keep it to "Tripple" otherwise we should also add support registering of more
&gt; than one multi click strategy.

Actually this was deliberate.  It's very annoying to have to do precisely 3 clicks to select a line.  What most 
editors do is treat 3 or more clicks the same as a triple-click, but they definitely don't limit you to exactly 
3 clicks.  You're probably right though in that no one's going to want to register more than one multi-click 
strategy (ie if 3  clicks do this, if 4 clicks do this, etc).  Calling it "Triple" rather "Multi" is fine as long as it 
still works with &gt;3 clicks.</comment>
		<comment id="26" date="2005-08-25 08:03:38 EDT" author="Dani Megert">*** Bug 107974 has been marked as a duplicate of this bug. ***</comment>
		<comment id="27" date="2006-01-12 10:36:27 EST" author="Sean Montgomery">Just FYI, as a pseudo-workaround until this feature gets implemented - if you're in a Java editor and have the line number display turned on, clicking on the line number selects the line.

Unfortunately it doesn't appear to get the newline, though, grrr.  At least not in Eclipse 3.2M4.  But that's another bug.</comment>
		<comment id="28" date="2006-02-13 14:49:55 EST" author="Marc Guenther">see bug 5138, comment 16 for a patch for triple click on MacOSX and double click and drag</comment>
		<comment id="29" date="2006-02-14 05:00:26 EST" author="Dani Megert">Marc, I suggest to add the SWT portion of the tripple-click patch/comments to bug 23614.</comment>
		<comment id="30" date="2006-05-25 16:24:41 EDT" author="Dani Megert">*** Bug 143724 has been marked as a duplicate of this bug. ***</comment>
		<comment id="31" date="2006-06-16 09:48:46 EDT" author="Sean Montgomery">Now that the 3.3 design phase is here, I'm sure I speak for all the voters for this bug and tons of other Eclipse users with a Mac background when I say this really needs to be addressed.

There are 27 votes for this bug, but far fewer votes for 23614 which is blocking it.  Vote for the blocker, too!

And all you lurkers out there: vote.  You know you want your triple-click.</comment>
		<comment id="32" date="2006-08-05 22:35:39 EDT" author="Kendall Lister">I'm trying to be helpful, so I apologise if this is a mistake. The bug that was blocking this one is marked FIXED now, so if someone was waiting for that to happen before fixing this one, go go go! :)</comment>
		<comment id="33" date="2006-08-16 05:36:24 EDT" author="Marc Guenther">My old patch ported to 3.2 is available here:
http://www.biffy-berlin.de/marc/doubleTripleClick_patch_320.zip

binaries are here:
http://www.biffy-berlin.de/marc/doubleTripleClick_jars_320.zip

Marc</comment>
		<comment id="34" date="2007-02-27 03:45:21 EST" author="Marc Guenther">And here's my old patch ported to 3.2.2:
http://www.biffy-berlin.de/marc/doubleTripleClick_patch_322.zip</comment>
		<comment id="35" date="2007-03-16 13:16:33 EDT" author="McQ Wilson">In case this is being held up by my negative comments in comment #1, I don't have a problem with this going into 3.3. If there are API changes, it still needs a request on the pmc mailing list.</comment>
		<comment id="36" date="2007-03-16 13:18:25 EDT" author="Dani Megert">It's there since a few minutes :-)</comment>
		<comment id="37" date="2007-03-16 13:27:00 EDT" author="McQ Wilson">Ah, Dani, you know how slow I am. ;-)

+1 to the API changes.</comment>
		<comment id="38" date="2007-03-18 07:56:07 EDT" author="Dani Megert">Fixed in HEAD.
Available in builds &gt; N20070318-0010.

Per default triple-click will select the line using the new LineSelectionTextTripleClickStrategy. Clients can override this via SourceViewerConfiguration.getTripleClickStrategy(...).

NOTE: currently triple-click only works if text drag and drop is disabled, see bug 177927 for details.</comment>
		<comment id="39" date="2007-03-20 06:05:10 EDT" author="Markus Keller">Verified in I20070320-0010.

I've added bug 178208 and bug 178209 for subtleties from comment 15, and bug 178210 for comment 20.</comment>
		<comment id="40" date="2007-03-21 17:07:00 EDT" author="Dani Megert">Making single-line selection on triple-click worked just fine but it turns out that triple-click + mouse move to select multiple lines is hard to do smooth from outside StyledText, see discussions in bug 138579. After discussion with SWT we agreed to pull out the flexibility to configure triple-click from outside but instead directly provide single line selection on triple-click and multi line selection on triple-click + mouse move through the StyledText widget.

This means the following new APIs got removed again for M6:
  ITextTripleClickStrategy
  ITextViewerExtension7.setTextTripleClickStrategy(...)
  LineSelectionTextTripleClickStrategy
  SourceViewerConfiguration.getTripleClickStrategy(...)

For M6 I left internal code in place so that at least single line selection on triple-click works.</comment>
		<comment id="41" date="2007-03-21 17:08:18 EDT" author="Dani Megert">Moving to SWT to provide this feature for 3.3.</comment>
		<comment id="42" date="2007-03-22 17:44:07 EDT" author="Felipe Heidrich">Dani, in StyledText - in our initial design - if you disable double click (StytedText#setDoubleClickEnable(false)) it will disable triple-click too.
Is that okay ? </comment>
		<comment id="43" date="2007-03-23 05:59:18 EDT" author="Dani Megert">&gt;Dani, in StyledText - in our initial design - if you disable double click
&gt;(StytedText#setDoubleClickEnable(false)) it will disable triple-click too.
&gt;Is that okay ? 
Yes, this is fine. In order to make sure other clients learn about this it might be a good idea to deprecate that method and add a new one, e.g.
setSelectionOn[Mouse]Click(boolean).</comment>
		<comment id="44" date="2007-03-26 17:13:32 EDT" author="Felipe Heidrich">fixed in HEAD &gt; 20070326

Dani, StytedText#setDoubleClickEnable(false) - also disables triple click.

In the future we can decide to deprecate this API and add new ones with better names (right now due the API freeze I can not change anything).</comment>
		<comment id="45" date="2007-03-27 04:30:56 EDT" author="Dani Megert">Thanks. For the next I-build I removed the temporary triple-click code that I added for M6 and fixed bug 5138 which means text viewers now use StytedText#setDoubleClickEnable(true).

Filed bug 179450 to track the API deprecation.</comment>
		<comment id="46" date="2007-03-28 03:12:06 EDT" author="Dani Megert">Sorry, I have to reopen this bug. Either SWT forgot to submit to I20070327-0800 or the feature does not work.</comment>
		<comment id="47" date="2007-03-28 03:58:55 EDT" author="Dani Megert">OK, I now downloaded and verified in N20070328-0010 where it works.

It would really be good if things that are marked with "fixed in HEAD &gt; 20070326" would be available in the upcoming I-build (or at least a statement that it will not be) since most up-stream clients test/sit on the I-builds and not N-builds.</comment>
		<comment id="48" date="2007-03-28 03:59:27 EDT" author="Dani Megert">Verified in N20070328-0010.</comment>
		<comment id="49" date="2007-04-06 18:35:32 EDT" author="Sam Mesh">What about quadruple click?</comment>
		<comment id="50" date="2007-04-09 09:19:18 EDT" author="Ed Burnette">Just don't click 13 times in a row while chanting "Bloody Mary"...
I can't say exactly what happens but you've seen "The Ring", right?</comment>
		<comment id="51" date="2007-04-09 11:23:11 EDT" author="Steve Northover">This bug report is tracking triple click.</comment>
      </comments>
    </buginformation>
    <fixedCommits>
      <commit Id="56d7d44784ad7e2547a3e9a0ea84e65586278aec" author="Felipe Heidrich" date="2007-03-27 06:09:57"/>
          <file name="bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText.java">
          </file>
      </commit>
    </fixedCommits>
  </bug>
  <bug id="82500" opendate="2005-01-10 14:34:00" fixdate="2007-05-17 16:36:00">
    <buginformation>
      <summary>TabFolder should not use PtCalcCanvas in getClientArea</summary>
      <description>Due to the nature of the widget PtPanelGroup, you cannot use PtCalcCanvas to get the widgets drawing area. There is a limitation in photon where you cannot draw a surface outside of a widgets canvas. The tabs are control surfaces. Therefore if you use PtCalcCanvas to determine the drawing area, you will overwrite the tabs. I will attach a patch to fix this.</description>
      <comments>
		<comment id="1" date="2005-01-10 14:36:13 EST" author="Rodney Dowdall">Created attachment 17049 [details]
This is a patch to fix the problem outlined in this PR</comment>
		<comment id="2" date="2005-01-20 21:27:38 EST" author="Steve Northover">Chrix and SN to evaluate the patch.</comment>
		<comment id="3" date="2005-07-21 14:43:55 EDT" author="Silenio Quarti">Created attachment 25147 [details]
screen shot of ControlExample

Appling this patch seems to break the ControlExample. The screen shot
shows the tab content over the tab items.</comment>
		<comment id="4" date="2005-07-21 15:28:56 EDT" author="Rodney Dowdall">Are you using QNX 6.3.0 or QNX 6.2.1? </comment>
		<comment id="5" date="2005-07-21 17:00:34 EDT" author="Rodney Dowdall">This was just the plain control example, correct? </comment>
		<comment id="6" date="2005-07-21 17:40:02 EDT" author="Silenio Quarti">I am using 6.3.0 service pack 1. The screen shot is a plain controlexample 
resized smaller, but you do not need to resize the window to see the problem.</comment>
		<comment id="7" date="2007-04-17 16:14:19 EDT" author="Rodney Dowdall">Created attachment 64096 [details]
Patch that fixes the problem</comment>
		<comment id="8" date="2007-04-17 16:15:31 EDT" author="Rodney Dowdall">Created attachment 64097 [details]
Screenshot

Screen shot of tabs working after applying the patch</comment>
		<comment id="9" date="2007-04-17 16:18:57 EDT" author="Rodney Dowdall">Fixed &gt; 20070417
Changed the tabs so that it calculates the client area.  This can't be done through one specific call.  The area of the basic widget is taken, and then the area of the parent is taken.  The resulting intersecting rectangle between the two , with the margins from the parent applied is returned as the client area.  Needs to be done this way, because in some cases, the basic widget at the back of the panel group can be the size of the entire photon space ( 32000,32000, roughly).  </comment>
      </comments>
    </buginformation>
    <fixedCommits>
      <commit Id="a3530e14bf1a9d7cac50d2cca9f924bc03d518fd" author="rdowdall" date="2007-04-18 05:14:27"/>
          <file name="bundles/org.eclipse.swt/Eclipse SWT/photon/org/eclipse/swt/widgets/TabFolder.java">
              <method name="createHandle" returnType="void" parameters="int"/>
          </file>
      </commit>
    </fixedCommits>
  </bug>
  <bug id="92241" opendate="2005-04-21 11:23:00" fixdate="2007-06-15 10:35:00">
    <buginformation>
      <summary>StyledText should not fill the clipboard on every selection change</summary>
      <description>3.1 stream See &lt;span class="bz_closed"&gt;&lt;a href="show_bug.cgi?id=92209" title="RESOLVED FIXED - [implementation] Scrolling performance degrades with size of selection"&gt;bug 92209&lt;/a&gt;&lt;/span&gt;. Filling the clipboard with the current selection upon every selection change *really* hurts one test case: selecting big editor areas and changing the selection with the arrow keys and holding shift (or selecting large areas with the mouse). Note that this happens on Windows as well as GTK. IMO, copying the entire (almost) document content upon every selection change is way too expensive. Is there a way to avoid this?</description>
      <comments>
		<comment id="1" date="2005-04-21 14:43:20 EDT" author="Veronika Irvine">I have changed it so that the selection is not calculated for the clipboard
unless you are on GTK or MOTIF.  This will speed up Windows and Carbon.

I am investigating ways to reduce the number of times the selection clipboard is
updated on GTK and Motif without losing functionality.</comment>
		<comment id="2" date="2005-04-22 11:55:18 EDT" author="Veronika Irvine">Changed GTK and Motif so that updating the selection clipboard works as follows:

Update on MouseUp - that means if the user selects a large amount of text by
dragging the mouse, the selection clipboard will only be updated when the mouse
is released.  Previously, the selection clipboard was updated every time the
selection changed which was every time the mouse selected a new bunch of text.

Update on KeyUp if the selection has changed since key down,  If the user holds
the arrow key down and selects a large amount of text, repeated key down events
will be sent but only one key up (this is true on most platforms - the only
known exception is Linux Motif - the Xserver there sends repeated KeyDown/KeyUp
events).  This is not the most ideal solution for keyboard selection.  However
there is no reliable way to know when the user is finished selecting - the Shift
 Key is one possibility but it is not completely reliable.</comment>
		<comment id="3" date="2005-04-22 12:02:30 EDT" author="Veronika Irvine">Ideally, the Clipboard would provide a lazy mechanism such that ownership of the
clipboard would be cheap (and could be done every time the sleection changed)
and the data would only be provided at the time when someone pasted the data (or
when the application closed).  This is not currently supported by SWT and will
not make it in for 3.1.  It is described in Bug 92404.

When such a mechanism is in place, SytledText could be changed to use it.</comment>
		<comment id="4" date="2005-04-22 12:39:24 EDT" author="Tom Hofmann">Cool, though - what you described in comment 2 will get us the largest part of
the way (except Motif). I have just added scrolling performance tests that test
the scenario you described (KeyDown until scrolling is over, then KeyUp) as
opposed to our previous test which would send out zillions of KeyDown/KeyUp pairs.

In the new test, you can literally watch the CPU-usage go up as the selection
grows bigger - your change will show up immediately as performance improvement
once it is in...</comment>
		<comment id="5" date="2005-04-22 12:44:23 EDT" author="Veronika Irvine">Actually it is only Motif on Linux that is a problem.  The XServer on most other
Unix operating systems only sends the final KeyUp.</comment>
		<comment id="6" date="2005-04-22 12:49:09 EDT" author="Veronika Irvine">Oh yeah, there is one other optimization I added.  Other applications only place
plain text on the selection clipboard. They do not put RTF text.  So I changed
StyledText to only put plain text for the selection clipboard and plain text
plus RTF text for the regular clipboard.  This should save a bunch of conversion
work.</comment>
		<comment id="7" date="2005-05-16 10:56:49 EDT" author="Veronika Irvine">Downgrading to normal but leaving open to track using a lazy data collection 
mechanism.</comment>
		<comment id="8" date="2007-06-15 10:35:10 EDT" author="Steve Northover">The original problem is fixed and lazy clipboard is tracked elsewhere.  Closing.</comment>
      </comments>
    </buginformation>
    <fixedCommits>
      <commit Id="b2aaf64564a26dcc4801edc4c810d8ab448c7216" author="Veronika Irvine" date="2005-04-23 12:48:45"/>
          <file name="bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText.java">
          </file>
      </commit>
    </fixedCommits>
  </bug>
  <bug id="108591" opendate="2005-09-01 11:50:00" fixdate="2007-08-31 16:56:00">
    <buginformation>
      <summary>SWT StyledText does not support inline Input method</summary>
      <description>On MacOS X, When the user turns on Japanese Input Method and types japanese characters on SWT StyledText, the floating Input Window shows up. Since the inline IM window shows up on SWT Text widget, SWT StyledText widget should also display the inline IM on the widget. This happens also on Chinese and Korean Input method.</description>
      <comments>
		<comment id="1" date="2005-09-01 12:00:37 EDT" author="Hiroyuki Okamoto">Created attachment 26760 [details]
Floating IM window  when typing Japanese on StyledText.</comment>
		<comment id="2" date="2005-10-14 11:42:58 EDT" author="Silenio Quarti">*** Bug 32438 has been marked as a duplicate of this bug. ***</comment>
		<comment id="3" date="2007-05-15 19:55:39 EDT" author="daisuke">(In reply to comment #2)
&gt; *** Bug 32438 has been marked as a duplicate of this bug. ***
&gt; 

Any suggestion for this enhancement(inline input) had not been shown in the comment of 32438...

And this phenomenon still appears in the latest build 3.3M7 on Mac OSX Tiger.

Do Eclipse team have any plan to add support for inline input on Mac OSX?

Or.. they no longer improve this enhancement??</comment>
		<comment id="4" date="2007-05-16 11:05:34 EDT" author="Felipe Heidrich">This is not in the plan yet, but we certanly would like very much to have this feature in. A patch would be very welcome.</comment>
		<comment id="5" date="2007-08-09 15:31:00 EDT" author="Felipe Heidrich">We decide to implement this feature for Mac, GTK, and win32.
ETA 2 weeks.</comment>
		<comment id="6" date="2007-08-23 17:09:28 EDT" author="Felipe Heidrich">Fixed in HEAD &gt; 200700823

I would really appreciate help testing this features, thanks.

Fixed in win32 (xp and up), gtk, carbon.</comment>
		<comment id="7" date="2007-08-27 05:58:55 EDT" author="Seok-Ho, Yang">OS:   MacOS X 10.4
Arch: Intel
WS:   Carbon

Korean and Japanese IMEs are working well in StyledText.
Thanks!</comment>
		<comment id="8" date="2012-12-05 21:06:41 EST" author="Felix Lu">Hi all,

It seems this bug still exists on Cocoa. Do you have a plan to fix it? Thanks.</comment>
		<comment id="9" date="2012-12-06 10:12:39 EST" author="Silenio Quarti">(In reply to comment #8)
&gt; Hi all,
&gt; 
&gt; It seems this bug still exists on Cocoa. Do you have a plan to fix it?
&gt; Thanks.

I tried the Japanese and Chinese IME and they work fine for me. Please open a separate bug if you have a case that is failing and add instructions how to reproduce it.</comment>
		<comment id="10" date="2012-12-07 01:49:56 EST" author="Felix Lu">Thank you Felipe, the new bug is Bug396015.</comment>
      </comments>
    </buginformation>
    <fixedCommits>
      <commit Id="62412468942caaf5947bb17a0f81aff115b7f1d0" author="Felipe Heidrich" date="2007-07-11 07:00:20"/>
          <file name="bundles/org.eclipse.swt/Eclipse SWT PI/win32/org/eclipse/swt/internal/win32/CANDIDATEFORM.java">
          </file>
          <file name="bundles/org.eclipse.swt/Eclipse SWT PI/win32/org/eclipse/swt/internal/win32/OS.java">
          </file>
      </commit>
    </fixedCommits>
  </bug>
  <bug id="108813" opendate="2005-09-06 01:47:00" fixdate="2007-09-20 15:23:00">
    <buginformation>
      <summary>LineStyles in Very Long Lines Takes Forever</summary>
      <description>Well, not literally forever, but way way too long -- users will have to &amp;quot;end process&amp;quot; and start over. &lt;span class="bz_closed"&gt;&lt;a href="show_bug.cgi?id=108806" title="CLOSED FIXED - Very-long-line XML file appears to hang Eclipse"&gt;Bug 108806&lt;/a&gt;&lt;/span&gt; is the most recent one opened against us in WTP, but have seen before for less extreme examples. I'm opening this bug to determine what improvements can be made at SWT level. I've marked as major since &lt;span class="bz_closed"&gt;&lt;a href="show_bug.cgi?id=108806" title="CLOSED FIXED - Very-long-line XML file appears to hang Eclipse"&gt;bug 108806&lt;/a&gt;&lt;/span&gt; was marked as major by user-client. For the case described in &lt;span class="bz_closed"&gt;&lt;a href="show_bug.cgi?id=108806" title="CLOSED FIXED - Very-long-line XML file appears to hang Eclipse"&gt;bug 108806&lt;/a&gt;&lt;/span&gt;, I've noticed that for the 500K character line, we produce about 100K &amp;quot;styles&amp;quot; passed back to StyledText via LineStyleEvent. One thing I noticed, for example, is that a loop in DisplayRenderer goes through each style, eventually calling TextLayout.setStyle. There, is some code in there which is creating a (new) array of TextStyles, and it grows the array one item at a time, ending up using 100K System.arraycopies to grow the array &amp;quot;as they come in one by one&amp;quot;. I did not test, but seems there might be ways to anticipate the size of this array and avoid all those array copies? So, first question ... why is it even requested of us to provide &amp;quot;all StyleRanges&amp;quot; for the line, when they are not all visible, obviously. Could some short cut be made there? Second question, do you think these &amp;quot;DisplayRendering&amp;quot; methods could be made more efficient, to at least allow user to limp along, or would problems just be encountered further along, such as is they try to type. Third question, any advice on how to proceed?</description>
      <comments>
		<comment id="1" date="2005-09-06 12:08:53 EDT" author="Steve Northover">Always, before proceeding, we need a benchmark.  Can someone construct one and 
attach it here?</comment>
		<comment id="2" date="2005-09-18 18:39:43 EDT" author="David Williams">Created attachment 27245 [details]
team project set that pulls in wtp/sse provided line style test

I've attached a psf file to pull in a project from WTP/SSE that could be the
starting point for a "benchmark" test. The test, currently runs continuously
and produces times and data to console log. I think it well demonstrates the
"non linear" nature of the problem, but not sure if/how you'd need the
benchmark to run on a regular basis. 

The project also has a few "data" folders with results of a few runs. (with a
graph even :)  There is a description.txt file in the root of the project that
describes how to run the test, but feel free to let me know if questions. 

Suggestions on how to improve the test or measurement taking would be most
welcome. Thank you.</comment>
		<comment id="3" date="2005-09-18 19:50:43 EDT" author="David Williams">Oh, I meant to mention, the attached test has an oddity that in the case of
exactly 1 style range that covers all 100000 characters the widget seems to 
to not update at all, or correctly. 

I think technically that should be a seperate bug, but would appreicate if
someone in SWT verified the linestyle contract and my mini "one very long line
static content provider" contract are correct. 
Thanks. </comment>
		<comment id="4" date="2005-09-26 16:28:17 EDT" author="David Williams">I've improved the code in the project 
(and, recall, the project is obtainable from eclipse org via the attached team
project set). 

The test now runs as a "JUnit Plugin tests" in developement environment, for 9
specicific sizes of styleRange arrays's (from 1 to 25000) instead of
continuously loop. (Launch the TestManyStyledRanges class to see in action). The
TestManyStyleRanges can be added to the other swt performance tests, when ready. 

I've also added a "data3" folder, which shows the non-liniarity of the
performance, using this "final" version of the tests. 
If this link isn't too long for bugzilla, you might be able to make use of 
if to see result easily. 

http://dev.eclipse.org/viewcvs/index.cgi/%7Echeckout%7E/wst/components/sse/development/org.eclipse.wst.sse.tests.linestyle/lineStyleData/data3/dataLinux1_files/image001.gif?cvsroot=WebTools_Project


Let me know what you think of tests and/or how else I can help. 

thanks, </comment>
		<comment id="5" date="2005-09-27 18:48:43 EDT" author="Felipe Heidrich">I ran your test case.
I knew the algorithm is not linear. Every time a style is added to a 
TextLayout it needs to verify if the style actually changes the TextLayout 
(requires shape for new glyph, new metrics, whatever) or not. So as the list 
of styles grows slower the processe becomes.

Anyhow, you said the time is waste in array init and array copy, so maybe the 
fix is to add a setStyles(TextStyle[], int[], int[]) to TextLayout and change 
StyledText to use it. Not sure how much faster that would be.

Note: this is not high priority IMO because lines usually don't have more then 
100 styles.
Note: the application can try to merge styles before setting them on 
StyledText. I can't think of a application that needs 2500 different styles in 
the same line.

Steve, in Tree and Table you almost add a setItemCount API, would something 
like that help here?</comment>
		<comment id="6" date="2005-09-27 23:36:50 EDT" author="David Williams">Thanks for taking a look, Felipe. 

I agree is not high priority to quickly handle a huge number of ranges, 
but, our problem are these unusual cases where "one line" is basically the whole 
file (since it contains no line breaks) and in those cases when a user
unknowingly opens such a file, the workbench appears to "freeze up" ... 
for a long time. 

One thing I'll explore is a fix on our end, by detecting huge number of ranges 
and "truncating" them ... so basically the end of any of these "huge line" cases
would not be highlighted, or bolded, etc. This would at least allow user to
continue, look at the contents, and decide if they wanted to format the file,
add line breaks, etc. [Suggestions welcome, and, if this is only solution, I
would suggest some API documentation so providers know their responsibilities]. 

I would appreciate, though, some exploration of using setStyles(TextStyle[],
int[], int[]) .. as I'm pretty sure it is the repeated array copy that's the 
non-linear part of the problem ... and, I'm not sure, but I figure non-linear is
non-linear ... a "major" problem at large N, but a "little" problem even at
moderate N. 

BTW, if you'd like to add this or similar test as standard swt benchmark, 
let me know if you'd like me to rename (to remove "wst" part of name) or 
other improvements. 

Thanks much. </comment>
		<comment id="7" date="2005-09-28 02:45:46 EDT" author="David Williams">Actually, now that I've backed up a little and looked closer at the code, I'm
wondering if a "use case" has been omitted when TextLayout was added. 

In StyledText, the setStyle methods are clearly documented as 
 * Should not be called if a LineStyleListener has been set since the 
 * listener maintains the styles.

And, in fact, that's one reason why we use LineStyleListeners ... I *want* to
manage them. 

But, in TextLayout, there is only the setStyle method, and it seems to do all its 
own "maintaining of the styles", instead of trusting the LineStyleListener to do
it. It seems in the case when LineStyleListener is being used, nearly all the
"merging and managing" that TextLayout::setStyle is doing could simply be
omitted. That'd be lots faster :)  I'm probably just missing something, but
seems to me one approach to this is for TextLayout to "know" if a
LineSytleListener is being used, and if so, take a different, more optimized
code path. 

Am I missing some fundamental changes in the desgin? 
 </comment>
		<comment id="8" date="2006-05-09 17:29:13 EDT" author="Felipe Heidrich">*** Bug 138959 has been marked as a duplicate of this bug. ***</comment>
		<comment id="9" date="2006-05-11 02:18:22 EDT" author="Dani Megert">*** Bug 141014 has been marked as a duplicate of this bug. ***</comment>
		<comment id="10" date="2006-05-11 11:35:03 EDT" author="Felipe Heidrich">reply to comment #7.
&gt;Am I missing some fundamental changes in the desgin? 

TextLayout is a graphics element (like a GC or a Region). You created when you need, set the data, use and dispose. I don't use TextLayout to manage styles for StyledText. Of course, when you set a style in TextLayout it needs to update its internal data structure - and this where I'm working to improve.
I know a duplicate the style data in StyledText and TextLayout, but I only keep a very small number of TextLayout around. </comment>
		<comment id="11" date="2006-05-11 11:42:11 EDT" author="Felipe Heidrich">Created attachment 41139 [details]
TextLayoutSetStylePerformanceTest

times on my machine:
Count: 5000 time: 266(ms) - ratio 0.0532
Count: 10000 time: 1453(ms) - ratio 0.1453
Count: 20000 time: 11407(ms) - ratio 0.57035
Count: 40000 time: 45078(ms) - ratio 1.12695
Count: 80000 time: 167891(ms) - ratio 2.0986375

I rewrote TextLayout to grow the internal arrays faster and I got the number down to:
Count: 5000 time: 16(ms) - ratio 0.0032
Count: 10000 time: 46(ms) - ratio 0.0046
Count: 20000 time: 62(ms) - ratio 0.0031
Count: 40000 time: 125(ms) - ratio 0.003125
Count: 80000 time: 250(ms) - ratio 0.003125</comment>
		<comment id="12" date="2006-05-11 11:46:31 EDT" author="Felipe Heidrich">Maybe we don't need to add setStyles(TextStyle[], int[], int[]), the test in comment #11 proves that setStyle(TextStyle, int, int) can be fast enough.

Still, this doesn't fix Bug 138959, now it dies with a out of memory exception.</comment>
		<comment id="13" date="2006-09-04 03:27:45 EDT" author="Dani Megert">*** Bug 155890 has been marked as a duplicate of this bug. ***</comment>
		<comment id="14" date="2007-09-11 15:44:11 EDT" author="Felipe Heidrich">fixed in HEAD &gt; 20070911</comment>
		<comment id="15" date="2007-09-20 15:23:38 EDT" author="Mik Kersten">*** Bug 204054 has been marked as a duplicate of this bug. ***</comment>
      </comments>
    </buginformation>
    <fixedCommits>
      <commit Id="74beac4f08c1db38193542297b2d9ea6b2957303" author="Felipe Heidrich" date="2007-09-12 04:45:09"/>
          <file name="bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/graphics/TextLayout.java">
          </file>
      </commit>
    </fixedCommits>
  </bug>
  <bug id="78856" opendate="2004-11-17 12:32:00" fixdate="2007-11-19 16:23:00">
    <buginformation>
      <summary>[Clipboard] SWT has no support for Image copy to clipboard</summary>
      <description>This is now supported in JDK 1.4 but there is no way to access this through the SWT clipboard. Eclipse plug-ins have to by-pass SWT and utilize the awt clipboard in order to support copy / paste into external applications. SWT should support this for their Image class. Additionally it would be good to have a delayed render capability, where the image isn't requested until the user pastes into Word. This would allow an interim format (SVG) to be stored until the bitmap render is required thereby saving the expensive memory requirements for bitmaps.</description>
      <comments>
		<comment id="1" date="2004-11-17 15:55:23 EST" author="Grant Gayed">*** Bug 78855 has been marked as a duplicate of this bug. ***</comment>
		<comment id="2" date="2004-11-18 11:53:03 EST" author="Steve Northover">Vikki to investigate.</comment>
		<comment id="3" date="2005-05-24 08:57:55 EDT" author="Veronika Irvine">*** Bug 96356 has been marked as a duplicate of this bug. ***</comment>
		<comment id="4" date="2005-10-05 11:47:59 EDT" author="Min Idzelis">Any status updates? </comment>
		<comment id="5" date="2005-12-13 12:48:47 EST" author="Steve Northover">*** Bug 120558 has been marked as a duplicate of this bug. ***</comment>
		<comment id="6" date="2005-12-23 19:52:30 EST" author="Brock Janiczak">Created attachment 32209 [details]
Bitmap handle based ImageDataTransfer

My use case is slightly different to that mentioned in comment 0.  I only need to read images from the clipboard, not write to it.  Attached is a really dodgy and probably unsafe implemenation of an image data transfer class.  It only supports reading images and works on windows only.

There is also another example here:
http://eclipsewiki.editme.com/SnipetsExamples#copyPasteImage</comment>
		<comment id="7" date="2006-02-08 13:39:10 EST" author="Veronika Irvine">Beatriz,

For MacOS X 'PICT' have look at:

http://developer.apple.com/documentation/Carbon/Conceptual/QuickDrawToQuartz2D/tq_moving_data/chapter_5_section_2.html</comment>
		<comment id="8" date="2006-02-08 13:42:51 EST" author="Veronika Irvine">Beatriz, see also:

http://developer.apple.com/documentation/Carbon/Conceptual/QuickDrawToQuartz2D/tq_moving_data/chapter_5_section_3.html#//apple_ref/doc/uid/TP40001098-CH221-DontLinkElementID_12

http://developer.apple.com/documentation/Carbon/Conceptual/QuickDrawToQuartz2D/tq_moving_data/chapter_5_section_4.html#//apple_ref/doc/uid/TP40001098-CH221-DontLinkElementID_13</comment>
		<comment id="9" date="2006-04-20 13:43:26 EDT" author="Veronika Irvine">Created attachment 39073 [details]
Patches for the ImageTransfer

Beatriz has implemented ImageTransfer for win32, gtk, motif and carbon.  Patches for the affected classes are attatched in ImageTransfer.zip.

Because this is new API, we are not including this in 3.2 which is API frozen.  However, in the very next release of eclipse (3.3?) we shall add support for image transfers.</comment>
		<comment id="10" date="2007-02-02 21:29:18 EST" author="Brock Janiczak">Any chance this will make it into 3.3?  API freeze is real soon now.  There are patches for all platforms and Veronica did say it would be included in the next release.</comment>
		<comment id="11" date="2007-02-03 09:06:55 EST" author="McQ Wilson">I suspect this just fell off the queue after Veronika changed roles. Adding Steve to CC for comment.</comment>
		<comment id="12" date="2007-03-27 18:15:12 EDT" author="Duong Nguyen">Veronika's patch doesn't quite work on Windows. There appear to be some problems with .png images. Also, while copy/paste between SWT apps appear to work in most cases, there were problems with pasting to other applications (eg. paint).

I will investigate further. I have not tried the patch on other platforms (MAC or Linux).</comment>
		<comment id="13" date="2007-03-28 05:58:34 EDT" author="Philipe Mulet">Are we committing to addressing this for 3.3M7 ? If so, pls retain a patch for
the change, and pls provide some risk assessment for a 3.3M6 backport.</comment>
		<comment id="14" date="2007-03-28 18:20:48 EDT" author="Duong Nguyen">There are several serious problems with this code when you try to copy anything other than bitmap and jpeg images within an SWT application. You'll either get a corrupted image or a core dump when you copy any other image types.

Copy/paste support for image does not work with any other Windows app. The format that we are using to copy to the clipboard is not correct. If you try to paste any image that was copied into the clipboard from SWT into any Windows application (such as Paint), you'll get an error that says something like "Error getting Clipboard Data" and the SWT application may crash. It crashed when I tried to copy/paste an icon.

I believe these issues may occur on the other platforms too.

CANTFIX for 3.3.</comment>
		<comment id="15" date="2007-03-28 18:46:51 EDT" author="Steve Northover">You mean we won't fix this for 3.3.  CANTFIX implies we don't have the capability to write the code or there is no work around for an operating system bug.</comment>
		<comment id="16" date="2007-08-22 16:33:26 EDT" author="B. Chen">Any chance this is going to be fixed in 3.3.1?</comment>
		<comment id="17" date="2007-08-22 17:29:22 EDT" author="Steve Northover">Not really.  The patch has problems.  There is no code for the other platforms.  New API is required.  This makes this bug report unsuitable for a 3.3.x release.  Sorry about that.</comment>
		<comment id="18" date="2007-08-22 17:30:35 EDT" author="Steve Northover">My mistake ... patches were for more than Windows.</comment>
		<comment id="19" date="2007-10-30 18:00:46 EDT" author="Duong Nguyen">Fixed &gt; 071030

Added ImageTransfer class.</comment>
		<comment id="20" date="2007-10-30 18:06:05 EDT" author="Eugene Kuleshov">(In reply to comment #19)
&gt; Fixed &gt; 071030
&gt; Added ImageTransfer class.

Thanks, Duong! Is this going to be included into 3.4M3? 

Any chance to backport this for the next 3.3 "dot" release?</comment>
		<comment id="21" date="2007-10-30 19:31:28 EDT" author="Duong Nguyen">This fix is going into 3.4M3? 

There are no plans to back port it to 3.3.</comment>
		<comment id="22" date="2007-11-01 16:24:35 EDT" author="Mik Kersten">(In reply to comment #19)
&gt; Added ImageTransfer class.

Excellent!</comment>
		<comment id="23" date="2007-11-01 17:58:14 EDT" author="Duong Nguyen">Added Snippet282 to show how to use ImageTransfer with Clipboard.

http://dev.eclipse.org/viewcvs/index.cgi/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet282.java?view=co

Also updated ClipboardExample to use ImageTransfer.</comment>
      </comments>
    </buginformation>
    <fixedCommits>
      <commit Id="bfe61d6cd3bc8e25ba6d360cebaad7477dd579c8" author="Duong Nguyen" date="2007-10-31 05:25:50"/>
          <file name="bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/win32/org/eclipse/swt/dnd/ImageTransfer.java">
          </file>
          <file name="bundles/org.eclipse.swt/Eclipse SWT PI/win32/org/eclipse/swt/internal/win32/OS.java">
          </file>
      </commit>
    </fixedCommits>
  </bug>
  <bug id="100095" opendate="2005-06-14 17:49:00" fixdate="2007-11-20 14:25:00">
    <buginformation>
      <summary>[DND] Consider making URLTransfer public</summary>
      <description>I already read a comment by Veronika, that URLTransfer is intentionally not public, because it is not yet fully implemented on all platforms. But could'nt you make it public and provide some fake implementation for platforms that are not yet implemented? Just for example, System Tray is active, though not implemented on all OS. Same to the Browser widget. It would be sad to loose URLTransfers existing functionality on Windows. The reason I am asking is because URLTransfer is the only Transfer that allows to easily read the URL out of a DND from the Internet Explorer. Even Firefox is not supporting DND from the IE. Ben</description>
      <comments>
		<comment id="1" date="2005-10-06 14:11:55 EDT" author="Benjamin Pasero">Any comment about the chance of getting URLTransfer for Windows?

Ben</comment>
		<comment id="2" date="2006-01-04 21:05:08 EST" author="Mik Kersten">Mylar (http://eclipse.org/mylar) needs this as well, to facilitate linking tasks to URLs (bug 114401).  What platforms does it currently fail on?</comment>
		<comment id="3" date="2006-03-01 18:40:56 EST" author="Eric Zimmerman">Why does swt need to be responsible for URL transfer?  Can't that be implemented at the application layer?

Where do you draw the line for Transfer types and what browsers you support?

Would be nice to have snippets on how to do some of this standard stuff, but doesn't seem necessary to put it ALL in the swt library.</comment>
		<comment id="4" date="2006-03-01 19:10:45 EST" author="Eugene Kuleshov">Eric, maybe not, but since browser widget is also part of SWT it is sort of related. 

Also note that there are few other transfer implementations, and URLTransfer is not "any" but very common transfer type required when integrating SWT-based application with other GUI apps on given platform.</comment>
		<comment id="5" date="2006-03-02 02:13:50 EST" author="Benjamin Pasero">I think in order to support URLTransfer on the application side, you need to use platform dependant code. I played around once for supporting DND for the Internet Explorer, and I think I only managed it to get right, using internal API. That is not what I want for an application that supports various OS.

Ben</comment>
		<comment id="6" date="2006-03-02 10:15:11 EST" author="Eugene Kuleshov">Ben, isn't it another reason to make SWT/JFace to provide this functionality?</comment>
		<comment id="7" date="2006-03-02 10:30:24 EST" author="Veronika Irvine">There is at least one thing I need to resolve before getting this supported on all platforms.  On Windows the type UniformResourceLocator provides a title and a url.  Other platforms do not provide the title.  I could just ignore the title field for all platforms.  There are also a number of data types that could map to URL on other platforms and I need to decide for each platform what is appropriate.  Unfortunately I am swamped right now and there is an API freeze so I do not think this is going to happen in 3.2.  If you would like to contribute a Mac or GTK implementation as a patch I will find time to look at it.</comment>
		<comment id="8" date="2006-03-02 10:52:44 EST" author="Eugene Kuleshov">Veronika the title thing is not reliable even on Windows. For example if you drag url fom the location title will be taken from page title, but if you drag it from an anchor tag &lt;a&gt; title will have text from the anchor tag.</comment>
		<comment id="9" date="2006-03-02 12:02:38 EST" author="Mik Kersten">Our current work-around for this with Mylar is to always ignore the title on Windows and just fetch it via HTTP after we get the drop, due to the inconsistency Eugene mentions when dragging a link on the page and not from the address bar.

Veronica: from what I understand it seems right to just ignore that title on all platforms, and it would definitely be nice to have this in 3.2 (it's an API addition, which is allowed from what I understand?).

All: we work around this by using text transfers.  Works fine on Mozilla across the platforms we've tested, bug annoyingly with IE on Windows requires Ctrl to be pressed to create a DND.DROP_COPY, since DND.DROP_MOVE does not seem to get sent as a text transfer (only URL).</comment>
		<comment id="10" date="2006-03-02 16:40:32 EST" author="Benjamin Pasero">Eugene: Exactly. My comment aimed to emphasize how important an implementation on the SWT side is.

Ben</comment>
		<comment id="11" date="2006-04-20 15:57:24 EDT" author="Veronika Irvine">Created attachment 39097 [details]
GTK Implementation of URLTransfer

Beatriz has implemented URLTransfer for GTK, Motif and Carbon.  I am attaching the patches for them here.  Because 3.2 is API frozen, URLTransfer support can not be added in 3.2  However, it will be added for the next release of eclipse (3.3?).</comment>
		<comment id="12" date="2006-04-20 15:57:51 EDT" author="Veronika Irvine">Created attachment 39098 [details]
Carbon implementation of URLTransfer</comment>
		<comment id="13" date="2006-04-20 15:58:19 EDT" author="Veronika Irvine">Created attachment 39099 [details]
Motif implementation of URLTransfer</comment>
		<comment id="14" date="2006-04-20 16:04:20 EDT" author="Eugene Kuleshov">(In reply to comment #11)
&gt; Because 3.2 is API frozen, URLTransfer support can
&gt; not be added in 3.2  However, it will be added for the next release 
&gt; of eclipse (3.3?).

This is an important feature and it would make sense to have this for 3.2. Can you please request PMC for this to be added?</comment>
		<comment id="15" date="2006-04-20 17:03:22 EDT" author="Benjamin Pasero">Great to hear that! I would give my +1 for 3.2 as well =).

Ben</comment>
		<comment id="16" date="2006-04-20 17:06:03 EDT" author="Eugene Kuleshov">BTW, it is not API change, but new addition to the API. So, we can't really wait another year for that. You can always put bugfixes on later Eclipse versions if there is anything wrong with the current implementation.</comment>
		<comment id="17" date="2006-08-10 16:54:25 EDT" author="Benjamin Pasero">Planned for 3.3?

Ben</comment>
		<comment id="18" date="2006-11-03 20:06:59 EST" author="Mik Kersten">*** Bug 163251 has been marked as a duplicate of this bug. ***</comment>
		<comment id="19" date="2007-09-10 22:54:44 EDT" author="Randy Hudson">I'd like to see this become API too. We're currently testing the protected Transfer via java reflection, and it works perfectly. We can drag URLs from firefox or sametime and drop them into SWT applications. The title is not interesting. It seems like the code exists for 4 different windowing systems. Is there anything holding this bug up?</comment>
		<comment id="20" date="2007-09-11 17:59:46 EDT" author="Steve Northover">Veronika, are the patches posted here almost ready to go?  If so, we should get this code out for 3.3.

Duong, we are currently missing a WPF and Photon implementation.  You will need to code the WPF one and get Rodney to code one for Photon.</comment>
		<comment id="21" date="2007-11-01 16:25:29 EDT" author="Mik Kersten">Is this being considered for 3.4?</comment>
		<comment id="22" date="2007-11-02 10:23:38 EDT" author="Randy Hudson">I'm marking this as critical since "enhancement" doesn't capture the importance, and since the work is done for the most part.

We need to allow users to drag from a browser to an SWT control. For example, the user uses Google to search for an Image, and then wants to drag that image to a control, capturing the URL or downloading the image, etc.</comment>
		<comment id="23" date="2007-11-02 20:27:56 EDT" author="Mik Kersten">Fyi, the following Mylyn item on the Tips and Tricks is the caveat that results from this limitation, due to MSIE sending URLTransfers:

"Task List View
   When dragging URLs to the Task List: in Mozilla/Firefox just drag, in Internet Explorer Ctrl+drag" 
http://www.eclipse.org/mylyn/tips/</comment>
		<comment id="24" date="2007-11-15 18:44:43 EST" author="Duong Nguyen">Fixed &gt; 071115

URLTransfer is now public and is available on all platforms. Photon has a fake implementation. 

The current implementation does not include the title.</comment>
		<comment id="25" date="2007-11-16 01:44:00 EST" author="Mik Kersten">Excellent, great to see.  Fyi, Mylyn already retrieves titles via an httpclient connection, so while they would be nice we do not have a strong driver for that.</comment>
		<comment id="26" date="2007-11-20 14:25:16 EST" author="Duong Nguyen">Thanks Mik for the update regarding the titles.

Due to unrelated build issues, this feature did not make it into this week's build but it is available from HEAD.</comment>
      </comments>
    </buginformation>
    <fixedCommits>
      <commit Id="ac2d26eca80dd977634b235b54f7af8b772fe42f" author="Duong Nguyen" date="2007-11-16 07:43:59"/>
          <file name="bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/win32/org/eclipse/swt/dnd/URLTransfer.java">
          </file>
      </commit>
    </fixedCommits>
  </bug>
  <bug id="111259" opendate="2005-09-30 16:53:00" fixdate="2008-02-01 17:47:00">
    <buginformation>
      <summary>[DND] Insertion mark in TreeViewer does not go away on GTK</summary>
      <description>In the logic example, on GTK, if you click-and-drop a part in the outline view, the insertion mark does not go away when you exit the viewer. You see the same problem even if you don't drop the part in the outline.</description>
      <comments>
		<comment id="1" date="2005-10-28 17:16:49 EDT" author="Pratik Shah">Moving to SWT.</comment>
		<comment id="2" date="2005-10-28 17:17:25 EDT" author="Pratik Shah">I was able to reprodcue this with 3.1 as well.</comment>
		<comment id="3" date="2005-10-31 16:34:59 EST" author="Randy Hudson">Pratik, we should at least provide a snippet OR verify that we are in fact 
telling the Tree to stop showing insertion.

Billy, we are calling show insert mark during a DND drop. Veronika fixed a 
related bug to this for 3.1.</comment>
		<comment id="4" date="2005-10-31 17:19:17 EST" author="Pratik Shah">I did debug and verify that the last invocation is setInsertMark(null) (as was 
expected since this works on Windows).  I'll see if I can write up a snippet.</comment>
		<comment id="5" date="2007-05-29 09:58:19 EDT" author="Steve Northover">The might be DND or GTJ, depending on the code that sets/clears the insertion mark.</comment>
		<comment id="6" date="2007-05-31 19:12:27 EDT" author="Duong Nguyen">This is an SWT DND bug on GTK. When setInsertMark(null) is called, we call "gtk_tree_view_unset_rows_drag_dest" which "Undoes the effect of gtk_tree_view_enable_model_drag_dest()." It does not clear the current insertion mark.

The doc for "gtk_tree_view_set_drag_dest_row" says:
   Sets the row that is highlighted for feedback.
      tree_view :  a GtkTreeView
      path :  The path of the row to highlight, or NULL

I believe we should be calling "gtk_tree_view_set_drag_dest_row" with NULL as the path to clear the current highlight or insertion mark.</comment>
		<comment id="7" date="2007-06-01 13:47:06 EDT" author="Duong Nguyen">Created attachment 69739 [details]
Tree example showing insertion mark not cleared</comment>
		<comment id="8" date="2007-06-01 17:37:12 EDT" author="Duong Nguyen">Created attachment 69812 [details]
Patch to fix the clearing of tree insertion mark</comment>
		<comment id="9" date="2007-11-28 14:31:25 EST" author="Duong Nguyen">Fixed &gt; 071128

Clear insertion mark in dragLeave for both Tree and Table.</comment>
		<comment id="10" date="2008-02-01 17:47:22 EST" author="Duong Nguyen">*** Bug 150555 has been marked as a duplicate of this bug. ***</comment>
      </comments>
    </buginformation>
    <fixedCommits>
      <commit Id="01ce46164bcfdb8bac58e5d5fefaff12c515248d" author="Duong Nguyen" date="2007-11-29 04:29:21"/>
          <file name="bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/gtk/org/eclipse/swt/dnd/TableDropTargetEffect.java">
              <method name="dragLeave" returnType="void" parameters="DropTargetEvent"/>
          </file>
          <file name="bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/gtk/org/eclipse/swt/dnd/TreeDropTargetEffect.java">
              <method name="dragLeave" returnType="void" parameters="DropTargetEvent"/>
          </file>
          <file name="bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Tree.java">
              <method name="setInsertMark" returnType="void" parameters="TreeItem boolean"/>
          </file>
      </commit>
    </fixedCommits>
  </bug>
  <bug id="91317" opendate="2005-04-13 13:40:00" fixdate="2008-02-07 11:46:00">
    <buginformation>
      <summary>Spinner should support negative values</summary>
      <description>Version: 3.1.0 Build id: I20050413-0910 Spinner should allow negavtive values.</description>
      <comments>
		<comment id="1" date="2005-05-16 21:33:51 EDT" author="Daniel Adair">This restriction is important (and appears to be easy to remedy). Many
applications require the use of negative coordinates with a spinner control.

The Scale widget also seems to exhibit this behaviour. Should a new bug report
be created for this?</comment>
		<comment id="2" date="2005-08-23 09:34:41 EDT" author="Patrick Forhan">Created attachment 26377 [details]
Spinner with negative check removed

In this file, I've commented out the two statements that prevent negative
numbers getting through, lines 825 and 854.

On Windows XP, there are no problems.  I haven't run it through a unit test or
on another platform.</comment>
		<comment id="3" date="2005-08-23 09:44:42 EDT" author="Patrick Forhan">(In reply to comment #2)
&gt; On Windows XP, there are no problems.  I haven't run it through a unit test or
&gt; on another platform.

... Just realized that I was editing the Win32 version of the class, so the
change wouldn't affect other platforms anyway...</comment>
		<comment id="4" date="2005-08-23 11:02:55 EDT" author="Felipe Heidrich">did you fix verifyText (String, int, int, Event) to allow the user to type 
the - sign ? can the user type the - sign when minimum &gt;= 0 ? how about the + 
sign, you'll need to handle it too. In different languages, are - and + the 
right symbols ?

did make sure that:
setSelection (int, boolean)
getSelectionText ()
are still working ?
did you make sure the computeSize()  will allocate space to show the - sign 
when necessary (e.g. maximum &lt; 0) ?

this need to be verified in all the platforms: motif, carbon, gtk, and windows.

please, can you post the patch using the patch feature of eclipse ? it makes a 
way easier for me. The only thing I notice in your work is that you removed 
the value &gt; 0 test.
thank you</comment>
		<comment id="5" date="2005-08-26 08:29:05 EDT" author="Patrick Forhan">(In reply to comment #4)

These are all valid points.  I did not test any of these things, I just did a
quick test to see if the widget accepted negative min, max, and selections, and
that it reported the value correctly and updated correctly.  I didn't check
typing or layout.

I can revisit this in a week or two, after we get our release out, and do more
thorough testing.</comment>
		<comment id="6" date="2005-10-07 18:02:00 EDT" author="Mark A. Ziesemer">Please also consider support for a null (empty, blank) value.  For example, I 
have a situation where I'd like to use the Spinner to set table column widths.  
If multiple columns of different widths are selected, the Spinner should be 
blank.  Using an arrow from the blank state should then somehow have the 
ability to use a default value.  I know this is supported by the native 
control, at least under Windows...</comment>
		<comment id="7" date="2006-09-28 08:59:05 EDT" author="Marc">Are there any plans in the near future to enhance the spinner to allow for negative values? This seems to become a ticket that never gets closed.


Did someone find a workaround or other solution?</comment>
		<comment id="8" date="2007-05-25 10:38:22 EDT" author="Philipp Kursawe">I had to resign to plain text controls to allow negative range values now. I so no reason why this restriction was implemented in the first place on each range control in SWT. At least on win32 its perfectly support to have negative values for min and max values. Will this ever be fixed in SWT?</comment>
		<comment id="9" date="2007-07-26 09:46:40 EDT" author="Jordan Liggitt">Any action on this?</comment>
		<comment id="10" date="2007-12-28 21:35:45 EST" author="Marcus Ilgner">Created attachment 85921 [details]
Allow negative values in Spinner - OS X Carbon implementation

This patch allows negative values for both mininum and maximum values of the Spinner control.
It is possible to enter a "-" sign if the mininum is negative and a "+" sign if the maximum is positive.

computeSize(int, int, boolean), setSelection(int , boolean) and getSelectionText()  et al do not get broken as all functions use Integer.parseInt(String) or String.valueOf(int) which both support negative values.

I don't know about positive/negative signs in a i18n context.</comment>
		<comment id="11" date="2007-12-29 08:05:14 EST" author="Marcus Ilgner">Created attachment 85929 [details]
Spinner patch to allow negative values

This patch applies my previous changes to all platforms. It also modifies the documentation accordingly.
From looking over the code I assume that those changes do not break anything but I'd like to have confirmation on that from someone who can test the code on platforms other than MacOS X.</comment>
		<comment id="12" date="2008-01-02 17:58:21 EST" author="Mark A. Ziesemer">+1 for Marcus's last patch (attachment #85929 [details], from comment #11).  Appears to work great after black-box testing under Win32 (Windows 2000).

Patched and used the SWT from Eclipse 3.3.1.1 (M20071023-1652), (which is apparently SWT version 3.3.2.v3347a ?).

Patched org.eclipse.swt.examples.controlexample.RangeTab, setting -100000 minimum values on the minimumSpinner and maximumSpinner to match their +100000 maximum values.  After running ControlExample, I don't see any issues on SpinnerTab.  Using the up/down arrow keys, clicking on the up/down buttons, and direct numeric entry using the "-" sign all seem to work.

Only possible usability issue I found is that while the controls accept "1" and "-1" using direct numeric entry, they refuse to accept "+1".  (Yes, redundant, but should it still be allowed?)

Also, in the patch, I'm guessing that the "removed" lines should actually be removed instead of being commented out.</comment>
		<comment id="13" date="2008-01-03 04:56:54 EST" author="Marcus Ilgner">Thanks for the testing!
I thought that entering a plus-sign should work as well as minus-sign.
From the code:

if (!(Character.isDigit (string.charAt (index)) 
    || (getMinimum() &lt; 0 &amp;&amp; string.charAt(index) == '-') 
    || (getMaximum() &gt; 0 &amp;&amp; string.charAt(index) == '+'))) break;

It's working fine in MacOS X and present in the Win32 code, too.
Could you try debugging those lines (in verifyText) and see why it bails out?</comment>
		<comment id="14" date="2008-01-03 11:43:55 EST" author="Mark A. Ziesemer">verifyText doesn't appear to be where it bails out.  I can't find any method in the Spinner class that is causing it.

I should clarify, that the text input does accept the character.  I.E., I can enter "+1" such that it does appear on the control.  However, once an attempt is made to commit the value (move focus to the next control, etc.), the value is apparently refused, and the old value reappears.

It's looking like this is a limitation of the Win32 control.  The fastest place I know to find another example is apparently on the Windows' Display Properties, Screen Saver Tab, "Wait x minutes".  Of course, it doesn't accept negative values.  However, it also refuses to accept "+10" as valid.

I don't believe that the .Net NumericUpDown control is a native Win32 control, but it also shows the same behavior.

I might actually consider removing the "+" from verifyText for Win32.  That way, the "+" can still be entered by the user, but will just be silently ignored while the following numbers are still accepted.  (Otherwise, the "+" that is accepted into the field will always cause the input to be refused.)</comment>
		<comment id="15" date="2008-01-04 15:33:13 EST" author="Felipe Heidrich">-1 

I tested only on Windows and here some problems:

a) the patch allows any + and - anyway the user types, you enter all kinds of invalid inputs. i.e.:  "4+23-5+35"

+ - should only be allowed once, and only in the first position of the input.

b) set digits greater than 0, for example:
spinner.setValues(-100, -120, 200, 2, 1, 40);

It starts up right but try arrow down and up and you will all kinds of bugs.

b) compute size is wrong, it doesn't include the space for the - when minimum &lt; 0</comment>
		<comment id="16" date="2008-01-14 15:02:53 EST" author="Felipe Heidrich">Created attachment 86867 [details]
win32 patch</comment>
		<comment id="17" date="2008-01-15 11:23:21 EST" author="Felipe Heidrich">Fixed in HEAD &gt; 20080115
Fixed in Win32, Motif, GTK, and Carbon.</comment>
		<comment id="18" date="2008-01-15 18:43:48 EST" author="Mark A. Ziesemer">Hurray!  Thanks Felipe, Marcus, and everyone else that contributed!!</comment>
		<comment id="19" date="2012-12-11 19:29:26 EST" author="Tom Crockett">FYI, negative values are still not supported on Cocoa, and also the max/min bounds don't seem to be respected at all.</comment>
		<comment id="20" date="2012-12-11 19:30:17 EST" author="Tom Crockett">... although I'm still working with Eclipse 3.6, so that information may be old.</comment>
		<comment id="21" date="2012-12-11 19:39:11 EST" author="Tom Crockett">Argh, never mind! Bug on our side!</comment>
      </comments>
    </buginformation>
    <fixedCommits>
      <commit Id="3114c0771e236970e2e710942b819990aa75f96f" author="Felipe Heidrich" date="2008-01-15 08:26:53"/>
          <file name="bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Spinner.java">
              <method name="actionProc" returnType="int" parameters="int int"/>
          </file>
          <file name="bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Spinner.java">
              <method name="getIncrement" returnType="int" parameters=""/>
          </file>
          <file name="bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/Spinner.java">
              <method name="setMaximum" returnType="void" parameters="int"/>
          </file>
      </commit>
    </fixedCommits>
  </bug>
  <bug id="87460" opendate="2005-03-08 21:22:00" fixdate="2008-07-29 13:13:00">
    <buginformation>
      <summary>StyledText: Caret location not updated when line style is used</summary>
      <description>SWT-win32, v3124 In the snippet below, there is a StyledText with a line style listener. In the line style listener, a bold font style is set, changing the width of the rendered text. I would have expected the on-screen caret location (not the offset) to be adjusted to the change. However, this does not happen. For an italic style, it does not look right either. Might be a bug? --- import org.eclipse.swt.*; import org.eclipse.swt.custom.*; import org.eclipse.swt.graphics.*; import org.eclipse.swt.layout.*; import org.eclipse.swt.widgets.*; public class LineStyleCaretTest { public static void main(String[] args) { Display display = new Display(); Shell shell = new Shell(display); shell.setLayout(new FillLayout()); Font font = new Font(display, &amp;quot;Arial&amp;quot;, 12, SWT.NORMAL); final StyledText text = new StyledText(shell, SWT.MULTI); text.setFont(font); text.setText(&amp;quot;Standard Widget Toolkit&amp;quot;); text.setCaretOffset(text.getText().length()); text.addLineStyleListener(new LineStyleListener() { public void lineGetStyle(LineStyleEvent event) { StyleRange[] styles = new StyleRange[1]; styles[0] = new StyleRange(); styles[0].start = 0; styles[0].length = text.getText().length(); styles[0].fontStyle = SWT.BOLD; event.styles = styles; } }); shell.setSize(300, 100); shell.open(); while (!shell.isDisposed()) { if (!display.readAndDispatch()) { display.sleep(); } } font.dispose(); display.dispose(); } }</description>
      <comments>
		<comment id="1" date="2005-03-08 21:22:44 EST" author="Florian Priester">Created attachment 18568 [details]
Screenshot</comment>
		<comment id="2" date="2005-04-26 07:20:34 EDT" author="Florian Priester">It appears that this issue has already been reported as bug 25008.
However, this bug has both a testcase and a screenshot, so I'm leaving
it up to the bug owner to decide which one to resolve as a duplicate.</comment>
		<comment id="3" date="2005-04-26 13:38:30 EDT" author="Felipe Heidrich">*** Bug 25008 has been marked as a duplicate of this bug. ***</comment>
		<comment id="4" date="2008-06-10 11:53:27 EDT" author="Felipe Heidrich">Created attachment 104333 [details]
patch</comment>
		<comment id="5" date="2008-06-18 15:17:32 EDT" author="Felipe Heidrich">Fixed in HEAD 2008-06-18 (post 3.4)</comment>
      </comments>
    </buginformation>
    <fixedCommits>
      <commit Id="83050d109621d80c5d198f71b87b4cb90dcdef41" author="Felipe Heidrich" date="2008-06-19 04:16:59"/>
          <file name="bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText.java">
              <method name="addLineStyleListener" returnType="void" parameters="LineStyleListener"/>
          </file>
      </commit>
    </fixedCommits>
  </bug>
  <bug id="92757" opendate="2005-04-26 07:11:00" fixdate="2008-12-09 12:15:00">
    <buginformation>
      <summary>StyledText: Add caret listener</summary>
      <description>null</description>
      <comments>
		<comment id="1" date="2005-07-12 23:23:13 EDT" author="Florian Priester">Some more thoughts about this issue;

Since selection in a text widget is so closely coupled with the
offset of the caret, the requested functionality could perhaps
be realized with the existing selection mechanism alone.

Consider the following scenario:

- The caret is at offset 50
- Calling getSelection() will return (50, 50)
- The ARROW_RIGHT key is pressed
- The caret will be moved to offset 51 as a result
- As expected, getSelection() will now return (51, 51)

Note that even though the selection (as defined by getSelection())
has changed from (50,50) to (51,51), no selection event is fired.
That in itself could be regarded as a bug but I assume that it is
intentional because there is only a transition from one zero-length
selection to another. 

If you, however, were to include these cases in the selection
event mechanism and fire an event every time the effective value
of getSelection()/getSelectionRange() changes, developers would
have a way of tracking changes to the caret offset since moving
the caret means changing the selection (even if start==end).

Off the top of my head, I can think of three caveats:

* Due to the SWT policy for selection events, this approach would
  still cover only user-initiated changes, not programmatic ones.
  This would likely make the feature less useful and robust.
* If for some reason there is a transition from a selection starting
  at 50 and ending at 40 to one that is starting at 40 and ending
  at 50, the selection objects for both would be equal (40, 50)
  but an event would have to be fired nevertheless because in the
  former case the caret is at 40 while in the latter it's at 50.
* Some developers might be relying on the way selection events
  are currently fired, and changing this behaviour may therefore
  not be possible.

So what's the solution? Perhaps introducing some kind of
ExtendedSelection event that has none of these problems?
(You already have Modify/ExtendedModify.)

Any other ideas?</comment>
		<comment id="2" date="2007-03-14 13:41:22 EDT" author="David Green">is there a fix or workaround for this issue?</comment>
		<comment id="3" date="2008-11-27 17:32:23 EST" author="Felipe Heidrich">*** Bug 256773 has been marked as a duplicate of this bug. ***</comment>
		<comment id="4" date="2008-11-28 03:49:09 EST" author="Aaron Digulla">I have written a patch which allows to add a listener to the caret and I'm willing to submit it here.

My solution consists of these changes:

- I extended Caret with StyledTextCaret
- StyledTextCaret tracks the current offset of the caret in the StyledText.
- I removed the field caretOffset and replaced it with a call to get the offset
from the StyledTextCaret

Questions:

- Is it correct to extend Caret? I feel that the offset in the buffer is a universal attribute of Caret and should exist in the parent class.

- My patch doesn't fix the "selection changed" in Comment #1. Can you please open a new bug to track that one? I think it should be a small issue to fix after this patch but I don't want to mix the two.

- There are two other fields which belong to the caret: columnX and caretAlignment. I didn't have to move them for my fix but I feel that they also belong in the new class. Any comments on this?</comment>
		<comment id="5" date="2008-11-28 12:49:53 EST" author="Felipe Heidrich">I like Florian Priester suggestion in comment #1. I just afraid that would break things. Maybe the ExtendedSelection is the way to go.

Aaron, you can't subclass Caret - that will only cause problems. The applicaiton usually set its own caret in the StyledText what will not be an instance of your StyledTextCaret.

I'd just find the places where StyledText changes the caretOffset and make then all go thru a method that sends the event when sendEvent==true.

Since we are not keeping your subclass, you prop only have to worry about columnX and caretAlignment.</comment>
		<comment id="6" date="2008-11-29 05:12:11 EST" author="Aaron Digulla">(In reply to comment #5)
&gt; I like Florian Priester suggestion in comment #1. I just afraid that would
&gt; break things. Maybe the ExtendedSelection is the way to go.

Care the elaborate what you're talking about? Any pointers what ExtendedSelection is?

&gt; Aaron, you can't subclass Caret - that will only cause problems. The
&gt; applicaiton usually set its own caret in the StyledText what will not be an
&gt; instance of your StyledTextCaret.

I was afraid of something like this. That's why I copied all the classes necessary into my project and modified them there. SWT really isn't open for any kind of resuse :( *sigh*

Okay, why do all those applicaiton set their own caret? Do you have an example?

&gt; I'd just find the places where StyledText changes the caretOffset and
&gt; make then all go thru a method that sends the event when sendEvent==true.
&gt; 
&gt; Since we are not keeping your subclass, you prop only have to worry about
&gt; columnX and caretAlignment.

I'm really unhappy to stuff more and more things into a class that already has 9000+ lines of code.

Or let me put it another way: I'm happy. I've made my changes and I'm offering to hand them back. I'm not at all interested in creating a maintenance nightmare and attach my name to it. So if you say that SWT has become so rigid that it's impossible to add missing features, the resolution to this bug will be a post in my blog with an URL to a fork of SWT.</comment>
		<comment id="7" date="2008-12-04 17:15:47 EST" author="Felipe Heidrich">&gt;Care the elaborate what you're talking about? 

Read comment #1.

&gt;Any pointers what ExtendedSelection is?

That would be a new event. (just like Modify has ExtendedModify).

&gt;I was afraid of something like this. That's why I copied all the classes
&gt;necessary into my project and modified them there. SWT really isn't open for
&gt;any kind of resuse :( *sigh*
&gt;Okay, why do all those applicaiton set their own caret? Do you have an example?

JavaEditor set their own caret for Smart Insert and Override mode. It is perfect valid usage of StyledText.

&gt;Or let me put it another way: I'm happy. I've made my changes and I'm offering
&gt;to hand them back. I'm not at all interested in creating a maintenance
&gt;nightmare and attach my name to it. So if you say that SWT has become so rigid
&gt;that it's impossible to add missing features, the resolution to this bug will
&gt;be a post in my blog with an URL to a fork of SWT.

I'm sorry the solution you developed doesn't work for us (can't have a subclass of Caret). Can I assume you won't write a patch we can take ?</comment>
		<comment id="8" date="2008-12-04 18:25:41 EST" author="Steve Northover">Hang on there, let's not be so negative.  What really matters is that we get the functionality out in a way that doesn't break people.  Wanting to stop the caret from moving is a reasonable thing.

Felipe, please work with Aaron to fix this bug and/or fix it yourself.  Since you are the owner of the class, you have the final say on the design and implementation.</comment>
		<comment id="9" date="2008-12-05 12:47:41 EST" author="Felipe Heidrich">(In reply to comment #8)
&gt; Felipe, please work with Aaron to fix this bug and/or fix it yourself.  Since
&gt; you are the owner of the class, you have the final say on the design and
&gt; implementation.

IMO, the best description of a solution is in comment #1. I'll work on it.</comment>
		<comment id="10" date="2008-12-05 16:33:50 EST" author="Steve Northover">&gt; Wanting to stop the caret from moving is a reasonable thing.

Should be "track the caret movement".  Stopping is interesting too, but the major requirement is tracking.</comment>
		<comment id="11" date="2008-12-08 16:28:19 EST" author="Felipe Heidrich">Fixed in HEAD &gt; 20081208

See StyledText#addCaretListener()


Kevin, please see this fix gets in for M4</comment>
		<comment id="12" date="2008-12-09 12:15:14 EST" author="David Green">Felipe, thanks for getting to this one!  I look forward to being able to use the new API.</comment>
      </comments>
    </buginformation>
    <fixedCommits>
      <commit Id="2909497e0bcb1e72bc32714fe007581c2de74fb2" author="Felipe Heidrich" date="2008-12-06 06:29:28"/>
          <file name="bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText.java">
          </file>
      </commit>
    </fixedCommits>
  </bug>
  <bug id="83408" opendate="2005-01-21 11:19:00" fixdate="2008-12-11 23:05:00">
    <buginformation>
      <summary>Support links in StyledText</summary>
      <description>StyledText should allow hyperlinks to be specified. The links must become active (cursor changes, underlined, colour change) when the mouse is over the link or when the user tabs to the link. Links must be traversable by tabbing. There needs to be an event when the link is selected and when the link is activated (e.g. in IE the status bar shows detailed info about the link when the user hovers over it). The link should support a tooltip. Must be able to specify whether the link is always underlined or only when active.</description>
      <comments>
		<comment id="1" date="2005-01-21 13:17:29 EST" author="Veronika Irvine">*** Bug 83429 has been marked as a duplicate of this bug. ***</comment>
		<comment id="2" date="2005-04-04 15:22:53 EDT" author="Steve Northover">Post 3.1.</comment>
		<comment id="3" date="2005-11-22 14:27:49 EST" author="Felipe Heidrich">[document from bug 83406] - an image can be a link: 

"A nice enhancement is support of images as links. This means:

1) Image links participate in tabbing order
2) Focus indication is drown around them when in focus
3) Mouse changes when over the image link
4) Image can be changed when mouse is over ('hover' image)
5) The same event is fired as for textual links for enter, exit and activation.

Also, image should be selectable with the rest of the text. It should be 
ignored in simple text clipboard content type but added in RTF content type."</comment>
		<comment id="4" date="2008-09-17 06:08:53 EDT" author="Dani Megert">In the textual editors we mimic similar support but don't show the links per default (too many and too expensive to compute) but only when the 'Ctrl' key is pressed and the mouse is over a detected link. For us this new feature would be interesting if existing simple text inside StyledText can be turned into a link on the fly.</comment>
		<comment id="5" date="2008-09-24 12:01:50 EDT" author="Felipe Heidrich">For the first cut, the thinking is to implement link as a regular html link (always blue, underline, cursor hover, click action), the same sort that you find in a browser and email rich text editor.</comment>
		<comment id="6" date="2008-11-11 17:40:54 EST" author="Felipe Heidrich">Fixed in HEAD &gt; 20081111

use TextStyle.underlineStyle = SWT.UNDERLINE_LINK
that sets single underline and sets the foreground to the native link color.
note that the foreground color can be overwritten by TextStyle.foreground, to overwrite the color only of the underline use TextStyle.underlineColor.

StyledText automatically sets the cursor during mouse move. But it doesn't provide an event for click on link.

One can use TextStyle.data field to store the href, for example:

public void handleMouseDown(Event event) {
 int offset = styledText.getOffsetAtLocation(event.x, event.y);
 StyleRange range styledText.getStyleRangeAtOffset(offset);
 if (range != null &amp;&amp; range.underlineStyle == SWT.UNDERLINE_LINK) {
  String href = (String)range.data;
  //do whatever you have to do
 }
}</comment>
		<comment id="7" date="2008-11-14 06:47:07 EST" author="Dani Megert">Tried to use it and it almost works ;-)
The problem is that the native underline color isn't used if the text is already colored.

To test
1. start the SWT Text Editor sample
2. add some text
3. give it a foreground color
4. mark it as link
==&gt; native link color is not applied

If you agree that this should work I'll open a bug. For me this is a hard requirement because otherwise I cannot apply the native link color as I don't have a handle on it.</comment>
		<comment id="8" date="2008-11-14 06:57:23 EST" author="Dani Megert">Just to clarify: I need the SWT.UNDERLINE_LINK together with these three variants:
- color == null ==&gt; use text color / don't apply a color
- color != null ==&gt; use color
- NEW: some flag (or color) for native link coloring

So either I need
- a handle on the native link color or RGB (preferred)
- a new style SWT.UNDERLINE_LINK_NATIVE which will always use native colors and
  ignore any given colors (underlineColor, foreground) and overwrites the existing
  text color</comment>
		<comment id="9" date="2008-11-14 11:16:53 EST" author="Felipe Heidrich">Not sure I understood the problem but in my understanding you can implement all three cases with the current support:

1) link + default text color
style.underline = true;
style.underlineStyle = SWT.UNDERLINE_LINK;
style.underlineColor = null;
style.foreground = styledText.getForeground();

2) link + native link color
style.underline = true;
style.underlineStyle = SWT.UNDERLINE_LINK;
style.underlineColor = null;
style.foreground = null;

3) link + custom color
style.underline = true;
style.underlineStyle = SWT.UNDERLINE_LINK;
style.underlineColor = null;
style.foreground = customColor;

Is it possible for you to use link like this ?</comment>
		<comment id="10" date="2008-11-14 11:44:19 EST" author="Dani Megert">Problem is that the text is already colored and the editor framework simply merges the styles it collects from it clients, hence 'null' leave the text colored as is.

What I need is bug 181592.</comment>
		<comment id="11" date="2008-11-14 11:46:42 EST" author="Felipe Heidrich">(In reply to comment #8)
&gt; - a handle on the native link color or RGB (preferred)

I like this option better. We have problem report for this: Bug 181592</comment>
		<comment id="12" date="2008-11-18 07:18:34 EST" author="Dani Megert">OK, I have reworked my code a bit so that it behaves better when there's already an error/warning at the same place. This rework also removes the need for a separate link color. However, I find that the current native link color is too dark (I filed bug 255630) to track this.</comment>
		<comment id="13" date="2013-04-15 04:40:36 EDT" author="JIABIN HU">Recently I met a problem.I test my code with the following example

The contents of styledtext are 

www.yahoo.com
www.yahoo.com
www.yahoo.com

which are in separated lines.

Thus, some of my offsets are duplicated and something is wrong with this sentense "m_text.setStyleRanges(ranges, styles);", where m_text is type of styledtext.

How can I solve this problem? Any suggestion is welcome!</comment>
      </comments>
    </buginformation>
    <fixedCommits>
      <commit Id="b84283a91e582d2270aa3a7806c977cb6509440e" author="Felipe Heidrich" date="2008-11-12 01:58:09"/>
          <file name="bundles/org.eclipse.swt/Eclipse SWT/common/org/eclipse/swt/SWT.java">
          </file>
          <file name="bundles/org.eclipse.swt/Eclipse SWT/common/org/eclipse/swt/graphics/TextStyle.java">
          </file>
          <file name="bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/graphics/TextLayout.java">
              <method name="computePolyline" returnType="int[]" parameters="int int int int"/>
          </file>
      </commit>
    </fixedCommits>
  </bug>
  <bug id="108236" opendate="2005-08-28 23:00:00" fixdate="2009-08-14 10:31:00">
    <buginformation>
      <summary>Spinner does not allow min == max</summary>
      <description>R3.1 Build id: I20050627-1435 In the following, the setMaximum has no effect: Spinner spinner = new Spinner(parent, SWT.NONE); spinner.setMinimum(1); spinner.setMaximum(1); The maximum is ignored, keeping the default of 100. In setMaximum there is the following code: if (value &amp;lt;= min [0]) return; Likewise, setMinimum has: if (value &amp;gt;= max [0]) return; It should be possible to restrict the range to a single value. In my scenario, I'm working on an example app that lets you choose the number of people buying a given activity as part of an adventure package, where the max should be the head count for the package. The default is 1.</description>
      <comments>
		<comment id="1" date="2009-08-13 08:59:21 EDT" author="Felipe Heidrich">*** Bug 286489 has been marked as a duplicate of this bug. ***</comment>
		<comment id="2" date="2009-08-13 11:54:30 EDT" author="Felipe Heidrich">SSQ, I think we should do this change.

We disallowed max == min initially to be consistent with other range controls (scroll bar, slide, scale).

IMO, having spinner with max==min is valid. It is the same as having a read only combo with only one option.


I have verified that the change works on all platforms (win32, wpf, motif, gtk, carbon cocoa).</comment>
		<comment id="3" date="2009-08-14 08:52:23 EDT" author="Opfermann CÃ©dric">Ok, when do you think this correction will be available ?</comment>
		<comment id="4" date="2009-08-14 10:04:53 EDT" author="Silenio Quarti">Felipe, go head.</comment>
		<comment id="5" date="2009-08-14 10:31:09 EDT" author="Felipe Heidrich">Fixed in HEAD &gt; 20090814</comment>
      </comments>
    </buginformation>
    <fixedCommits>
      <commit Id="61a04ff3a47e377ca835ca8cba70c457648939de" author="Felipe Heidrich" date="2009-08-14 11:23:51"/>
          <file name="bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Spinner.java">
              <method name="setMaximum" returnType="void" parameters="int"/>
          </file>
          <file name="bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Spinner.java">
              <method name="setMaximum" returnType="void" parameters="int"/>
          </file>
          <file name="bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Spinner.java">
              <method name="setMaximum" returnType="void" parameters="int"/>
          </file>
          <file name="bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/Spinner.java">
              <method name="setMaximum" returnType="void" parameters="int"/>
          </file>
          <file name="bundles/org.eclipse.swt/Eclipse SWT/wpf/org/eclipse/swt/widgets/Spinner.java">
              <method name="setMaximum" returnType="void" parameters="int"/>
          </file>
      </commit>
    </fixedCommits>
  </bug>
  <bug id="104545" opendate="2005-07-20 14:21:00" fixdate="2009-08-27 04:54:00">
    <buginformation>
      <summary>Make default size of empty composites smaller</summary>
      <description>Could the following two constants in Widget.java be changed to something smaller? /* Default widths for widgets */ static final int DEFAULT_WIDTH = 64; static final int DEFAULT_HEIGHT = 64; Anything less than or equal to 16 would work for us, 0 would be OK too. I have run our tests (JFace, UI, RCP) and they run fine when the constants are 0. Background: When you write an RCP app and enable the cool bar, the cool bar will initially be empty, but 64x64 pixels in size. On Windows, you cannot see the border of the empty coolbar so the user gets a big empty space at the top of their window and might be confused. See also &lt;span class="bz_closed"&gt;&lt;a href="show_bug.cgi?id=70049" title="RESOLVED INVALID - [PerspectiveBar] Coolbar Default Height is Gigantic"&gt;Bug 70049&lt;/a&gt;&lt;/span&gt;, where the same problem occurs in an RCP application that starts off with no open perspective and thus no cool bar items.</description>
      <comments>
		<comment id="1" date="2005-07-20 14:25:44 EDT" author="Boris Bokowski">Created attachment 25072 [details]
Snippet that shows the empty coolbar with a size of 64x64 pixels</comment>
		<comment id="2" date="2005-07-20 14:26:13 EDT" author="Boris Bokowski">Created attachment 25073 [details]
screenshot of the snippet running</comment>
		<comment id="3" date="2005-07-28 16:05:14 EDT" author="Steve Northover">We just need to decide what the defaults are for each subclass of Composite 
and put the code on every platform.</comment>
		<comment id="4" date="2005-09-06 19:53:25 EDT" author="Steve Northover">What happened?  This one is pretty easy.  We just need to figure out the 
defaults for each kind of widget.</comment>
		<comment id="5" date="2006-05-02 11:08:46 EDT" author="B. Chen">Any status on this defect? Our product has dependency on bug #70049 which is waiting on this fix. We need this fix in 3.2. </comment>
		<comment id="6" date="2006-05-02 15:34:43 EDT" author="Steve Northover">CAR tells me that the fix is easy if we only fix CoolBar (which is what they are asking).

+1 to fix CoolBar only.</comment>
		<comment id="7" date="2006-05-02 16:53:49 EDT" author="Carolyn MacLeod">McQ, we have the fix ready and waiting...</comment>
		<comment id="8" date="2006-05-02 21:42:26 EDT" author="B. Chen">Since the fix is ready, may I ask when it's going to be in the build?</comment>
		<comment id="9" date="2006-05-03 09:46:07 EDT" author="McQ Wilson">please attach a patch that describes the change.</comment>
		<comment id="10" date="2006-05-03 11:58:19 EDT" author="Carolyn MacLeod">I've currently got the change implemented on each platform (i.e. on 4 different machines), so it's easier to describe the change than to create a patch. All platforms are the same change:

1) Add the following 2 new constants to CoolBar class:
static final int DEFAULT_COOLBAR_WIDTH = 0;
static final int DEFAULT_COOLBAR_HEIGHT = 0;

2) In CoolBar computeSize method (which currently uses DEFAULT_WIDTH and DEFAULT_HEIGHT from Control on all platforms if there are no children),
- change DEFAULT_WIDTH to DEFAULT_COOLBAR_WIDTH and
- change DEFAULT_HEIGHT to DEFAULT_COOLBAR_HEIGHT.

Tested on all platforms.</comment>
		<comment id="11" date="2006-05-03 12:00:11 EDT" author="Carolyn MacLeod">Re comment 8, we need the approval of 2 team leads in order to put any code change in at this point.</comment>
		<comment id="12" date="2006-05-03 12:03:34 EDT" author="McQ Wilson">+1</comment>
		<comment id="13" date="2006-05-03 13:01:53 EDT" author="Carolyn MacLeod">Thanks, McQ.

Fixed in HEAD &gt; 20060503.
This will be in eclipse 3.2RC3.</comment>
		<comment id="14" date="2009-07-17 14:53:25 EDT" author="Felipe Heidrich">*** Bug 85261 has been marked as a duplicate of this bug. ***</comment>
      </comments>
    </buginformation>
    <fixedCommits>
      <commit Id="a663b8f6ede19c442c9466069d1f4f10ed56afcd" author="Carolyn MacLeod" date="2006-05-04 01:55:21"/>
          <file name="bundles/org.eclipse.swt/Eclipse SWT/emulated/coolbar/org/eclipse/swt/widgets/CoolBar.java">
          </file>
          <file name="bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/CoolBar.java">
          </file>
      </commit>
    </fixedCommits>
  </bug>
  <bug id="95410" opendate="2005-05-16 13:36:00" fixdate="2009-09-11 14:01:00">
    <buginformation>
      <summary>GDI+ drawString is not consistent with GDI</summary>
      <description>If you have a structure which is rendered to a GC, you need to be able to predict things like how large a String is going to be painted. But, if a previous visitor has triggered GDI+, drawString's behavior is altered. The chars get expanded and compressed in funny ways, and generally look bad.</description>
      <comments>
		<comment id="1" date="2005-05-17 11:38:55 EDT" author="Randy Hudson">From bug 95582, here's a good snippet which shows the size difference problem:

public static void main(String[] args) {
 Display display = new Display();
 final Shell shell = new Shell(display);
 shell.setText("Shell");
 
 shell.addPaintListener(new PaintListener() {
  public void paintControl(PaintEvent e) {
   String s = "LlllllllWWW";
   e.gc.drawString(s, 0, 0);
   e.gc.setTextAntialias(SWT.ON);
   e.gc.drawString(s, 0, 20);
   e.gc.setTextAntialias(SWT.DEFAULT);
   e.gc.drawString(s, 0, 40);
  }
 });
 
 shell.setSize(500, 380);
 shell.open();
 while (!shell.isDisposed()) {
  if (!display.readAndDispatch())
   display.sleep();
 }
 display.dispose();
}</comment>
		<comment id="2" date="2005-06-21 11:26:56 EDT" author="Silenio Quarti">*** Bug 100735 has been marked as a duplicate of this bug. ***</comment>
		<comment id="3" date="2005-09-30 11:01:49 EDT" author="Steve Northover">For now, you can use setAdvanced() to make string drawing consistent.  
Hopefully, in the future, we will be able to convince GDI+ and GDI to draw 
strings consistently.</comment>
		<comment id="4" date="2005-09-30 11:09:45 EDT" author="Min Idzelis">Thats unfortunate. Your suggestion means that we can't have antialiased text.
Just curious, do you know if this is a GDI+ issue, or something in SWT? </comment>
		<comment id="5" date="2005-09-30 11:37:33 EDT" author="Steve Northover">It's a GDI+ issued.  Not sure what you mean "we can't have antialiased text".  
If you do GC.setAdvanced(true), then your drawing, you will be using GDI+ for 
everything and output will be consistent.</comment>
		<comment id="6" date="2005-09-30 11:45:01 EDT" author="Randy Hudson">Min, text will be antialised if the user's display properties specify it, even 
for non-advanced text rendering.

Ignoring AA, if you want to scale, translate, rotate, clip to a path, etc., 
text will still look terrible. This makes advanced graphics function a non-
starter for most potential clients.

public static void main(String[] args) {
 Display display = new Display();
 final Shell shell = new Shell(display);
 shell.setText("Shell");
 
 shell.addPaintListener(new PaintListener() {
  public void paintControl(PaintEvent e) {
   String s = "Llllllllllllll";
   e.gc.drawString(s, 0, 0);
   e.gc.setAdvanced(true);
   e.gc.drawString(s, 0, 20);
  }
 });
 
 shell.setSize(500, 380);
 shell.open();
 while (!shell.isDisposed()) {
  if (!display.readAndDispatch())
   display.sleep();
 }
 display.dispose();
}</comment>
		<comment id="7" date="2005-09-30 12:08:04 EDT" author="Randy Hudson">http://support.microsoft.com/default.aspx?scid=kb;en-us;307208</comment>
		<comment id="8" date="2007-03-21 14:35:38 EDT" author="Silenio Quarti">*** Bug 178552 has been marked as a duplicate of this bug. ***</comment>
		<comment id="9" date="2008-08-29 18:10:54 EDT" author="Silenio Quarti">Fixed &gt; 20080829.

We are using Graphics.DrawDriverString() instead of DrawString(). Please try out the latest code and report any problems.</comment>
		<comment id="10" date="2008-09-15 10:57:56 EDT" author="Min Idzelis">Will this be backported to 3.4 maintenance? </comment>
		<comment id="11" date="2008-09-15 11:10:15 EDT" author="Silenio Quarti">There are too many changes and I believe it is going to take the whole 3.5 release cycle to test it and to make sure there are no side effects.</comment>
		<comment id="12" date="2009-09-10 15:59:44 EDT" author="Cherie Revells">Should these changes (or similar changes) have also made it into the drawText() method?  The following snippet shows that the problem with the badly-spaced l's still occurs when the drawText() method is used (the funny thing is that it only seems to happen when there are tab characters in the string).

My real issue is that the tab expansion differs so much when advanced graphics mode is being used.  As Randy pointed out in his first comment, I need to be able to predict how large the string is going to be painted, but when I don't know whether GDI+ or GDI is going to be used, it makes it rather difficult.  Does anyone know if the difference in tab expansion is an issue we can do something about in SWT or is it just a GDI/GDI+ difference?

package org.eclipse.draw2d;

import org.eclipse.swt.events.PaintEvent;
import org.eclipse.swt.events.PaintListener;
import org.eclipse.swt.widgets.Display;
import org.eclipse.swt.widgets.Shell;

public class Snippet {
 public static void main(String[] args) {
  Display display = new Display();
  final Shell shell = new Shell(display);
  shell.setText("Shell");
  
  shell.addPaintListener(new PaintListener() {
   public void paintControl(PaintEvent e) {
    int y = 0;
    
    String s = "Llllllllllllll";
    e.gc.drawText(s, 0, y+=20);
    e.gc.setAdvanced(true);
    e.gc.drawText(s, 0, y+=20);   
    e.gc.setAdvanced(false);

    s = "L\tllllllll\tll\tlll";
    e.gc.drawText(s, 0, y+=20);
    e.gc.setAdvanced(true);
    e.gc.drawText(s, 0, y+=20);   
    e.gc.setAdvanced(false);
   }
  });
  
  shell.setSize(500, 380);
  shell.open();
  while (!shell.isDisposed()) {
   if (!display.readAndDispatch())
    display.sleep();
  }
  display.dispose();
 }
}</comment>
		<comment id="13" date="2009-09-10 16:47:59 EDT" author="Silenio Quarti">Please open a new bug for GC.drawText() and GC.textExtent(). This one is really about GC.drawString(). Thanks!</comment>
		<comment id="14" date="2009-09-11 14:01:41 EDT" author="Cherie Revells">Created Bug 289244 -  GDI+ drawText is not consistent with GDI.</comment>
      </comments>
    </buginformation>
    <fixedCommits>
      <commit Id="e3d907d6678e7fdda004ed7738717629aea97ed2" author="Silenio Quarti" date="2008-08-30 06:59:29"/>
      </commit>
    </fixedCommits>
  </bug>
  <bug id="103863" opendate="2005-07-14 13:29:00" fixdate="2009-11-02 14:03:00">
    <buginformation>
      <summary>Support encapsulation in SWT layout mechanism</summary>
      <description>Currently, SWT layouts work like this: - Some event occurs in the app - Method X updates a set of widgets - Method X notifies the wigdet's layout of the change (by calling changed() and layout()) This prevents writing any black box object that knows how to update a set of wigdets without depending on where those wigdets are used. This is creating a severe maintnance problem within the Eclipse UI. If code modifies a widget, it needs to: 1. Know about every other piece of code that calls that widget's computeSize method. 2. Know which object to trigger a layout on. 3. Know when to trigger a layout. (Or when to defer and undefer layouts) Issue 1 creates very large (and complicated) update methods. Issue 2 means that the spaghetti code is always specific to a particular layout and cannot be reused. Even minor layout changes often require severe refactoring. Issue 3 is impossible to get right. In our world, everything is triggered by listeners. Even though the layout only needs to happen after the last listener has done its thing and control returns to the event loop, there is no way to know that &amp;quot;this will be the last change to this widget before control returns to the event loop&amp;quot;. We work around this by heuristically batching updates together, and making individual update methods responsible for as many widgets as possible. Our current heuristics work well, but the code is extremely complicated and brittle. This PR requests the following: a. Provide a way to flag a widget as &amp;quot;changed&amp;quot;, such that any dependant layout will be notified and triggered when control returns to the event loop. (The client code MUST NOT be responsible for calling layout(...) or setLayoutDeferred) b. Provide a &amp;quot;preferred size changed&amp;quot; listener, so that a widget can have its position managed by something other than its immediate parent (aka proxy controls). c. Provide a way for layouts to indicate whether a change to a particular child will affect their own preferred size. This will be needed for SWT to correctly compute the effects of a &amp;quot;changed&amp;quot; event. Not sure whether to flag as &amp;quot;blocker&amp;quot; or &amp;quot;enhancement&amp;quot;. It is really an enhancement, but it is blocking further work on the Eclipse layouts. Flagging as major as a compromise. :-)</description>
      <comments>
		<comment id="1" date="2005-07-14 13:37:02 EDT" author="Stefan Xenos">Created attachment 24773 [details]
Suggested algorithm (implemented through JFace)

This patch suggests a new layout protocol.

It is currently implemented as a bunch of static methods and coding conventions
in JFace, but the same pattern would work if the static methods were moved to
the Control class and the coding conventions happened automatically.

The patch also addresses an independant issue involving computeSize (in other
words, feel free to ignore the new compute*Size methods).</comment>
		<comment id="2" date="2005-07-14 13:47:59 EDT" author="Stefan Xenos">Created attachment 24775 [details]
Standalone SWT applications that demonstrate the problem

This project contains the same SWT application coded in three ways:

1. Using the pattern currently used by Eclipse: a big update method that does
everything. Good (but non-optimal) performance, complicated code.

2. Using a pattern suggested by Veronika: call Shell.layout(changedControl)
every time any control changes. Very poor performance, well encapsulated code.

3. Using the proposed pattern. Controls are dirtied whenever they change, and
any necessary layouts happen when control returns to the event loop. Optimal
performance, well encapsulated code.


The app implements a simple model/view/controller pattern, where there are two
buttons to add and remove elements from a set and a bunch of "views" that
display the size of the set as asterisks. 

A second shell monitors the number of times the last label is moved or resized.</comment>
		<comment id="3" date="2005-07-14 14:09:13 EDT" author="Stefan Xenos">CC'ing all the people I promised to keep informed about this issue. :-)</comment>
		<comment id="4" date="2005-07-14 16:03:23 EDT" author="Stefan Xenos">I still haven't tested this algorithm with the ProxyControl pattern used
commonly in the workbench. In order to fully clean up the mess, the code that
changes the code being proxied should not need to know that the control is being
proxied, clipping should be computed correctly (and should update if one of the
ancestors contributing to the clipping region changes), and the target should
not move more than once per pass through the event loop.</comment>
		<comment id="5" date="2005-07-14 17:06:29 EDT" author="Veronika Irvine">Proxy'd widgets aside, the mechanism I would propose for minimizing the number 
of layouts is shown in the following example.

The controlChanged method could be a utility function in JFace.

In the example, any button you click on will update two labels, one which is a 
peer of the button and one which is a peer of the button's parent.

To count the number of layouts performed, I hacked FillLayout and GridLayout 
to print out each time layout was called.  I also hacked Button and Label to 
print out each time computeSize was called on the widgets.

public class DeferredLayoutExample {
 static int INDEX;
public static void main (String [] args) {
 Display display = new Display ();
 Shell shell = new Shell (display);
 shell.setLayout(new GridLayout());
 doit(shell);
 shell.pack();
 shell.open();
 while (!shell.isDisposed ()) {
  if (!display.readAndDispatch ()) display.sleep ();
 }
 display.dispose ();
}
static void doit(Composite parent) {
 if (INDEX == 10) return;
 Composite c = new Composite(parent, SWT.BORDER);
 c.setLayout(new GridLayout(3, false));
 Button b  = new Button(c, SWT.PUSH);
 b.setLayoutData(new GridData(SWT.LEFT, SWT.TOP, false, false));
 b.setText("Button "+INDEX++);
 controlChanged(b);
 // wrapping label
 final Label l1 = new Label(c, SWT.WRAP); 
 GridData data = new GridData(SWT.LEFT, SWT.TOP, false, false);
 data.widthHint = 100;
 l1.setLayoutData(data);
 final Label l2 = new Label(parent, SWT.WRAP); 
 data = new GridData(SWT.LEFT, SWT.TOP, true, false, 2, 1);
 data.widthHint = 100;
 l2.setLayoutData(data);
 b.addListener(SWT.Selection, new Listener() {
  public void handleEvent(Event e) {
   l1.setText(l1.getText()+"* ");
   controlChanged(l1);
   l2.setText(l2.getText()+"x ");
   controlChanged(l2);
  }
 });
 doit(c);
}
static void controlChanged(Control c) {
 final Shell shell = c.getShell();
 shell.setLayoutDeferred(true);
 shell.layout(new Control[] {c});
 shell.getDisplay().asyncExec(new Runnable() {
  public void run() {
   shell.setLayoutDeferred(false);
  }
 });
}
}</comment>
		<comment id="6" date="2005-07-15 01:03:42 EDT" author="Stefan Xenos">There are several problems with comment 5:

1. The layouts do not occur in the same pass through the event loop. Although
the total number of layouts is the same, there could be considerable flicker
because SWT may repaint the widgets between each *syncExec. In order to be
flicker-free, the layouts must occur in the same pass through the event loop as
they were dirtied. 

This is why the change should go in SWT and not JFace. The best JFace can do is
rely on *syncExec (creating flicker) or use a specialized event loop (like my
example) which won't work when a non-conforming modal dialog is open. SWT can
add code to readAndDispatch, which ensures that the layouts always work and
never flicker.

2. It will not work with the proxy pattern, which is a firm requirement for the
workbench (a solution that does not address this cannot be used).

3. Layouts do not have the opportunity opt out of dirtying their parent when the
child changes. In both of our examples this makes no difference, but in the
Eclipse workbench this makes a huge difference.

4. The requirement to call controlChanged after any modification to any control
is cumbersome. Putting this method in SWT means that commonly-used setters could
be updated to call this themselves rather than push the responsibility onto
their callers. (Any method that auto-flags the object as changed could be
JavaDoc'd as such so that callers know when they need to flag the object themselves)

The patch I attached was mostly flicker-free (it flickered at most once when a
non-conforming event loop was running) and did not suffer from issues 2 and 3. I
am not looking for assistance with a JFace-based protocol (I have one): I am
looking for a more elegant SWT-based solution.</comment>
		<comment id="7" date="2005-07-18 12:11:03 EDT" author="Stefan Xenos">See bug 46112, bug 104234, and bug 103863. These are the three biggest issues
that are complicating the workbench layouts.</comment>
		<comment id="8" date="2005-07-18 12:46:31 EDT" author="Randy Hudson">GEF has solved these problems, if you replace "Control" with "Figure". We 
always layout one time and only layout the minimum number of figures required, 
regardless of how many changes you make.

Are you suggesting that SWT change such that calling..
Button#setText(String)
...walks up the parent composite chain, marking the appropriate composites as 
needing to be layed out, and they get layed out later via async? We call this 
process revalidate(). It works great for us but its a major change in SWT.

I think the request for proxies should be considered step 2. You may not need 
proxies if the API gives you the context of the layout request, allowing you to 
multiplex a bunch of SWT layouts in some placehold layout on the workbench 
page's composite.

What became of all the new layout API added in 3.1?</comment>
		<comment id="9" date="2005-07-18 13:54:43 EDT" author="Stefan Xenos">&gt; Are you suggesting that SWT change such that calling..
&gt; Button#setText(String)
&gt; ...walks up the parent composite chain, marking the appropriate composites
&gt; as needing to be layed out, and they get layed out later via async?

I'd like to see a standard protocol for marking the composites for layout, that
would potentially permit setText to do as you describe in the future. For now,
manual marking is enough. One difference: if possible, the layout should happen
later in the same pass through the event loop rather than in a later async.
Doing it in an async means that the user may first see the button with new text
+ old position before seeing it with new text + new position.


&gt; its a major change in SWT.

...but not a breaking one.


&gt; I think the request for proxies should be considered step 2. 

Step 1 must not rule out step 2. The layout protocol needs to be spec'd in a
manner that allows us to continue to implement the current layouts. Right now,
the API on ViewForm and CTabFolder requires us to use proxies (they only report
the bounds of certain regions by setting the bounds of a child control - if we
need to know those bounds, we need to supply a proxy). Unless this changes, we
can't consider a solution that rules out the use of proxies. The reason we need
this change is precisely to simplify the code for managing those proxies.


&gt; You may not need proxies if the API gives you the context of the 
&gt; layout request, allowing you to multiplex a bunch of SWT layouts in 
&gt; some placehold layout on the workbench page's composite.

I'm not sure I follow that. :-(


&gt; What became of all the new layout API added in 3.1?

The new API makes it possible for a layout to flush cached information for a
single child without recomputing the entire layout. This was a necessary step
forward, but not a complete solution.</comment>
		<comment id="10" date="2005-07-18 14:13:57 EDT" author="Randy Hudson">&gt; manual marking is enough. One difference: if possible, the layout should 
happen
&gt; later in the same pass through the event loop rather than in a later async.
&gt; Doing it in an async means that the user may first see the button with new 
text
&gt; + old position before seeing it with new text + new position.

You could hook painting and do a pre-check to see if any layouts are pending 
first. This is what we have to do in GEF.

But, we'd like to do it the way you suggest. Something like a 
Display#afterCurrentEventExec(Runnable). One problem we have with asyncExec is 
that its priority is not high enough and a stream of UI events can preempt it 
indefinitely.

Do events in the OS queue have priorities?</comment>
		<comment id="11" date="2005-07-18 16:10:38 EDT" author="Stefan Xenos">&gt; Display#afterCurrentEventExec(Runnable)

YES! That would be superb.</comment>
		<comment id="12" date="2005-07-18 16:18:09 EDT" author="Stefan Xenos">Veronika suggested that if setParent() worked on all platforms, we would not
need the proxy pattern. I suspect that (with considerable refactoring) this is
true. However, as long as Eclipse supports any platform (Motif) which doesn't
support reparenting, we will need the proxies.</comment>
		<comment id="13" date="2006-09-14 11:47:27 EDT" author="Stefan Xenos">Moving back to inbox (since veronika no longer owns this code AFAIK).</comment>
		<comment id="14" date="2006-09-14 11:53:58 EDT" author="Stefan Xenos">Most of the criticism I've heard about this pattern regards the following:

&gt; b. Provide a "preferred size changed" listener, so that a widget can have
&gt; its position managed by something other than its immediate parent (aka 
&gt; proxy controls).

...since its possible for the preferred size of a widget to change due to events beyond SWT's control and therefore no way to get an event every time. If, however, we called it a "layout requested" listener, this would work just as well without suggesting it will be called on every preferred size change.</comment>
		<comment id="15" date="2006-10-25 01:24:13 EDT" author="Steve Northover">Veronika still owns the layout bugs (for now), even if she is not working on them.  That way they all stay in the same place.

Given the amount of work we are doing for 3.3, I can't see us looking into this.  I'm really sorry about this.</comment>
		<comment id="16" date="2007-02-27 14:46:36 EST" author="Stefan Xenos">cc'ing boris. He was working on a databinding utility that would automatically update toolbars. However, without a solution to this bug, there would be no way to correctly update the layout containing the toolbar after the update.</comment>
		<comment id="17" date="2007-03-07 18:22:23 EST" author="Christophe Cornu">In common cases, isn't it sufficent to schedule a call to layout(true) on the composite common to the set of widgets binded to a given model? Do things have to be updated at all times in quasi real time? I guess here we're precisely talking about supporting the difficult cases. I'll hide :-)</comment>
		<comment id="18" date="2007-03-07 22:17:55 EST" author="Randy Hudson">(In reply to comment #17)
&gt; In common cases, isn't it sufficent to schedule a call to layout(true) on the

I think the answer is yes, but the part missing is the schedule support. You can do an asyncExec, but things could paint in their intermediate states before the layout occurs (refer to setText() scenario). In a simple closed system you might know what the last change is and you could do the layout then.</comment>
		<comment id="19" date="2007-03-20 20:35:17 EDT" author="Stefan Xenos">&gt; In common cases, isn't it sufficent to schedule a call to layout(true) 
&gt; on the composite common to the set of widgets binded to a given model? 

Well, if you knew what composite was common, and you knew when all the changes to those widgets were finished, then a call to layout(...) would do the trick.

The specific problem we're looking at here are the cases where you don't know which widget is common or when to call layout(...) on it.


&gt; Do things have to be updated at all times in quasi real time? 

They just need to be updated before the next repaint, and only once. The cases we're talking about here are things like the workbench layout, or the Sections in the Forms editors, where a change to a widget modifies its enclosing layout.</comment>
		<comment id="20" date="2007-06-11 16:31:58 EDT" author="Boris Bokowski">Created attachment 70900 [details]
SWT-only snippet

New snippet without any JFace.  This is for looking at the "layout only once" issue.</comment>
		<comment id="21" date="2008-06-12 17:22:50 EDT" author="Stefan Xenos">This is still a problem. Steve, would it improve the chances of getting this fixed if I were to offer a patch?</comment>
		<comment id="22" date="2008-06-13 16:39:32 EDT" author="Stefan Xenos">Created attachment 104919 [details]
Improved SWT-only example that demonstrates the extra repaints

I've attached an improved version of Boris' code, that does a better job demonstrating the flicker in case two.

Case 1 needs no modification. I can see the flicker on GTK, and you can see the redundant moves and resizes being written to the console.

In case 2, the flicker arises from the multiple repaints, so I've attached a paint listener that shows the widget repainting twice.</comment>
		<comment id="23" date="2008-06-13 18:27:19 EDT" author="Stefan Xenos">Created attachment 104929 [details]
Tests a layout with an excessive number of widgets

I've attached a test that uses veronica's approach in a layout with an excessive number of widgets, most of which are not affected by the changes being made to the layout.

I suspected that this would prove that the depth-first-search being done in Composite.updateLayout would end up causing a performance problem... however what it actually proved is that you run out of widget handles long before you encounter a serious performance problem here. I'm attaching my test anyway.

This basically makes comment 6, issue 3 redundant. If we can fix the flicker and make it work with the proxy pattern, Veronica's approach would be acceptable.</comment>
		<comment id="24" date="2009-10-20 17:15:09 EDT" author="Silenio Quarti">We have added new layout API that should address this problem. See:

Composite.layout(Control[] changed, int flags)
SWT.ALL
SWT.CHANGED
SWT.DEFER

Please try the new API out. If the DEFER flag is specified the layout will be deferred until just before the next event is handled.</comment>
		<comment id="25" date="2009-10-20 19:08:30 EDT" author="Veronika Irvine">Hi Silenio,

Just curious.  How is the new API different from the following?

Control[] changed = new Control[]{child1, child2};
someComposite.setLayoutDeferred(true);
someComposite.layout(changed, SWT.ALL);
someComposite.getDisplay().asyncExec(new Runnable() {
    public void run() {
        someComposite.setLayoutDeferred(false);
    }
});

I see that the SWT.DEFER flag causes the deferred layouts to take place before the event loop is next run (as opposed to when the event loop is next idle which is what asyncExec() does). Is this timing difference required to stop the flickering that Stefan mentions?

Cheers,
Veronika</comment>
		<comment id="26" date="2009-10-21 10:16:51 EDT" author="Silenio Quarti">Hi Vick, good to know you are still watching :-)

I think you answered your own question. When SWT.DEFER is used, the layouts are done before the event loop has a chance to process any event. With the asyncExec() approach, paint events could happen before the widgets were laied out. This does not happen that often on Windows, but it happens almost all the time on GTK and Cocoa. I am not sure why it does not happen on Windows more often. It seems that the app goes idle before it paints.

The new API has two other advantages. One is simplicity, there is no need to have a cake in jface that clients have to call. This would be necessary (with asyncExec()) to make sure all layouts happen in one single step in the event loop. And the second is that SWT is in control when layout happens. If running before the next event has issues, we have a chance of find a better place.

It is hard to see the simple app flickering. E4 workbench has some issues related to layout and it is probably a good candidate to use this API.</comment>
		<comment id="27" date="2009-10-21 16:49:51 EDT" author="Stefan Xenos">Silenio, this is great news. It sounds like you've addressed the core issues here. I'll start tinkering with the new APIs shortly.

Is there any way to use the proxy pattern with this new API, or is there still some additional support needed?</comment>
		<comment id="28" date="2009-10-22 16:26:39 EDT" author="Silenio Quarti">I do not think the new API addresses the ProxyControl problem. I am not sure how this could be addressed by SWT.

This might not be a issue to the E4 workbench, since I beleive it is using Control.setParent() instead of proxy controls.</comment>
		<comment id="29" date="2009-10-22 17:03:21 EDT" author="Boris Bokowski">(In reply to comment #28)
&gt; I do not think the new API addresses the ProxyControl problem. I am not sure
&gt; how this could be addressed by SWT.
&gt; 
&gt; This might not be a issue to the E4 workbench, since I beleive it is using
&gt; Control.setParent() instead of proxy controls.

Yes, e4 won't run on platforms that don't support setParent. With e4, the Workbench is no longer in the business of "the big lie" :-)</comment>
		<comment id="30" date="2009-10-22 17:34:30 EDT" author="Stefan Xenos">If I understand correctly... after I change a widget, I should do the following to make it update its position:

widget.getParent().layout(new Control[] {widget}, SWT.DEFER);

...or am I supposed to do this?

widget.getShell().layout(new Control[] {widget}, SWT.DEFER);


Either way, it might be easier for programmers if there was a convenience API that looked like this:

widget.requestLayout();

...it's simpler and has less room for programmer error.</comment>
		<comment id="31" date="2009-10-22 17:39:54 EDT" author="Stefan Xenos">&gt; I do not think the new API addresses the ProxyControl problem. I am not 
&gt; sure how this could be addressed by SWT.

FYI, if you wanted to support ProxyControl (though the new setParent changes may have eliminated the driving use case for the pattern), it could be done with an additional listener type that allowed other objects to observe when a target widget is dirtied in its layout.</comment>
		<comment id="32" date="2009-10-23 09:46:29 EDT" author="Silenio Quarti">(In reply to comment #30)
&gt; If I understand correctly... after I change a widget, I should do the following
&gt; to make it update its position:
&gt; widget.getParent().layout(new Control[] {widget}, SWT.DEFER);
&gt; ...or am I supposed to do this?
&gt; widget.getShell().layout(new Control[] {widget}, SWT.DEFER);
&gt; Either way, it might be easier for programmers if there was a convenience API
&gt; that looked like this:
&gt; widget.requestLayout();
&gt; ...it's simpler and has less room for programmer error.

I would prefer not to add new concepts. People are used to call layout() on a composite.

I believe widget.requestLayout() would also have one fallback. It would be hard for SWT to determine which parent of the widget it should call setLayoutDeffered(true). The simplest solution would be to do it for the whole shell. This would case a relayout on the whole shell (performance problem). The APP code knows this better. For example, the workbench can probably request layout on the root of a given view (ViewForm?) because views represent internal shells in a sense. SWT would have to add concepts like what is the root composite for layout purposes making the API more complicate I believe.</comment>
		<comment id="33" date="2009-10-26 16:24:18 EDT" author="Eric Moffatt">I echo the sentiment that this is good news...

The scenario under which I expect this to be of the most use is in the 'trim' layout. The top trim in E4 will contain the toolbars and under a context switch (i.e. editor activation) many of them could change size (or become invisible...) but we'd only like one layout ultimately.

It's worth noting that this is also about the -only- case in the UI Structure where a 'computeSize' makes sense. The Window/Stack/Sash containers need not ever ask their children how big they'd like to be (since we ignore the answer anyways...;-).

Can you tell me if the deferred layout is smart enough to handle cases where we have a deferred layout on a Composite "A" and also on a child of "A" (in which case I'd expect the child's 'deferred' layout to be removed since it's inferred in the layout for "A"...? This means that if there's a layout pending for the Shell that -no other- deferred layouts need to be remembered...</comment>
		<comment id="34" date="2009-11-02 14:03:23 EST" author="Silenio Quarti">(In reply to comment #33)
&gt; Can you tell me if the deferred layout is smart enough to handle cases where we
&gt; have a deferred layout on a Composite "A" and also on a child of "A" (in which
&gt; case I'd expect the child's 'deferred' layout to be removed since it's inferred
&gt; in the layout for "A"...? This means that if there's a layout pending for the
&gt; Shell that -no other- deferred layouts need to be remembered...

No, the new API only affects the composite where the method is called (not the children). 

Calling:

   comp.layout(new Control[] {child}, SW.DEFER);

is essentially the same as:

   comp.setLayoutDeferred(true);
   comp.layout(new Control[] {child});
   comp.getDisplay().asyncExec(new Runnable() {
 public void run() {
    comp.setLayoutDeferred(false);
       }
   });

but the asyncExec() is done in a special way.</comment>
		<comment id="35" date="2015-05-29 14:31:39 EDT" author="Stefan Xenos">Reopening since - according to comment 32 - issue 2 in the original description is still not fixed.

A requirement of this bug was that the app should not need to know the root widget affected by any given change, and the only way offered to do so is this:

widget.getShell().layout(new Control[] {widget}, SWT.DEFER);

However, if the app shouldn't do this due to performance issues, then it's still not fixed.

Note: the original request also asks for support for the proxy pattern, but since SWT now supports reparenting everywhere, this is no longer necessary.</comment>
		<comment id="36" date="2015-05-29 14:38:43 EDT" author="Stefan Xenos">Actually, I'll leave this closed and can file a new bug tracking the remaining work.</comment>
		<comment id="37" date="2015-05-29 15:03:20 EDT" author="Stefan Xenos">Filed bug 468854 to request the missing functionality.</comment>
      </comments>
    </buginformation>
    <fixedCommits>
      <commit Id="3f16243f15249d0c5b9acd8d735db116a6188e83" author="Silenio Quarti" date="2009-10-21 03:00:35"/>
          <file name="bundles/org.eclipse.swt/Eclipse SWT/common/org/eclipse/swt/SWT.java">
          </file>
          <file name="bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Composite.java">
              <method name="layout" returnType="void" parameters="boolean boolean"/>
          </file>
          <file name="bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Display.java">
          </file>
      </commit>
    </fixedCommits>
  </bug>
  <bug id="119192" opendate="2005-12-04 13:30:00" fixdate="2010-01-21 16:10:00">
    <buginformation>
      <summary>[CCombo] CCombo Mouse problem (listeners not fired)</summary>
      <description>The CCombo does not responde to MouseMove or MouseTrack listener. Also, does not respond as Control throught Display (Gets Text and Button).</description>
      <comments>
		<comment id="1" date="2008-09-17 16:38:26 EDT" author="Grant Gayed">The following events are missing.  CCombo could probably just listen for these on the contained Text and Button and then re-send them from itself:

DragDetect
MouseHover
MouseMove
MouseWheel</comment>
		<comment id="2" date="2009-05-01 04:33:56 EDT" author="Lakshmi Shanmugam">Created attachment 134045 [details]
patch with code changes

The patch adds mouse listeners for the arrow and text. Mouse events on arrow and text will be notified as events on CCombo.
In the existing code the Mouse Wheel event on arrow is being handled like a arrow-down/arrow-up key down event to scroll through the items. But, it is also being notified as KeyDown event. In the patch, modified it to be notified as MouseWheel event.</comment>
		<comment id="3" date="2009-06-19 12:04:13 EDT" author="Carolyn MacLeod">Created attachment 139648 [details]
New patch

Thanks for the patch! I had a look and made a few changes, and here are some comments:

- this bug asks for MouseTrack events, so we need MouseEnter &amp; MouseExit too.

- I merged all Mouse and DragDetect event handling into one case to reduce the code. I also merged some Mouse events that were added recently by Duong for bug 182196. Sometimes it helps to show annotations for the class (Team-&gt;Show Annotation) to see when code changed, and to know who changed it.

- I also used a "trick" to reuse the Event that was passed in so that you don't need to create a new event and copy the fields over: notify the listeners with the same event and then set the event.type to SWT.None to keep the event from being sent to any other listeners. (There can't be any other listeners on CCombo's arrow and text because they are private, so all this really does is prevent a bit of extra code from running).

- the x and y coordinates need to be mapped to CCombo coordinates (they are in the coordinate system of the control that the event occurred in, which is either arrow or text, but they need to be correct for CCombo when the application is notified).

- Mouse and DragDetect events need to propagate the button and count fields (see classes MouseEvent and DragDetectEvent to know which Event fields are API for those specific events).

- Mouse and DragDetect events do not use height (and only the low-level event mechanism supports 'doit' for mouse and drag detect events)

- MouseWheel is a MouseEvent so if we change the notification to MouseWheel, we need to remove the KeyEvent code that was there before. Notifying the application of a KeyEvent (arrow up/down) does seem strange... I believe this was probably done originally because CCombo was trying to emulate the win32 Combo, which sends a key event after sending MouseWheel. I discussed this with Silenio, and we decided that it is better to send the only mouse wheel event and not send the key event. Thanks for pointing this out.  :)

- Note that CCombo changes always need to be tested on several platforms (at least Windows, Mac Cocoa, and GTK) particularly where events and/or focus are concerned. This is because CCombo contains several controls behaving as one control, and the behavior differs between platforms (for example, which of the internal controls gets focus first? What order are mouse/key events fired in?)

I only tested the new patch on win32. Can you please test it on Mac Cocoa and GTK? Thanks!</comment>
		<comment id="4" date="2009-06-19 12:08:14 EDT" author="Carolyn MacLeod">In case it is useful, here's a test snippet that has some CCombos and Combos side by side, and looks at events generated. Try it before the patch and after the patch to see the extra mouse &amp; drag detect notifications.

import org.eclipse.swt.*;
import org.eclipse.swt.custom.*;
import org.eclipse.swt.events.*;
import org.eclipse.swt.layout.*;
import org.eclipse.swt.widgets.*;

public class CComboExample {
 static Group comboGroup;
 static Composite combos;
 static StyledText log;

 static int comboStyle = SWT.BORDER;
 static boolean focusListener = false;
 static boolean keyListener = true;
 static boolean mouseListener = true;
 static boolean mouseMoveListener = false;
 static boolean mouseTrackListener = false;
 static boolean mouseWheelListener = true;
 static boolean dragDetectListener = true;
 static boolean selectionListener = true;
 static boolean traverseListener = true;

 static final String COMBO_NAME = "comboName";
 static final int COMBO_COUNT = 4;
 
 public static void main(String[] args) throws Exception {
  Display display = new Display();
  Shell shell = new Shell(display);
  shell.setText("CCombo Example");
  shell.setLayout(new GridLayout(2, false));

  comboGroup = new Group(shell, SWT.NONE);
  comboGroup.setLayout(new GridLayout(1, false));
  comboGroup.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, false));
  createComboBoxes(comboGroup);
  
  Group optionsGroup = new Group(shell, SWT.NONE);
  optionsGroup.setLayout(new GridLayout(1, false));
  optionsGroup.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, false));
  createOptions(optionsGroup);
  
  Group logGroup = new Group(shell, SWT.NONE);
  logGroup.setLayout(new GridLayout(1, false));
  GridData gd = new GridData(SWT.FILL, SWT.FILL, true, true);
  gd.horizontalSpan = 2;
  logGroup.setLayoutData(gd);
  createLog(logGroup);

  shell.pack();
  shell.open();
  while (!shell.isDisposed()) {
   if (!display.readAndDispatch())
    display.sleep();
  }

  display.dispose();
 }
 
 static void addListeners(Control combo) {
  if (focusListener) {
         combo.addFocusListener(new FocusListener() {
    public void focusGained(FocusEvent e) {
     log("focusGained - " + e.widget.getData(COMBO_NAME));
    }
    public void focusLost(FocusEvent e) {
     log("focusLost - " + e.widget.getData(COMBO_NAME));
    }
   });
  }
  if (keyListener) {
   combo.addKeyListener(new KeyListener() {
    public void keyPressed(KeyEvent e) {
     log("keyPressed - " + e.widget.getData(COMBO_NAME) + " - " + e);
    }
    public void keyReleased(KeyEvent e) {
     log("keyReleased - " + e.widget.getData(COMBO_NAME) + " - " + e);
    }
   });
  }
  if (mouseListener) {
   combo.addMouseListener(new MouseListener() {
    public void mouseDoubleClick(MouseEvent e) {
     log("mouseDoubleClick - " + e.widget.getData(COMBO_NAME) + " - " + e);
    }
    public void mouseDown(MouseEvent e) {
     log("mouseDown - " + e.widget.getData(COMBO_NAME) + " - " + e);
    }
    public void mouseUp(MouseEvent e) {
     log("mouseUp - " + e.widget.getData(COMBO_NAME) + " - " + e);
    } 
   });
  }
  if (mouseMoveListener) {
   combo.addMouseMoveListener(new MouseMoveListener() {
    public void mouseMove(MouseEvent e) {
     log("mouseMove - " + e.widget.getData(COMBO_NAME) + " - " + e);
    } 
   });
  }
  if (mouseTrackListener) {
   combo.addMouseTrackListener(new MouseTrackListener() {
    public void mouseEnter(MouseEvent e) {
     log("mouseEnter - " + e.widget.getData(COMBO_NAME) + " - " + e);
    }
    public void mouseExit(MouseEvent e) {
     log("mouseExit - " + e.widget.getData(COMBO_NAME) + " - " + e);
    }
    public void mouseHover(MouseEvent e) {
     log("mouseHover - " + e.widget.getData(COMBO_NAME) + " - " + e);
    }
   });
  }
  if (mouseWheelListener) {
   combo.addMouseWheelListener(new MouseWheelListener() {
    public void mouseScrolled(MouseEvent e) {
     log("mouseScrolled - " + e.widget.getData(COMBO_NAME) + " - " + e);
    }
   });
  }
  if (dragDetectListener) {
   combo.addDragDetectListener(new DragDetectListener() {
    public void dragDetected(DragDetectEvent e) {
     log("dragDetected - " + e.widget.getData(COMBO_NAME) + " - " + e);
    } 
   });
  }

  if (traverseListener) {
   combo.addTraverseListener(new TraverseListener() {
    public void keyTraversed(TraverseEvent e) {
     log("keyTraversed - " + e.widget.getData(COMBO_NAME) + " - " + e);
    }
   });
  }
  if (selectionListener) {
   if (combo instanceof Combo) {
    ((Combo)combo).addSelectionListener(new SelectionListener() {
     public void widgetDefaultSelected(SelectionEvent e) {
      log("widgetDefaultSelected - " + e.widget.getData(COMBO_NAME) + " - " + e);
     }
     public void widgetSelected(SelectionEvent e) {
      log("widgetSelected - " + e.widget.getData(COMBO_NAME) + " - " + e);
     }
    });
   } else if (combo instanceof CCombo) {
    ((CCombo)combo).addSelectionListener(new SelectionListener() {
     public void widgetDefaultSelected(SelectionEvent e) {
      log("widgetDefaultSelected - " + e.widget.getData(COMBO_NAME) + " - " + e);
     }
     public void widgetSelected(SelectionEvent e) {
      log("widgetSelected - " + e.widget.getData(COMBO_NAME) + " - " + e);
     }
    });
   }
  }
 }

 static void createComboBoxes(Composite parent) {
  if (combos != null) combos.dispose();
  combos = new Composite(parent, SWT.NONE);
  combos.setLayout(new GridLayout(2, false));
  combos.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, false));

  Group ccomboGroup = new Group(combos, SWT.NONE);
  ccomboGroup.setLayout(new GridLayout(3, false));
  ccomboGroup.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, false));
  for (int i = 0; i &lt; COMBO_COUNT; i ++) {
   String name = "CCombo " + i;
   Label label = new Label(ccomboGroup, SWT.NONE);
   label.setText(name);
   final CCombo ccombo = new CCombo(ccomboGroup, comboStyle);
   ccombo.setData(COMBO_NAME, name);
   for (int j = 0; j &lt; 3; j++) {
    ccombo.add("String " + i + "-" + j);
   }
   addListeners(ccombo);
   Button button = new Button(ccomboGroup, SWT.PUSH);
   button.setText("Show");
   button.addSelectionListener(new SelectionListener() {
    public void widgetDefaultSelected(SelectionEvent e) {
    }
    public void widgetSelected(SelectionEvent e) {
     ccombo.setListVisible(!ccombo.getListVisible());
    }
   });
  }
  
  Group comboGroup = new Group(combos, SWT.NONE);
  comboGroup.setLayout(new GridLayout(2, false));
  comboGroup.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, false));
  for (int i = 0; i &lt; COMBO_COUNT; i ++) {
   String name = "Combo " + i;
   Label label = new Label(comboGroup, SWT.NONE);
   label.setText(name);
   Combo combo = new Combo(comboGroup, comboStyle);
   combo.setData(COMBO_NAME, name);
   for (int j = 0; j &lt; 3; j++) {
    combo.add("String " + i + "-" + j);
   }
   addListeners(combo);
  }
  parent.layout();
 }
 
 static void createLog(Composite parent) {
  Button button = new Button(parent, SWT.PUSH);
  button.setText("Clear Log");
  button.addSelectionListener(new SelectionAdapter() {
   public void widgetSelected(SelectionEvent event) {
    log.setText("");
   }
  });  
  log = new StyledText(parent, SWT.MULTI | SWT.H_SCROLL | SWT.V_SCROLL | SWT.BORDER);
  GridData gd = new GridData(SWT.FILL, SWT.FILL, true, true);
  gd.minimumHeight = 200;
  log.setLayoutData(gd);
 }
 
 static void createOptions(Composite parent) {
  Button button = new Button(parent, SWT.CHECK);
  button.setText("Read-only");
  button.setSelection((comboStyle &amp; SWT.READ_ONLY) != 0);
  button.addSelectionListener(new SelectionAdapter() {
   public void widgetSelected(SelectionEvent event) {
    if (((Button) event.widget).getSelection()) {
     comboStyle |= SWT.READ_ONLY;
    } else {
     comboStyle &amp;= ~SWT.READ_ONLY;
    }
    createComboBoxes(comboGroup);
   }
  });
  
  button = new Button(parent, SWT.CHECK);
  button.setText("Add focus listener");
  button.setSelection(focusListener);
  button.addSelectionListener(new SelectionAdapter() {
   public void widgetSelected(SelectionEvent event) {
    focusListener = ((Button) event.widget).getSelection();
    createComboBoxes(comboGroup);
   }
  });
  
  button = new Button(parent, SWT.CHECK);
  button.setText("Add key listener");
  button.setSelection(keyListener);
  button.addSelectionListener(new SelectionAdapter() {
   public void widgetSelected(SelectionEvent event) {
    keyListener = ((Button) event.widget).getSelection();
    createComboBoxes(comboGroup);
   }
  });
  
  button = new Button(parent, SWT.CHECK);
  button.setText("Add mouse listener");
  button.setSelection(mouseListener);
  button.addSelectionListener(new SelectionAdapter() {
   public void widgetSelected(SelectionEvent event) {
    mouseListener = ((Button) event.widget).getSelection();
    createComboBoxes(comboGroup);
   }
  });
  
  button = new Button(parent, SWT.CHECK);
  button.setText("Add mouse move listener");
  button.setSelection(mouseMoveListener);
  button.addSelectionListener(new SelectionAdapter() {
   public void widgetSelected(SelectionEvent event) {
    mouseMoveListener = ((Button) event.widget).getSelection();
    createComboBoxes(comboGroup);
   }
  });
  
  button = new Button(parent, SWT.CHECK);
  button.setText("Add mouse track listener");
  button.setSelection(mouseTrackListener);
  button.addSelectionListener(new SelectionAdapter() {
   public void widgetSelected(SelectionEvent event) {
    mouseTrackListener = ((Button) event.widget).getSelection();
    createComboBoxes(comboGroup);
   }
  });
  
  button = new Button(parent, SWT.CHECK);
  button.setText("Add mouse wheel listener");
  button.setSelection(mouseWheelListener);
  button.addSelectionListener(new SelectionAdapter() {
   public void widgetSelected(SelectionEvent event) {
    mouseWheelListener = ((Button) event.widget).getSelection();
    createComboBoxes(comboGroup);
   }
  });
  
  button = new Button(parent, SWT.CHECK);
  button.setText("Add drag detect listener");
  button.setSelection(dragDetectListener);
  button.addSelectionListener(new SelectionAdapter() {
   public void widgetSelected(SelectionEvent event) {
    dragDetectListener = ((Button) event.widget).getSelection();
    createComboBoxes(comboGroup);
   }
  });
  
  button = new Button(parent, SWT.CHECK);
  button.setText("Add selection listener");
  button.setSelection(selectionListener);
  button.addSelectionListener(new SelectionAdapter() {
   public void widgetSelected(SelectionEvent event) {
    selectionListener = ((Button) event.widget).getSelection();
    createComboBoxes(comboGroup);
   }
  });
  
  button = new Button(parent, SWT.CHECK);
  button.setText("Add traverse listener");
  button.setSelection(traverseListener);
  button.addSelectionListener(new SelectionAdapter() {
   public void widgetSelected(SelectionEvent event) {
    traverseListener = ((Button) event.widget).getSelection();
    createComboBoxes(comboGroup);
   }
  });
 }
 
 static void log(String message) {
  log.append(message + Text.DELIMITER);
  log.setTopIndex(log.getLineCount() - 1);
 }
}</comment>
		<comment id="5" date="2009-06-19 12:16:38 EDT" author="Carolyn MacLeod">I just remembered one more thing that I wanted to test. Please write a little test case that has a ScrolledComposite with a CCombo child (and some other children, so that the ScrolledComposite will scroll). Please try this test case with MouseWheel, to make sure that only the CCombo value changes when it has focus, and the scrolled composite parent does not scroll also. (In other words, CCombo should consume the MouseWheel event, and not pass it up to its parent). Please attach or paste your test case to this bug so that it can be reused for testing in future. Thanks! (In case it's useful, here are some ScrolledComposite snippets from the snippets page: http://www.eclipse.org/swt/snippets/#scrolledcomposite)</comment>
		<comment id="6" date="2009-06-23 15:00:36 EDT" author="Lakshmi Shanmugam">Created attachment 139903 [details]
modified patch

Thank you Carolyn for the comments.

I tested the new patch on Mac, GTK and windows.
-- On Mac &amp; GTK, inside a scrolled composite, scrolling the mouse on the arrow of the CCombo scrolls the composite.

-- Only on windows, scrolling on the arrow changes the combo selection. Because, on windows, mouse wheel event is being sent to the control which has focus. But, on Mac &amp; GTK, it is being sent to control under the mouse.

Hence, modified the patch so that scrolling on arrow of CCombo doesn't scroll the composite and it also changes the combo selection.</comment>
		<comment id="7" date="2009-06-23 15:07:03 EDT" author="Lakshmi Shanmugam">Test case for CCombo inside a scrolled composite

import org.eclipse.swt.*;
import org.eclipse.swt.custom.*;
import org.eclipse.swt.layout.*;
import org.eclipse.swt.widgets.*;

public class ComboScroll {
    public static void main(String[] args) {
 Display display = new Display();
 Shell shell = new Shell(display);
 shell.setLayout(new GridLayout());
 final ScrolledComposite sc = new ScrolledComposite(shell, SWT.BORDER
  | SWT.H_SCROLL | SWT.V_SCROLL);
 sc.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true, 1, 1));
 Composite c = new Composite(sc, SWT.NONE);
 c.setLayout(new GridLayout(1, true));
 CCombo ccombo = new CCombo(c, SWT.BORDER);
 for (int i = 0; i &lt; 5; i++)
     ccombo.add("ccombo " + i);
 Combo combo = new Combo(c, SWT.BORDER);
 for (int i = 0; i &lt; 5; i++)
     combo.add("combo " + i);
 for (int i = 0; i &lt; 10; i++) {
     Button b = new Button(c, SWT.PUSH);
     b.setText("Button " + i);
 }
 sc.setContent(c);
 sc.setExpandHorizontal(true);
 sc.setExpandVertical(true);
 sc.setMinSize(c.computeSize(SWT.DEFAULT, SWT.DEFAULT));
 sc.setShowFocusedControl(true);
 shell.setSize(300, 300);
 shell.open();
 while (!shell.isDisposed()) {
     if (!display.readAndDispatch())
  display.sleep();
 }
 display.dispose();
    }
}</comment>
		<comment id="8" date="2009-06-23 15:40:33 EDT" author="Lakshmi Shanmugam">I have a question regarding the patch --
The x &amp; y coordinates for the Text and the corresponding mapped coordinates for CCombo are the same. They differ for the arrow button and CCombo but not for the Text. In that case, why do we map Text's coordinates to CCombo? </comment>
		<comment id="9" date="2009-06-23 16:11:05 EDT" author="Carolyn MacLeod">We map the text coordinates just in case the parent composite adds any trim.
For example, maybe the user creates a CCombo with some border width.
(Try it, and see if it makes any difference. Maybe it doesn't, but I'd leave the mapping there anyhow, in case it changes on some platform in future).</comment>
		<comment id="10" date="2010-01-11 16:50:00 EST" author="Kevin Barnes">I'm not seeing mouse wheel events getting handled by CCombo or Combo. This is possibly something weird on my machine. Otherwise this patch looks good. 
Lakshmi, Can you confirm that mouse wheel events are working properly for you?</comment>
		<comment id="11" date="2010-01-12 07:25:30 EST" author="Lakshmi Shanmugam">Hi Kevin,
I tried the snippet in comment 4, I get mouse wheel events when I scroll over the CCombo's button or textbox. No mouse events when I scroll over the CCombo's drop-down. Tested it on windows, gtk &amp; mac.
Only on windows when CCombo has focus, scrolling anywhere in the composite sends mousewheel events to CCombo. (please see comment 6)</comment>
		<comment id="12" date="2010-01-12 10:04:14 EST" author="Kevin Barnes">I played with the patch some more last night and I think my machine is doing some strange things.
Car could you take a few minutes to run your test case with Lakshmi's patch?</comment>
		<comment id="13" date="2010-01-12 10:59:57 EST" author="Carolyn MacLeod">Looks good to me, and the mouse wheel events are getting through to the CCombo (Cocoa) after I applied the patch.</comment>
		<comment id="14" date="2010-01-12 11:06:03 EST" author="Kevin Barnes">thanks Car...
Lakshmi lets go with this patch.</comment>
		<comment id="15" date="2010-01-15 01:36:25 EST" author="Lakshmi Shanmugam">Thanks Kevin. Released patch to HEAD.
fixed &gt; 20100115</comment>
		<comment id="16" date="2010-01-15 01:38:16 EST" author="Lakshmi Shanmugam">.</comment>
      </comments>
    </buginformation>
    <fixedCommits>
      <commit Id="49d8ee915a6006746596a7d40978b42b50fa61b3" author="Lakshmi Shanmugam" date="2010-01-15 03:28:43"/>
          <file name="bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/CCombo.java">
              <method name="CCombo" returnType="null" parameters="Composite int"/>
          </file>
      </commit>
    </fixedCommits>
  </bug>
  <bug id="108792" opendate="2005-09-05 08:43:00" fixdate="2010-04-28 04:37:00">
    <buginformation>
      <summary>Horizontal caret position lost due to StyledText.replaceStyleRanges</summary>
      <description>I20050830-0800 - enable Mark Occurences, disable 'sticky' occurences - in the following CU place the caret instead of '|': class |Foo { } - press arrow down - wait for occurences to be updated - press arrow up -&amp;gt; caret position is: c|lass Foo {...</description>
      <comments>
		<comment id="1" date="2005-09-06 03:34:56 EDT" author="Dani Megert">This happens when the call to StyledText.replaceStyleRanges(int start, int
length, StyleRange[] ranges) includes and affects the caret. Can also be
reproduced with sticky mode by clicking on the marker icon before pressing
ArrowUp in test case from comment 0.</comment>
		<comment id="2" date="2008-06-17 14:15:08 EDT" author="Felipe Heidrich">This works for me. Can you check if this is still a problem on 3.4 ?
thank you</comment>
		<comment id="3" date="2008-06-18 05:05:13 EDT" author="Dani Megert">Still broken using 3.4 RC4.

To see the difference disable 'Mark Occurrences' and repeat the steps from comment 0. You will see that after Arrow_Down, Arrow_Up the caret will be at the same initial location (before "Foo") while with 'Mark Occurrences' the caret offset is 1.</comment>
		<comment id="4" date="2009-03-30 12:31:29 EDT" author="Dani Megert">*** Bug 79992 has been marked as a duplicate of this bug. ***</comment>
		<comment id="5" date="2009-08-03 08:41:39 EDT" author="Dani Megert">Felipe, it would be good to have a fix for this.</comment>
		<comment id="6" date="2009-08-05 15:06:32 EDT" author="Felipe Heidrich">Created attachment 143546 [details]
patch</comment>
		<comment id="7" date="2009-08-05 15:08:24 EDT" author="Felipe Heidrich">I'll release the fix next week, after M1.</comment>
		<comment id="8" date="2009-08-06 02:47:28 EDT" author="Dani Megert">Thanks!</comment>
		<comment id="9" date="2009-08-07 15:14:47 EDT" author="Felipe Heidrich">Fixed in HEAD &gt; 20090807</comment>
		<comment id="10" date="2009-08-12 04:08:10 EDT" author="Dani Megert">Verified in I20090811-0800.</comment>
		<comment id="11" date="2009-11-17 10:00:51 EST" author="Felipe Heidrich">*** Bug 295162 has been marked as a duplicate of this bug. ***</comment>
		<comment id="12" date="2010-04-28 04:37:34 EDT" author="Anton Leherbauer">*** Bug 308023 has been marked as a duplicate of this bug. ***</comment>
      </comments>
    </buginformation>
    <fixedCommits>
      <commit Id="76bc5fe721fcc814537369ff65508640f6ef36c6" author="Felipe Heidrich" date="2009-08-08 04:16:36"/>
          <file name="bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText.java">
              <method name="setStyleRanges" returnType="void" parameters="int int int[] StyleRange[] boolean"/>
          </file>
      </commit>
    </fixedCommits>
  </bug>
</bugrepository>
